{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/input-shims-73f15161.js"],"names":["cloneMap","WeakMap","relocateInput","componentEl","inputEl","shouldRelocate","inputRelativeY","has","addClone","removeClone","isFocused","input","getRootNode","activeElement","parentEl","parentNode","clonedEl","cloneNode","classList","add","tabIndex","appendChild","set","tx","ownerDocument","dir","style","pointerEvents","transform","clone","get","remove","SKIP_SELECTOR","calcScrollData","inputRect","contentRect","keyboardHeight","platformHeight","inputTop","top","inputBottom","bottom","visibleAreaTop","safeAreaTop","distanceToBottom","Math","min","distanceToTop","desiredScrollAmount","round","scrollAmount","duration","abs","scrollDuration","max","scrollPadding","inputSafeY","jsSetFocus","async","contentEl","footerEl","scrollData","itemEl","closest","getBoundingClientRect","defaultView","innerHeight","focus","r","click","window","scrollContent","scrollContentTimeout","clearTimeout","removeEventListener","doubleKeyboardEventListener","scrollByPoint","addEventListener","getScrollElement","scrollEl","totalScrollAmount","scrollHeight","clientHeight","scrollTop","type","setTimeout","hasPointerMoved","threshold","startCoord","endCoord","deltaX","x","deltaY","y","setScrollPadding","tagName","parentElement","el","timer","setProperty","startInputShims","config","doc","document","getNumber","scrollAssist","getBoolean","hideCaret","inputBlurring","inputs","Array","from","querySelectorAll","hideCaretMap","scrollAssistMap","registerInput","Promise","resolve","c","inputRoot","shadowRoot","querySelector","rmFn","scrollHideCaret","shouldHideCaret","onBlur","showCaret","a","coord","touchStart","ev","p","touchEnd","stopPropagation","focused","didScroll","active","matches","tapped","target","blur","detail","fn"],"mappings":"+eAEMA,EAAW,IAAIC,QACfC,EAAgB,SAACC,EAAaC,EAASC,GAAiC,IAAjBC,EAAiB,yDACxEN,EAASO,IAAIJ,KAAiBE,IAG9BA,EACFG,EAASL,EAAaC,EAASE,GAG/BG,EAAYN,EAAaC,KAGvBM,EAAaC,YAAK,OACfA,IAAUA,EAAMC,cAAcC,eAEjCL,EAAW,SAACL,EAAaC,EAASE,GAUtC,IAAMQ,EAAWV,EAAQW,WAEnBC,EAAWZ,EAAQa,WAAU,GACnCD,EAASE,UAAUC,IAAI,gBACvBH,EAASI,UAAY,EACrBN,EAASO,YAAYL,GACrBhB,EAASsB,IAAInB,EAAaa,GAC1B,IACMO,EAAiB,QADXpB,EAAYqB,cACTC,IAAgB,MAAQ,KACvCtB,EAAYuB,MAAMC,cAAgB,OAClCvB,EAAQsB,MAAME,UAAdxB,sBAAyCmB,EAAzCnB,cAAiDE,EAAjDF,mBAEIK,EAAc,SAACN,EAAaC,GAChC,IAAMyB,EAAQ7B,EAAS8B,IAAI3B,GACvB0B,IACF7B,EAAQ,OAAQG,GAChB0B,EAAME,UAER5B,EAAYuB,MAAMC,cAAgB,GAClCvB,EAAQsB,MAAME,UAAY,IAyBtBI,EAAgB,gDAwDhBC,EAAiB,SAACC,EAAWC,EAAaC,EAAgBC,GAE9D,IAAMC,EAAWJ,EAAUK,IACrBC,EAAcN,EAAUO,OAExBC,EAAiBP,EAAYI,IAG7BI,EAAcD,EAAiB,GAG/BE,EAFqC,IAHjBC,KAAKC,IAAIX,EAAYM,OAAQJ,EAAiBD,GAK9BI,EACpCO,EAAgBJ,EAAcL,EAE9BU,EAAsBH,KAAKI,MAAOL,EAAmB,GACtDA,EACAG,EAAgB,GACdA,EACD,GAGAG,EAAeL,KAAKC,IAAIE,EAAqBV,EAAWI,GAExDS,EADWN,KAAKO,IAAIF,GA3BA,GA8B1B,MAAO,CACLA,eACAG,eAHqBR,KAAKC,IAAI,IAAKD,KAAKS,IAAI,IAAKH,IAIjDI,cAAenB,EACfoB,WAAwC,GAA1BlB,EAAWK,KA+BvBc,EAAU,2CAAGC,WAAOvD,EAAaC,EAASuD,EAAWC,EAAUxB,GAAlDsB,kGACZC,GAAcC,EADFF,oDAIXG,EApEe,SAAA1D,EAAawD,EAAWvB,GAC7C,IAAM0B,EAAS3D,EAAY4D,QAAQ,wBAA0B5D,EAC7D,OAAO8B,EAAe6B,EAAOE,wBAAyBL,EAAUK,wBAAyB5B,EAAgBjC,EAAYqB,cAAcyC,YAAYC,aAF1H,CAoEY/D,EAAcwD,GAAaC,EAAWxB,KACnEuB,GAAad,KAAKO,IAAIS,EAAWX,cAAgB,GALpCQ,gBAQftD,EAAQ+D,QAROT,0BAcjBxD,EAAcC,EAAaC,GAAQ,EAAOyD,EAAWL,YACrDpD,EAAQ+D,WAMR,EAAAC,GAAI,kBAAMjE,EAAYkE,UAEA,oBAAXC,OAvBMZ,oBAyBTa,EAzBSb,2CAyBOA,wGAEhBc,GACFC,aAAaD,GAEfF,OAAOI,oBAAoB,qBAAsBC,GACjDL,OAAOI,oBAAoB,qBAAsBH,GAN7Bb,KAQhBC,GARgBD,qCASZC,EAAUiB,cAAc,EAAGf,EAAWX,aAAcW,EAAWR,gBATnDK,OAapBxD,EAAcC,EAAaC,GAAQ,EAAQyD,EAAWL,YAEtDpD,EAAQ+D,QAfYT,yCAzBPA,qDA0CTiB,EAA8B,SAA9BA,IACJL,OAAOI,oBAAoB,qBAAsBC,GACjDL,OAAOO,iBAAiB,qBAAsBN,KAE5CZ,EA9CWD,kCA+CUC,EAAUmB,mBA/CpBpB,WA+CPqB,EA/COrB,OA4DPsB,EAAoBD,EAASE,aAAeF,EAASG,eACvDrB,EAAWX,aAAgB8B,EAAoBD,EAASI,WA7D/CzB,2CAmEU,aAAjBtD,EAAQgF,MAEVvB,EAAWX,cAAgB,GAC3BoB,OAAOO,iBAAiB,qBAAsBF,IAG9CL,OAAOO,iBAAiB,qBAAsBN,QAQhDC,EAAuBa,WAAWd,EAAe,QAjFtCb,QAqFfa,IArFeb,0CAAH,8DAwFV4B,EAAkB,SAACC,EAAWC,EAAYC,GAC9C,GAAID,GAAcC,EAAU,CAC1B,IAAMC,EAAUF,EAAWG,EAAIF,EAASE,EAClCC,EAAUJ,EAAWK,EAAIJ,EAASI,EAExC,OADiBH,EAASA,EAASE,EAASA,EACzBL,EAAYA,EAEjC,OAAM,GAmBFO,EAAmB,SAACnF,EAAOyB,GAC/B,GAAsB,UAAlBzB,EAAMoF,WAGNpF,EAAMqF,eAAiD,cAAhCrF,EAAMqF,cAAcD,SAG3CpF,EAAMqF,eACRrF,EAAMqF,cAAcA,eAC0B,kBAA9CrF,EAAMqF,cAAcA,cAAcD,SAFpC,CAKA,IAAME,EAAKtF,EAAMoD,QAAQ,eACzB,GAAW,OAAPkC,EAAJ,CAGA,IAAMC,EAAQD,EAAoB,iBAC9BC,GACFzB,aAAayB,GAEX9D,EAAiB,EACnB6D,EAAGvE,MAAMyE,YAAY,oBAArBF,UAA6C7D,EAA7C6D,OAGAA,EAAoB,iBAAIZ,WAAW,WACjCY,EAAGvE,MAAMyE,YAAY,oBAAqB,QACzC,QAMDC,EAAmBC,YACvB,IAAMC,EAAMC,SACNnE,EAAiBiE,EAAOG,UAAU,iBAAkB,KACpDC,EAAeJ,EAAOK,WAAW,mBACjCC,EAAYN,EAAOK,WAAW,wBAC9BE,EAAgBP,EAAOK,WAAW,oBAClCnD,EAAgB8C,EAAOK,WAAW,oBAClCG,EAASC,MAAMC,KAAKT,EAAIU,iBAAiB,4BACzCC,EAAe,IAAIhH,QACnBiH,EAAkB,IAAIjH,QACtBkH,EAAa,2CAAGzD,WAAOvD,GAAPuD,+GACd,IAAI0D,QAAQC,YAAO,OAAPA,EAAW,EAAAC,GAAiBnH,EAAakH,KADvC3D,OAEd6D,EAAYpH,EAAYqH,YAAcrH,EACtCC,EAAUmH,EAAUE,cAAc,UAAYF,EAAUE,cAAc,YACtE1C,EAAW5E,EAAY4D,QAAQ,eAC/BH,EAAamB,EAAgD,KAApC5E,EAAY4D,QAAQ,cAC9C3D,IAGC2E,GAAY4B,IAAcM,EAAa1G,IAAIJ,KACzCuH,EAhTqB,SAAAvH,EAAaC,EAAS2E,GACrD,IAAKA,IAAa3E,EAChB,OAAO,aAET,IAAMuH,EAAmBC,YACnBlH,EAAUN,IACZF,EAAcC,EAAaC,EAASwH,IAGlCC,EAAS,kBAAM3H,EAAcC,EAAaC,GAAQ,IAClDuG,EAAY,kBAAMgB,GAAgB,IAClCG,EAAY,kBAAMH,GAAgB,IAIxC,OAAM,EAHN,EAAAI,GAAiBhD,EAAU,iBAAkB4B,MAC7C,EAAAoB,GAAiBhD,EAAU,eAAgB+C,GAC3C1H,EAAQyE,iBAAiB,OAAQgD,GAC1B,cACL,KAAoB9C,EAAU,iBAAkB4B,MAChD,KAAoB5B,EAAU,eAAgB+C,GAC9C1H,EAAQyE,iBAAiB,UAAWgD,IAlBP,CAgTU1H,EAAaC,EAAS2E,GAC3DkC,EAAa3F,IAAInB,EAAauH,KAEzB3C,GAAcnB,IAAa6C,IAAiBS,EAAgB3G,IAAIJ,KAC/DuH,EArMgB,SAAAvH,EAAaC,EAASuD,EAAWC,EAAUxB,GACrE,IAAI4F,EACEC,EAAcC,YAClBF,KAAQ,EAAAG,GAAaD,IAEjBE,EAAYF,YAEhB,GAAKF,EAAL,CAIA,IAAMvC,KAAW,EAAA0C,GAAaD,GAGzB5C,EAAgB,EAAG0C,EAAOvC,IAAc/E,EAAUN,KACrD8H,EAAGG,kBAEH5E,EAAWtD,EAAaC,EAASuD,EAAWC,EAAUxB,MAK1D,OAFAjC,EAAY0E,iBAAiB,aAAcoD,GAAW,GACtD9H,EAAY0E,iBAAiB,WAAYuD,GAAS,GAC3C,WACLjI,EAAYuE,oBAAoB,aAAcuD,GAAW,GACzD9H,EAAYuE,oBAAoB,WAAY0D,GAAS,IAxB7B,CAqMUjI,EAAaC,EAAS2E,EAAUnB,EAAUxB,GAC1E8E,EAAgB5F,IAAInB,EAAauH,KAffhE,yCAAH,sDAkCfkD,GAjTuB,WAC3B,IAAI0B,KACAC,KACEjC,EAAMC,UAmCP,EAEL,EAAAwB,GAAiBzB,EAAK,iBApCL,WACfiC,OAoCFjC,EAAIzB,iBAAiB,UAlCH,WAChByD,OAiCwC,GAC1ChC,EAAIzB,iBAAiB,WAhCDqD,YAElB,GAAIK,EACFA,SADF,CAIA,IAAMC,EAASlC,EAAIzF,cACnB,GAAK2H,IAIDA,EAAOC,QAAQzG,GAAnB,CAIA,IAAM0G,EAASR,EAAGS,OACdD,IAAWF,IAGXE,EAAOD,QAAQzG,IAAkB0G,EAAO3E,QAAQ/B,KAGpDsG,KAEAjD,WAAW,WACJiD,GACHE,EAAOI,QAER,UAIuC,GA1CjB,GAoTvBrF,GA9FuBnB,YAC3B,IAAMkE,EAAMC,SAOZD,EAAIzB,iBAAiB,UANFqD,YACjBpC,EAAiBoC,EAAGS,OAAQvG,KAM9BkE,EAAIzB,iBAAiB,WAJDqD,YAClBpC,EAAiBoC,EAAGS,OAAQ,KANHvG,CA+FLA,GAKtB,cAAoByE,EAApB,gBAAK,IAAMlG,EAAK,KACdwG,EAAcxG,GAEhB2F,EAAIzB,iBAAiB,kBAAqBqD,YACxCf,EAAce,EAAGW,UAEnBvC,EAAIzB,iBAAiB,oBAAuBqD,aA/BpB,SAAC/H,GACvB,GAAIwG,EAAW,CACb,IAAMmC,EAAK7B,EAAanF,IAAI3B,GACxB2I,GACFA,IAEF7B,EAAY,OAAQ9G,GAEtB,GAAIsG,EAAc,CAChB,IAAMqC,EAAK5B,EAAgBpF,IAAI3B,GAC3B2I,GACFA,IAEF5B,EAAe,OAAQ/G,IAbH,CAgCN+H,EAAGW,e","file":"x","sourcesContent":["import { a as addEventListener, b as removeEventListener, r as raf, p as pointerCoord, c as componentOnReady } from './helpers-dd7e4b7b.js';\r\n\r\nconst cloneMap = new WeakMap();\r\nconst relocateInput = (componentEl, inputEl, shouldRelocate, inputRelativeY = 0) => {\r\n  if (cloneMap.has(componentEl) === shouldRelocate) {\r\n    return;\r\n  }\r\n  if (shouldRelocate) {\r\n    addClone(componentEl, inputEl, inputRelativeY);\r\n  }\r\n  else {\r\n    removeClone(componentEl, inputEl);\r\n  }\r\n};\r\nconst isFocused = (input) => {\r\n  return input === input.getRootNode().activeElement;\r\n};\r\nconst addClone = (componentEl, inputEl, inputRelativeY) => {\r\n  // this allows for the actual input to receive the focus from\r\n  // the user's touch event, but before it receives focus, it\r\n  // moves the actual input to a location that will not screw\r\n  // up the app's layout, and does not allow the native browser\r\n  // to attempt to scroll the input into place (messing up headers/footers)\r\n  // the cloned input fills the area of where native input should be\r\n  // while the native input fakes out the browser by relocating itself\r\n  // before it receives the actual focus event\r\n  // We hide the focused input (with the visible caret) invisible by making it scale(0),\r\n  const parentEl = inputEl.parentNode;\r\n  // DOM WRITES\r\n  const clonedEl = inputEl.cloneNode(false);\r\n  clonedEl.classList.add('cloned-input');\r\n  clonedEl.tabIndex = -1;\r\n  parentEl.appendChild(clonedEl);\r\n  cloneMap.set(componentEl, clonedEl);\r\n  const doc = componentEl.ownerDocument;\r\n  const tx = doc.dir === 'rtl' ? 9999 : -9999;\r\n  componentEl.style.pointerEvents = 'none';\r\n  inputEl.style.transform = `translate3d(${tx}px,${inputRelativeY}px,0) scale(0)`;\r\n};\r\nconst removeClone = (componentEl, inputEl) => {\r\n  const clone = cloneMap.get(componentEl);\r\n  if (clone) {\r\n    cloneMap.delete(componentEl);\r\n    clone.remove();\r\n  }\r\n  componentEl.style.pointerEvents = '';\r\n  inputEl.style.transform = '';\r\n};\r\n\r\nconst enableHideCaretOnScroll = (componentEl, inputEl, scrollEl) => {\r\n  if (!scrollEl || !inputEl) {\r\n    return () => { return; };\r\n  }\r\n  const scrollHideCaret = (shouldHideCaret) => {\r\n    if (isFocused(inputEl)) {\r\n      relocateInput(componentEl, inputEl, shouldHideCaret);\r\n    }\r\n  };\r\n  const onBlur = () => relocateInput(componentEl, inputEl, false);\r\n  const hideCaret = () => scrollHideCaret(true);\r\n  const showCaret = () => scrollHideCaret(false);\r\n  addEventListener(scrollEl, 'ionScrollStart', hideCaret);\r\n  addEventListener(scrollEl, 'ionScrollEnd', showCaret);\r\n  inputEl.addEventListener('blur', onBlur);\r\n  return () => {\r\n    removeEventListener(scrollEl, 'ionScrollStart', hideCaret);\r\n    removeEventListener(scrollEl, 'ionScrollEnd', showCaret);\r\n    inputEl.addEventListener('ionBlur', onBlur);\r\n  };\r\n};\r\n\r\nconst SKIP_SELECTOR = 'input, textarea, [no-blur], [contenteditable]';\r\nconst enableInputBlurring = () => {\r\n  let focused = true;\r\n  let didScroll = false;\r\n  const doc = document;\r\n  const onScroll = () => {\r\n    didScroll = true;\r\n  };\r\n  const onFocusin = () => {\r\n    focused = true;\r\n  };\r\n  const onTouchend = (ev) => {\r\n    // if app did scroll return early\r\n    if (didScroll) {\r\n      didScroll = false;\r\n      return;\r\n    }\r\n    const active = doc.activeElement;\r\n    if (!active) {\r\n      return;\r\n    }\r\n    // only blur if the active element is a text-input or a textarea\r\n    if (active.matches(SKIP_SELECTOR)) {\r\n      return;\r\n    }\r\n    // if the selected target is the active element, do not blur\r\n    const tapped = ev.target;\r\n    if (tapped === active) {\r\n      return;\r\n    }\r\n    if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\r\n      return;\r\n    }\r\n    focused = false;\r\n    // TODO: find a better way, why 50ms?\r\n    setTimeout(() => {\r\n      if (!focused) {\r\n        active.blur();\r\n      }\r\n    }, 50);\r\n  };\r\n  addEventListener(doc, 'ionScrollStart', onScroll);\r\n  doc.addEventListener('focusin', onFocusin, true);\r\n  doc.addEventListener('touchend', onTouchend, false);\r\n  return () => {\r\n    removeEventListener(doc, 'ionScrollStart', onScroll, true);\r\n    doc.removeEventListener('focusin', onFocusin, true);\r\n    doc.removeEventListener('touchend', onTouchend, false);\r\n  };\r\n};\r\n\r\nconst SCROLL_ASSIST_SPEED = 0.3;\r\nconst getScrollData = (componentEl, contentEl, keyboardHeight) => {\r\n  const itemEl = componentEl.closest('ion-item,[ion-item]') || componentEl;\r\n  return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, componentEl.ownerDocument.defaultView.innerHeight);\r\n};\r\nconst calcScrollData = (inputRect, contentRect, keyboardHeight, platformHeight) => {\r\n  // compute input's Y values relative to the body\r\n  const inputTop = inputRect.top;\r\n  const inputBottom = inputRect.bottom;\r\n  // compute visible area\r\n  const visibleAreaTop = contentRect.top;\r\n  const visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\r\n  // compute safe area\r\n  const safeAreaTop = visibleAreaTop + 15;\r\n  const safeAreaBottom = visibleAreaBottom * 0.75;\r\n  // figure out if each edge of the input is within the safe area\r\n  const distanceToBottom = safeAreaBottom - inputBottom;\r\n  const distanceToTop = safeAreaTop - inputTop;\r\n  // desiredScrollAmount is the negated distance to the safe area according to our calculations.\r\n  const desiredScrollAmount = Math.round((distanceToBottom < 0)\r\n    ? -distanceToBottom\r\n    : (distanceToTop > 0)\r\n      ? -distanceToTop\r\n      : 0);\r\n  // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\r\n  // gets focus, so make sure we don't scroll the input above the visible area\r\n  const scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\r\n  const distance = Math.abs(scrollAmount);\r\n  const duration = distance / SCROLL_ASSIST_SPEED;\r\n  const scrollDuration = Math.min(400, Math.max(150, duration));\r\n  return {\r\n    scrollAmount,\r\n    scrollDuration,\r\n    scrollPadding: keyboardHeight,\r\n    inputSafeY: -(inputTop - safeAreaTop) + 4\r\n  };\r\n};\r\n\r\nconst enableScrollAssist = (componentEl, inputEl, contentEl, footerEl, keyboardHeight) => {\r\n  let coord;\r\n  const touchStart = (ev) => {\r\n    coord = pointerCoord(ev);\r\n  };\r\n  const touchEnd = (ev) => {\r\n    // input cover touchend/mouseup\r\n    if (!coord) {\r\n      return;\r\n    }\r\n    // get where the touchend/mouseup ended\r\n    const endCoord = pointerCoord(ev);\r\n    // focus this input if the pointer hasn't moved XX pixels\r\n    // and the input doesn't already have focus\r\n    if (!hasPointerMoved(6, coord, endCoord) && !isFocused(inputEl)) {\r\n      ev.stopPropagation();\r\n      // begin the input focus process\r\n      jsSetFocus(componentEl, inputEl, contentEl, footerEl, keyboardHeight);\r\n    }\r\n  };\r\n  componentEl.addEventListener('touchstart', touchStart, true);\r\n  componentEl.addEventListener('touchend', touchEnd, true);\r\n  return () => {\r\n    componentEl.removeEventListener('touchstart', touchStart, true);\r\n    componentEl.removeEventListener('touchend', touchEnd, true);\r\n  };\r\n};\r\nconst jsSetFocus = async (componentEl, inputEl, contentEl, footerEl, keyboardHeight) => {\r\n  if (!contentEl && !footerEl) {\r\n    return;\r\n  }\r\n  const scrollData = getScrollData(componentEl, (contentEl || footerEl), keyboardHeight);\r\n  if (contentEl && Math.abs(scrollData.scrollAmount) < 4) {\r\n    // the text input is in a safe position that doesn't\r\n    // require it to be scrolled into view, just set focus now\r\n    inputEl.focus();\r\n    return;\r\n  }\r\n  // temporarily move the focus to the focus holder so the browser\r\n  // doesn't freak out while it's trying to get the input in place\r\n  // at this point the native text input still does not have focus\r\n  relocateInput(componentEl, inputEl, true, scrollData.inputSafeY);\r\n  inputEl.focus();\r\n  /**\r\n   * Relocating/Focusing input causes the\r\n   * click event to be cancelled, so\r\n   * manually fire one here.\r\n   */\r\n  raf(() => componentEl.click());\r\n  /* tslint:disable-next-line */\r\n  if (typeof window !== 'undefined') {\r\n    let scrollContentTimeout;\r\n    const scrollContent = async () => {\r\n      // clean up listeners and timeouts\r\n      if (scrollContentTimeout !== undefined) {\r\n        clearTimeout(scrollContentTimeout);\r\n      }\r\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\r\n      window.removeEventListener('ionKeyboardDidShow', scrollContent);\r\n      // scroll the input into place\r\n      if (contentEl) {\r\n        await contentEl.scrollByPoint(0, scrollData.scrollAmount, scrollData.scrollDuration);\r\n      }\r\n      // the scroll view is in the correct position now\r\n      // give the native text input focus\r\n      relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\r\n      // ensure this is the focused input\r\n      inputEl.focus();\r\n    };\r\n    const doubleKeyboardEventListener = () => {\r\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\r\n      window.addEventListener('ionKeyboardDidShow', scrollContent);\r\n    };\r\n    if (contentEl) {\r\n      const scrollEl = await contentEl.getScrollElement();\r\n      /**\r\n       * scrollData will only consider the amount we need\r\n       * to scroll in order to properly bring the input\r\n       * into view. It will not consider the amount\r\n       * we can scroll in the content element.\r\n       * As a result, scrollData may request a greater\r\n       * scroll position than is currently available\r\n       * in the DOM. If this is the case, we need to\r\n       * wait for the webview to resize/the keyboard\r\n       * to show in order for additional scroll\r\n       * bandwidth to become available.\r\n       */\r\n      const totalScrollAmount = scrollEl.scrollHeight - scrollEl.clientHeight;\r\n      if (scrollData.scrollAmount > (totalScrollAmount - scrollEl.scrollTop)) {\r\n        /**\r\n         * On iOS devices, the system will show a \"Passwords\" bar above the keyboard\r\n         * after the initial keyboard is shown. This prevents the webview from resizing\r\n         * until the \"Passwords\" bar is shown, so we need to wait for that to happen first.\r\n         */\r\n        if (inputEl.type === 'password') {\r\n          // Add 50px to account for the \"Passwords\" bar\r\n          scrollData.scrollAmount += 50;\r\n          window.addEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\r\n        }\r\n        else {\r\n          window.addEventListener('ionKeyboardDidShow', scrollContent);\r\n        }\r\n        /**\r\n         * This should only fire in 2 instances:\r\n         * 1. The app is very slow.\r\n         * 2. The app is running in a browser on an old OS\r\n         * that does not support Ionic Keyboard Events\r\n         */\r\n        scrollContentTimeout = setTimeout(scrollContent, 1000);\r\n        return;\r\n      }\r\n    }\r\n    scrollContent();\r\n  }\r\n};\r\nconst hasPointerMoved = (threshold, startCoord, endCoord) => {\r\n  if (startCoord && endCoord) {\r\n    const deltaX = (startCoord.x - endCoord.x);\r\n    const deltaY = (startCoord.y - endCoord.y);\r\n    const distance = deltaX * deltaX + deltaY * deltaY;\r\n    return distance > (threshold * threshold);\r\n  }\r\n  return false;\r\n};\r\n\r\nconst PADDING_TIMER_KEY = '$ionPaddingTimer';\r\nconst enableScrollPadding = (keyboardHeight) => {\r\n  const doc = document;\r\n  const onFocusin = (ev) => {\r\n    setScrollPadding(ev.target, keyboardHeight);\r\n  };\r\n  const onFocusout = (ev) => {\r\n    setScrollPadding(ev.target, 0);\r\n  };\r\n  doc.addEventListener('focusin', onFocusin);\r\n  doc.addEventListener('focusout', onFocusout);\r\n  return () => {\r\n    doc.removeEventListener('focusin', onFocusin);\r\n    doc.removeEventListener('focusout', onFocusout);\r\n  };\r\n};\r\nconst setScrollPadding = (input, keyboardHeight) => {\r\n  if (input.tagName !== 'INPUT') {\r\n    return;\r\n  }\r\n  if (input.parentElement && input.parentElement.tagName === 'ION-INPUT') {\r\n    return;\r\n  }\r\n  if (input.parentElement &&\r\n    input.parentElement.parentElement &&\r\n    input.parentElement.parentElement.tagName === 'ION-SEARCHBAR') {\r\n    return;\r\n  }\r\n  const el = input.closest('ion-content');\r\n  if (el === null) {\r\n    return;\r\n  }\r\n  const timer = el[PADDING_TIMER_KEY];\r\n  if (timer) {\r\n    clearTimeout(timer);\r\n  }\r\n  if (keyboardHeight > 0) {\r\n    el.style.setProperty('--keyboard-offset', `${keyboardHeight}px`);\r\n  }\r\n  else {\r\n    el[PADDING_TIMER_KEY] = setTimeout(() => {\r\n      el.style.setProperty('--keyboard-offset', '0px');\r\n    }, 120);\r\n  }\r\n};\r\n\r\nconst INPUT_BLURRING = true;\r\nconst SCROLL_PADDING = true;\r\nconst startInputShims = (config) => {\r\n  const doc = document;\r\n  const keyboardHeight = config.getNumber('keyboardHeight', 290);\r\n  const scrollAssist = config.getBoolean('scrollAssist', true);\r\n  const hideCaret = config.getBoolean('hideCaretOnScroll', true);\r\n  const inputBlurring = config.getBoolean('inputBlurring', true);\r\n  const scrollPadding = config.getBoolean('scrollPadding', true);\r\n  const inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\r\n  const hideCaretMap = new WeakMap();\r\n  const scrollAssistMap = new WeakMap();\r\n  const registerInput = async (componentEl) => {\r\n    await new Promise(resolve => componentOnReady(componentEl, resolve));\r\n    const inputRoot = componentEl.shadowRoot || componentEl;\r\n    const inputEl = inputRoot.querySelector('input') || inputRoot.querySelector('textarea');\r\n    const scrollEl = componentEl.closest('ion-content');\r\n    const footerEl = (!scrollEl) ? componentEl.closest('ion-footer') : null;\r\n    if (!inputEl) {\r\n      return;\r\n    }\r\n    if (!!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\r\n      const rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\r\n      hideCaretMap.set(componentEl, rmFn);\r\n    }\r\n    if ((!!scrollEl || !!footerEl) && scrollAssist && !scrollAssistMap.has(componentEl)) {\r\n      const rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, footerEl, keyboardHeight);\r\n      scrollAssistMap.set(componentEl, rmFn);\r\n    }\r\n  };\r\n  const unregisterInput = (componentEl) => {\r\n    if (hideCaret) {\r\n      const fn = hideCaretMap.get(componentEl);\r\n      if (fn) {\r\n        fn();\r\n      }\r\n      hideCaretMap.delete(componentEl);\r\n    }\r\n    if (scrollAssist) {\r\n      const fn = scrollAssistMap.get(componentEl);\r\n      if (fn) {\r\n        fn();\r\n      }\r\n      scrollAssistMap.delete(componentEl);\r\n    }\r\n  };\r\n  if (inputBlurring && INPUT_BLURRING) {\r\n    enableInputBlurring();\r\n  }\r\n  if (scrollPadding && SCROLL_PADDING) {\r\n    enableScrollPadding(keyboardHeight);\r\n  }\r\n  // Input might be already loaded in the DOM before ion-device-hacks did.\r\n  // At this point we need to look for all of the inputs not registered yet\r\n  // and register them.\r\n  for (const input of inputs) {\r\n    registerInput(input);\r\n  }\r\n  doc.addEventListener('ionInputDidLoad', ((ev) => {\r\n    registerInput(ev.detail);\r\n  }));\r\n  doc.addEventListener('ionInputDidUnload', ((ev) => {\r\n    unregisterInput(ev.detail);\r\n  }));\r\n};\r\n\r\nexport { startInputShims };\r\n"]}