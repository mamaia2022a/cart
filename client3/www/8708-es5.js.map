{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-nav_2.entry.js"],"names":["ViewController","component","params","this","state","container","element","a","delegate","removeViewFromDom","parentElement","remove","nav","matches","view","id","currentParams","keysA","Object","keys","keysB","length","key","convertToView","page","Nav","hostRef","r","ionNavWillLoad","ionNavWillChange","ionNavDidChange","transInstr","animationEnabled","useRouter","isTransitioning","destroyed","views","animated","gesture","enable","swipeGesture","root","setRoot","rootParams","document","querySelector","el","closest","mode","c","emit","rootChanged","createSwipeBackGesture","canStart","bind","onStart","onMove","onEnd","swipeGestureChanged","l","_destroy","destroy","componentProps","opts","done","queueTrns","insertStart","insertViews","insertIndex","insertComponents","removeStart","removeCount","indexOrViewCtrl","tiConfig","removeView","startIndex","setPages","direction","animation","resolve","active","getActiveSync","Promise","changed","finish","promise","commonOpts","updateURL","viewIsReady","enteringEl","mark","p","markVisible","async","viewController","find","v","popTo","assign","animationBuilder","push","tagName","index","canGoBackSync","getPreviousSync","indexOf","ti","skipIfBusy","reject","router","canTransition","nextTrns","result","fireError","hasCompleted","requiresTransition","enteringView","leavingView","navChanged","rejectReason","shift","runTransition","prepareTI","getEnteringView","Error","init","postViewInit","enteringRequiresTransition","leavingRequiresTransition","transition","success","failed","viewsLength","viewControllers","map","filter","removeEnd","i","destroyQueue","finalBalance","console","warn","insertViewAt","destroyView","progressCallback","progressAnimation","ani","sbAni","leavingEl","animationOpts","showGoBack","baseEl","t","transitionFinish","cleanupView","cleanup","existingIndex","splice","activeView","activeViewIndex","s","stepValue","progressStep","shouldComplete","dur","onFinish","oneTimeCallback","newStepValue","g","easing","progressEnd","h","style","NavLink","routerDirection","onClick","routerAnimation","pop","H"],"mappings":"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","file":"x","sourcesContent":["import { r as registerInstance, e as createEvent, h, i as getElement, H as Host } from './index-7a8b7a1c.js';\r\nimport { b as getIonMode, c as config } from './ionic-global-63a97a32.js';\r\nimport { g as getTimeGivenProgression } from './cubic-bezier-eea9a7a9.js';\r\nimport { l as assert } from './helpers-dd7e4b7b.js';\r\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index-c3ff7f2e.js';\r\nimport { a as attachComponent } from './framework-delegate-4392cd63.js';\r\n\r\nconst VIEW_STATE_NEW = 1;\r\nconst VIEW_STATE_ATTACHED = 2;\r\nconst VIEW_STATE_DESTROYED = 3;\r\nclass ViewController {\r\n  constructor(component, params) {\r\n    this.component = component;\r\n    this.params = params;\r\n    this.state = VIEW_STATE_NEW;\r\n  }\r\n  async init(container) {\r\n    this.state = VIEW_STATE_ATTACHED;\r\n    if (!this.element) {\r\n      const component = this.component;\r\n      this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\r\n    }\r\n  }\r\n  /**\r\n   * DOM WRITE\r\n   */\r\n  _destroy() {\r\n    assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\r\n    const element = this.element;\r\n    if (element) {\r\n      if (this.delegate) {\r\n        this.delegate.removeViewFromDom(element.parentElement, element);\r\n      }\r\n      else {\r\n        element.remove();\r\n      }\r\n    }\r\n    this.nav = undefined;\r\n    this.state = VIEW_STATE_DESTROYED;\r\n  }\r\n}\r\nconst matches = (view, id, params) => {\r\n  if (!view) {\r\n    return false;\r\n  }\r\n  if (view.component !== id) {\r\n    return false;\r\n  }\r\n  const currentParams = view.params;\r\n  if (currentParams === params) {\r\n    return true;\r\n  }\r\n  if (!currentParams && !params) {\r\n    return true;\r\n  }\r\n  if (!currentParams || !params) {\r\n    return false;\r\n  }\r\n  const keysA = Object.keys(currentParams);\r\n  const keysB = Object.keys(params);\r\n  if (keysA.length !== keysB.length) {\r\n    return false;\r\n  }\r\n  // Test for A's keys different from B.\r\n  for (const key of keysA) {\r\n    if (currentParams[key] !== params[key]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\nconst convertToView = (page, params) => {\r\n  if (!page) {\r\n    return null;\r\n  }\r\n  if (page instanceof ViewController) {\r\n    return page;\r\n  }\r\n  return new ViewController(page, params);\r\n};\r\nconst convertToViews = (pages) => {\r\n  return pages.map(page => {\r\n    if (page instanceof ViewController) {\r\n      return page;\r\n    }\r\n    if ('component' in page) {\r\n      /**\r\n       * TODO Ionic 6:\r\n       * Consider switching to just using `undefined` here\r\n       * as well as on the public interfaces and on\r\n       * `NavComponentWithProps`. Previously `pages` was\r\n       * of type `any[]` so TypeScript did not catch this.\r\n       */\r\n      return convertToView(page.component, (page.componentProps === null) ? undefined : page.componentProps);\r\n    }\r\n    return convertToView(page, undefined);\r\n  }).filter(v => v !== null);\r\n};\r\n\r\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\r\n\r\nconst Nav = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n    this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\r\n    this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\r\n    this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\r\n    this.transInstr = [];\r\n    this.animationEnabled = true;\r\n    this.useRouter = false;\r\n    this.isTransitioning = false;\r\n    this.destroyed = false;\r\n    this.views = [];\r\n    /**\r\n     * If `true`, the nav should animate the transition of components.\r\n     */\r\n    this.animated = true;\r\n  }\r\n  swipeGestureChanged() {\r\n    if (this.gesture) {\r\n      this.gesture.enable(this.swipeGesture === true);\r\n    }\r\n  }\r\n  rootChanged() {\r\n    if (this.root !== undefined) {\r\n      if (!this.useRouter) {\r\n        this.setRoot(this.root, this.rootParams);\r\n      }\r\n    }\r\n  }\r\n  componentWillLoad() {\r\n    this.useRouter =\r\n      !!document.querySelector('ion-router') &&\r\n        !this.el.closest('[no-router]');\r\n    if (this.swipeGesture === undefined) {\r\n      const mode = getIonMode(this);\r\n      this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\r\n    }\r\n    this.ionNavWillLoad.emit();\r\n  }\r\n  async componentDidLoad() {\r\n    this.rootChanged();\r\n    this.gesture = (await import('./swipe-back-ee838cf8.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\r\n    this.swipeGestureChanged();\r\n  }\r\n  disconnectedCallback() {\r\n    for (const view of this.views) {\r\n      lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\r\n      view._destroy();\r\n    }\r\n    if (this.gesture) {\r\n      this.gesture.destroy();\r\n      this.gesture = undefined;\r\n    }\r\n    // release swipe back gesture and transition\r\n    this.transInstr.length = this.views.length = 0;\r\n    this.destroyed = true;\r\n  }\r\n  /**\r\n   * Push a new component onto the current navigation stack. Pass any additional\r\n   * information along as an object. This additional information is accessible\r\n   * through NavParams.\r\n   *\r\n   * @param component The component to push onto the navigation stack.\r\n   * @param componentProps Any properties of the component.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\r\n  push(component, componentProps, opts, done) {\r\n    return this.queueTrns({\r\n      insertStart: -1,\r\n      insertViews: [{ component, componentProps }],\r\n      opts\r\n    }, done);\r\n  }\r\n  /**\r\n   * Inserts a component into the navigation stack at the specified index.\r\n   * This is useful to add a component at any point in the navigation stack.\r\n   *\r\n   * @param insertIndex The index to insert the component at in the stack.\r\n   * @param component The component to insert into the navigation stack.\r\n   * @param componentProps Any properties of the component.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\r\n  insert(insertIndex, component, componentProps, opts, done) {\r\n    return this.queueTrns({\r\n      insertStart: insertIndex,\r\n      insertViews: [{ component, componentProps }],\r\n      opts\r\n    }, done);\r\n  }\r\n  /**\r\n   * Inserts an array of components into the navigation stack at the specified index.\r\n   * The last component in the array will become instantiated as a view, and animate\r\n   * in to become the active view.\r\n   *\r\n   * @param insertIndex The index to insert the components at in the stack.\r\n   * @param insertComponents The components to insert into the navigation stack.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\r\n  insertPages(insertIndex, insertComponents, opts, done) {\r\n    return this.queueTrns({\r\n      insertStart: insertIndex,\r\n      insertViews: insertComponents,\r\n      opts\r\n    }, done);\r\n  }\r\n  /**\r\n   * Pop a component off of the navigation stack. Navigates back from the current\r\n   * component.\r\n   *\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\r\n  pop(opts, done) {\r\n    return this.queueTrns({\r\n      removeStart: -1,\r\n      removeCount: 1,\r\n      opts\r\n    }, done);\r\n  }\r\n  /**\r\n   * Pop to a specific index in the navigation stack.\r\n   *\r\n   * @param indexOrViewCtrl The index or view controller to pop to.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\r\n  popTo(indexOrViewCtrl, opts, done) {\r\n    const tiConfig = {\r\n      removeStart: -1,\r\n      removeCount: -1,\r\n      opts\r\n    };\r\n    if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\r\n      tiConfig.removeView = indexOrViewCtrl;\r\n      tiConfig.removeStart = 1;\r\n    }\r\n    else if (typeof indexOrViewCtrl === 'number') {\r\n      tiConfig.removeStart = indexOrViewCtrl + 1;\r\n    }\r\n    return this.queueTrns(tiConfig, done);\r\n  }\r\n  /**\r\n   * Navigate back to the root of the stack, no matter how far back that is.\r\n   *\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\r\n  popToRoot(opts, done) {\r\n    return this.queueTrns({\r\n      removeStart: 1,\r\n      removeCount: -1,\r\n      opts\r\n    }, done);\r\n  }\r\n  /**\r\n   * Removes a component from the navigation stack at the specified index.\r\n   *\r\n   * @param startIndex The number to begin removal at.\r\n   * @param removeCount The number of components to remove.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\r\n  removeIndex(startIndex, removeCount = 1, opts, done) {\r\n    return this.queueTrns({\r\n      removeStart: startIndex,\r\n      removeCount,\r\n      opts\r\n    }, done);\r\n  }\r\n  /**\r\n   * Set the root for the current navigation stack to a component.\r\n   *\r\n   * @param component The component to set as the root of the navigation stack.\r\n   * @param componentProps Any properties of the component.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\r\n  setRoot(component, componentProps, opts, done) {\r\n    return this.setPages([{ component, componentProps }], opts, done);\r\n  }\r\n  /**\r\n   * Set the views of the current navigation stack and navigate to the last view.\r\n   * By default animations are disabled, but they can be enabled by passing options\r\n   * to the navigation controller. Navigation parameters can also be passed to the\r\n   * individual pages in the array.\r\n   *\r\n   * @param views The list of views to set as the navigation stack.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\r\n  setPages(views, opts, done) {\r\n    if (opts == null) {\r\n      opts = {};\r\n    }\r\n    // if animation wasn't set to true then default it to NOT animate\r\n    if (opts.animated !== true) {\r\n      opts.animated = false;\r\n    }\r\n    return this.queueTrns({\r\n      insertStart: 0,\r\n      insertViews: views,\r\n      removeStart: 0,\r\n      removeCount: -1,\r\n      opts\r\n    }, done);\r\n  }\r\n  /** @internal */\r\n  setRouteId(id, params, direction, animation) {\r\n    const active = this.getActiveSync();\r\n    if (matches(active, id, params)) {\r\n      return Promise.resolve({\r\n        changed: false,\r\n        element: active.element\r\n      });\r\n    }\r\n    let resolve;\r\n    const promise = new Promise(r => (resolve = r));\r\n    let finish;\r\n    const commonOpts = {\r\n      updateURL: false,\r\n      viewIsReady: enteringEl => {\r\n        let mark;\r\n        const p = new Promise(r => (mark = r));\r\n        resolve({\r\n          changed: true,\r\n          element: enteringEl,\r\n          markVisible: async () => {\r\n            mark();\r\n            await finish;\r\n          }\r\n        });\r\n        return p;\r\n      }\r\n    };\r\n    if (direction === 'root') {\r\n      finish = this.setRoot(id, params, commonOpts);\r\n    }\r\n    else {\r\n      const viewController = this.views.find(v => matches(v, id, params));\r\n      if (viewController) {\r\n        finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animationBuilder: animation }));\r\n      }\r\n      else if (direction === 'forward') {\r\n        finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), { animationBuilder: animation }));\r\n      }\r\n      else if (direction === 'back') {\r\n        finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animated: true, animationBuilder: animation }));\r\n      }\r\n    }\r\n    return promise;\r\n  }\r\n  /** @internal */\r\n  async getRouteId() {\r\n    const active = this.getActiveSync();\r\n    return active\r\n      ? {\r\n        id: active.element.tagName,\r\n        params: active.params,\r\n        element: active.element\r\n      }\r\n      : undefined;\r\n  }\r\n  /**\r\n   * Get the active view.\r\n   */\r\n  getActive() {\r\n    return Promise.resolve(this.getActiveSync());\r\n  }\r\n  /**\r\n   * Get the view at the specified index.\r\n   *\r\n   * @param index The index of the view.\r\n   */\r\n  getByIndex(index) {\r\n    return Promise.resolve(this.views[index]);\r\n  }\r\n  /**\r\n   * Returns `true` if the current view can go back.\r\n   *\r\n   * @param view The view to check.\r\n   */\r\n  canGoBack(view) {\r\n    return Promise.resolve(this.canGoBackSync(view));\r\n  }\r\n  /**\r\n   * Get the previous view.\r\n   *\r\n   * @param view The view to get.\r\n   */\r\n  getPrevious(view) {\r\n    return Promise.resolve(this.getPreviousSync(view));\r\n  }\r\n  getLength() {\r\n    return this.views.length;\r\n  }\r\n  getActiveSync() {\r\n    return this.views[this.views.length - 1];\r\n  }\r\n  canGoBackSync(view = this.getActiveSync()) {\r\n    return !!(view && this.getPreviousSync(view));\r\n  }\r\n  getPreviousSync(view = this.getActiveSync()) {\r\n    if (!view) {\r\n      return undefined;\r\n    }\r\n    const views = this.views;\r\n    const index = views.indexOf(view);\r\n    return index > 0 ? views[index - 1] : undefined;\r\n  }\r\n  // _queueTrns() adds a navigation stack change to the queue and schedules it to run:\r\n  // 1. _nextTrns(): consumes the next transition in the queue\r\n  // 2. _viewInit(): initializes enteringView if required\r\n  // 3. _viewTest(): ensures canLeave/canEnter Returns `true`, so the operation can continue\r\n  // 4. _postViewInit(): add/remove the views from the navigation stack\r\n  // 5. _transitionInit(): initializes the visual transition if required and schedules it to run\r\n  // 6. _viewAttachToDOM(): attaches the enteringView to the DOM\r\n  // 7. _transitionStart(): called once the transition actually starts, it initializes the Animation underneath.\r\n  // 8. _transitionFinish(): called once the transition finishes\r\n  // 9. _cleanup(): syncs the navigation internal state with the DOM. For example it removes the pages from the DOM or hides/show them.\r\n  async queueTrns(ti, done) {\r\n    if (this.isTransitioning && ti.opts != null && ti.opts.skipIfBusy) {\r\n      return Promise.resolve(false);\r\n    }\r\n    const promise = new Promise((resolve, reject) => {\r\n      ti.resolve = resolve;\r\n      ti.reject = reject;\r\n    });\r\n    ti.done = done;\r\n    /**\r\n     * If using router, check to see if navigation hooks\r\n     * will allow us to perform this transition. This\r\n     * is required in order for hooks to work with\r\n     * the ion-back-button or swipe to go back.\r\n     */\r\n    if (ti.opts && ti.opts.updateURL !== false && this.useRouter) {\r\n      const router = document.querySelector('ion-router');\r\n      if (router) {\r\n        const canTransition = await router.canTransition();\r\n        if (canTransition === false) {\r\n          return Promise.resolve(false);\r\n        }\r\n        else if (typeof canTransition === 'string') {\r\n          router.push(canTransition, ti.opts.direction || 'back');\r\n          return Promise.resolve(false);\r\n        }\r\n      }\r\n    }\r\n    // Normalize empty\r\n    if (ti.insertViews && ti.insertViews.length === 0) {\r\n      ti.insertViews = undefined;\r\n    }\r\n    // Enqueue transition instruction\r\n    this.transInstr.push(ti);\r\n    // if there isn't a transition already happening\r\n    // then this will kick off this transition\r\n    this.nextTrns();\r\n    return promise;\r\n  }\r\n  success(result, ti) {\r\n    if (this.destroyed) {\r\n      this.fireError('nav controller was destroyed', ti);\r\n      return;\r\n    }\r\n    if (ti.done) {\r\n      ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\r\n    }\r\n    ti.resolve(result.hasCompleted);\r\n    if (ti.opts.updateURL !== false && this.useRouter) {\r\n      const router = document.querySelector('ion-router');\r\n      if (router) {\r\n        const direction = result.direction === 'back' ? 'back' : 'forward';\r\n        router.navChanged(direction);\r\n      }\r\n    }\r\n  }\r\n  failed(rejectReason, ti) {\r\n    if (this.destroyed) {\r\n      this.fireError('nav controller was destroyed', ti);\r\n      return;\r\n    }\r\n    this.transInstr.length = 0;\r\n    this.fireError(rejectReason, ti);\r\n  }\r\n  fireError(rejectReason, ti) {\r\n    if (ti.done) {\r\n      ti.done(false, false, rejectReason);\r\n    }\r\n    if (ti.reject && !this.destroyed) {\r\n      ti.reject(rejectReason);\r\n    }\r\n    else {\r\n      ti.resolve(false);\r\n    }\r\n  }\r\n  nextTrns() {\r\n    // this is the framework's bread 'n butta function\r\n    // only one transition is allowed at any given time\r\n    if (this.isTransitioning) {\r\n      return false;\r\n    }\r\n    // there is no transition happening right now\r\n    // get the next instruction\r\n    const ti = this.transInstr.shift();\r\n    if (!ti) {\r\n      return false;\r\n    }\r\n    this.runTransition(ti);\r\n    return true;\r\n  }\r\n  async runTransition(ti) {\r\n    try {\r\n      // set that this nav is actively transitioning\r\n      this.ionNavWillChange.emit();\r\n      this.isTransitioning = true;\r\n      this.prepareTI(ti);\r\n      const leavingView = this.getActiveSync();\r\n      const enteringView = this.getEnteringView(ti, leavingView);\r\n      if (!leavingView && !enteringView) {\r\n        throw new Error('no views in the stack to be removed');\r\n      }\r\n      if (enteringView && enteringView.state === VIEW_STATE_NEW) {\r\n        await enteringView.init(this.el);\r\n      }\r\n      this.postViewInit(enteringView, leavingView, ti);\r\n      // Needs transition?\r\n      const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) &&\r\n        enteringView !== leavingView;\r\n      if (requiresTransition && ti.opts && leavingView) {\r\n        const isBackDirection = ti.opts.direction === 'back';\r\n        /**\r\n         * If heading back, use the entering page's animation\r\n         * unless otherwise specified by the developer.\r\n         */\r\n        if (isBackDirection) {\r\n          ti.opts.animationBuilder = ti.opts.animationBuilder || (enteringView && enteringView.animationBuilder);\r\n        }\r\n        leavingView.animationBuilder = ti.opts.animationBuilder;\r\n      }\r\n      const result = requiresTransition\r\n        ? await this.transition(enteringView, leavingView, ti)\r\n        : {\r\n          // transition is not required, so we are already done!\r\n          // they're inserting/removing the views somewhere in the middle or\r\n          // beginning, so visually nothing needs to animate/transition\r\n          // resolve immediately because there's no animation that's happening\r\n          hasCompleted: true,\r\n          requiresTransition: false\r\n        };\r\n      this.success(result, ti);\r\n      this.ionNavDidChange.emit();\r\n    }\r\n    catch (rejectReason) {\r\n      this.failed(rejectReason, ti);\r\n    }\r\n    this.isTransitioning = false;\r\n    this.nextTrns();\r\n  }\r\n  prepareTI(ti) {\r\n    const viewsLength = this.views.length;\r\n    ti.opts = ti.opts || {};\r\n    if (ti.opts.delegate === undefined) {\r\n      ti.opts.delegate = this.delegate;\r\n    }\r\n    if (ti.removeView !== undefined) {\r\n      assert(ti.removeStart !== undefined, 'removeView needs removeStart');\r\n      assert(ti.removeCount !== undefined, 'removeView needs removeCount');\r\n      const index = this.views.indexOf(ti.removeView);\r\n      if (index < 0) {\r\n        throw new Error('removeView was not found');\r\n      }\r\n      ti.removeStart += index;\r\n    }\r\n    if (ti.removeStart !== undefined) {\r\n      if (ti.removeStart < 0) {\r\n        ti.removeStart = viewsLength - 1;\r\n      }\r\n      if (ti.removeCount < 0) {\r\n        ti.removeCount = viewsLength - ti.removeStart;\r\n      }\r\n      ti.leavingRequiresTransition =\r\n        ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\r\n    }\r\n    if (ti.insertViews) {\r\n      // allow -1 to be passed in to auto push it on the end\r\n      // and clean up the index if it's larger then the size of the stack\r\n      if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\r\n        ti.insertStart = viewsLength;\r\n      }\r\n      ti.enteringRequiresTransition = ti.insertStart === viewsLength;\r\n    }\r\n    const insertViews = ti.insertViews;\r\n    if (!insertViews) {\r\n      return;\r\n    }\r\n    assert(insertViews.length > 0, 'length can not be zero');\r\n    const viewControllers = convertToViews(insertViews);\r\n    if (viewControllers.length === 0) {\r\n      throw new Error('invalid views to insert');\r\n    }\r\n    // Check all the inserted view are correct\r\n    for (const view of viewControllers) {\r\n      view.delegate = ti.opts.delegate;\r\n      const nav = view.nav;\r\n      if (nav && nav !== this) {\r\n        throw new Error('inserted view was already inserted');\r\n      }\r\n      if (view.state === VIEW_STATE_DESTROYED) {\r\n        throw new Error('inserted view was already destroyed');\r\n      }\r\n    }\r\n    ti.insertViews = viewControllers;\r\n  }\r\n  getEnteringView(ti, leavingView) {\r\n    const insertViews = ti.insertViews;\r\n    if (insertViews !== undefined) {\r\n      // grab the very last view of the views to be inserted\r\n      // and initialize it as the new entering view\r\n      return insertViews[insertViews.length - 1];\r\n    }\r\n    const removeStart = ti.removeStart;\r\n    if (removeStart !== undefined) {\r\n      const views = this.views;\r\n      const removeEnd = removeStart + ti.removeCount;\r\n      for (let i = views.length - 1; i >= 0; i--) {\r\n        const view = views[i];\r\n        if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\r\n          return view;\r\n        }\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n  postViewInit(enteringView, leavingView, ti) {\r\n    assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\r\n    assert(ti.resolve, 'resolve must be valid');\r\n    assert(ti.reject, 'reject must be valid');\r\n    const opts = ti.opts;\r\n    const insertViews = ti.insertViews;\r\n    const removeStart = ti.removeStart;\r\n    const removeCount = ti.removeCount;\r\n    let destroyQueue;\r\n    // there are views to remove\r\n    if (removeStart !== undefined && removeCount !== undefined) {\r\n      assert(removeStart >= 0, 'removeStart can not be negative');\r\n      assert(removeCount >= 0, 'removeCount can not be negative');\r\n      destroyQueue = [];\r\n      for (let i = 0; i < removeCount; i++) {\r\n        const view = this.views[i + removeStart];\r\n        if (view && view !== enteringView && view !== leavingView) {\r\n          destroyQueue.push(view);\r\n        }\r\n      }\r\n      // default the direction to \"back\"\r\n      opts.direction = opts.direction || 'back';\r\n    }\r\n    const finalBalance = this.views.length +\r\n      (insertViews !== undefined ? insertViews.length : 0) -\r\n      (removeCount !== undefined ? removeCount : 0);\r\n    assert(finalBalance >= 0, 'final balance can not be negative');\r\n    if (finalBalance === 0) {\r\n      console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\r\n      throw new Error('navigation stack needs at least one root page');\r\n    }\r\n    // At this point the transition can not be rejected, any throw should be an error\r\n    // there are views to insert\r\n    if (insertViews) {\r\n      // add the views to the\r\n      let insertIndex = ti.insertStart;\r\n      for (const view of insertViews) {\r\n        this.insertViewAt(view, insertIndex);\r\n        insertIndex++;\r\n      }\r\n      if (ti.enteringRequiresTransition) {\r\n        // default to forward if not already set\r\n        opts.direction = opts.direction || 'forward';\r\n      }\r\n    }\r\n    // if the views to be removed are in the beginning or middle\r\n    // and there is not a view that needs to visually transition out\r\n    // then just destroy them and don't transition anything\r\n    // batch all of lifecycles together\r\n    // let's make sure, callbacks are zoned\r\n    if (destroyQueue && destroyQueue.length > 0) {\r\n      for (const view of destroyQueue) {\r\n        lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\r\n        lifecycle(view.element, LIFECYCLE_DID_LEAVE);\r\n        lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\r\n      }\r\n      // once all lifecycle events has been delivered, we can safely detroy the views\r\n      for (const view of destroyQueue) {\r\n        this.destroyView(view);\r\n      }\r\n    }\r\n  }\r\n  async transition(enteringView, leavingView, ti) {\r\n    // we should animate (duration > 0) if the pushed page is not the first one (startup)\r\n    // or if it is a portal (modal, actionsheet, etc.)\r\n    const opts = ti.opts;\r\n    const progressCallback = opts.progressAnimation\r\n      ? (ani) => this.sbAni = ani\r\n      : undefined;\r\n    const mode = getIonMode(this);\r\n    const enteringEl = enteringView.element;\r\n    const leavingEl = leavingView && leavingView.element;\r\n    const animationOpts = Object.assign({ mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, animationBuilder: this.animation || opts.animationBuilder || config.get('navAnimation'), progressCallback, animated: this.animated && config.getBoolean('animated', true), enteringEl,\r\n      leavingEl }, opts);\r\n    const { hasCompleted } = await transition(animationOpts);\r\n    return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\r\n  }\r\n  transitionFinish(hasCompleted, enteringView, leavingView, opts) {\r\n    const cleanupView = hasCompleted ? enteringView : leavingView;\r\n    if (cleanupView) {\r\n      this.cleanup(cleanupView);\r\n    }\r\n    return {\r\n      hasCompleted,\r\n      requiresTransition: true,\r\n      enteringView,\r\n      leavingView,\r\n      direction: opts.direction\r\n    };\r\n  }\r\n  insertViewAt(view, index) {\r\n    const views = this.views;\r\n    const existingIndex = views.indexOf(view);\r\n    if (existingIndex > -1) {\r\n      // this view is already in the stack!!\r\n      // move it to its new location\r\n      assert(view.nav === this, 'view is not part of the nav');\r\n      views.splice(index, 0, views.splice(existingIndex, 1)[0]);\r\n    }\r\n    else {\r\n      assert(!view.nav, 'nav is used');\r\n      // this is a new view to add to the stack\r\n      // create the new entering view\r\n      view.nav = this;\r\n      // insert the entering view into the correct index in the stack\r\n      views.splice(index, 0, view);\r\n    }\r\n  }\r\n  removeView(view) {\r\n    assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\r\n    const views = this.views;\r\n    const index = views.indexOf(view);\r\n    assert(index > -1, 'view must be part of the stack');\r\n    if (index >= 0) {\r\n      views.splice(index, 1);\r\n    }\r\n  }\r\n  destroyView(view) {\r\n    view._destroy();\r\n    this.removeView(view);\r\n  }\r\n  /**\r\n   * DOM WRITE\r\n   */\r\n  cleanup(activeView) {\r\n    // ok, cleanup time!! Destroy all of the views that are\r\n    // INACTIVE and come after the active view\r\n    // only do this if the views exist, though\r\n    if (this.destroyed) {\r\n      return;\r\n    }\r\n    const views = this.views;\r\n    const activeViewIndex = views.indexOf(activeView);\r\n    for (let i = views.length - 1; i >= 0; i--) {\r\n      const view = views[i];\r\n      /**\r\n       * When inserting multiple views via insertPages\r\n       * the last page will be transitioned to, but the\r\n       * others will not be. As a result, a DOM element\r\n       * will only be created for the last page inserted.\r\n       * As a result, it is possible to have views in the\r\n       * stack that do not have `view.element` yet.\r\n       */\r\n      const element = view.element;\r\n      if (element) {\r\n        if (i > activeViewIndex) {\r\n          // this view comes after the active view\r\n          // let's unload it\r\n          lifecycle(element, LIFECYCLE_WILL_UNLOAD);\r\n          this.destroyView(view);\r\n        }\r\n        else if (i < activeViewIndex) {\r\n          // this view comes before the active view\r\n          // and it is not a portal then ensure it is hidden\r\n          setPageHidden(element, true);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  canStart() {\r\n    return (!!this.swipeGesture &&\r\n      !this.isTransitioning &&\r\n      this.transInstr.length === 0 &&\r\n      this.animationEnabled &&\r\n      this.canGoBackSync());\r\n  }\r\n  onStart() {\r\n    this.queueTrns({\r\n      removeStart: -1,\r\n      removeCount: 1,\r\n      opts: {\r\n        direction: 'back',\r\n        progressAnimation: true\r\n      }\r\n    }, undefined);\r\n  }\r\n  onMove(stepValue) {\r\n    if (this.sbAni) {\r\n      this.sbAni.progressStep(stepValue);\r\n    }\r\n  }\r\n  onEnd(shouldComplete, stepValue, dur) {\r\n    if (this.sbAni) {\r\n      this.animationEnabled = false;\r\n      this.sbAni.onFinish(() => {\r\n        this.animationEnabled = true;\r\n      }, { oneTimeCallback: true });\r\n      // Account for rounding errors in JS\r\n      let newStepValue = (shouldComplete) ? -0.001 : 0.001;\r\n      /**\r\n       * Animation will be reversed here, so need to\r\n       * reverse the easing curve as well\r\n       *\r\n       * Additionally, we need to account for the time relative\r\n       * to the new easing curve, as `stepValue` is going to be given\r\n       * in terms of a linear curve.\r\n       */\r\n      if (!shouldComplete) {\r\n        this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\r\n        newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\r\n      }\r\n      else {\r\n        newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\r\n      }\r\n      this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\r\n    }\r\n  }\r\n  render() {\r\n    return (h(\"slot\", null));\r\n  }\r\n  get el() { return getElement(this); }\r\n  static get watchers() { return {\r\n    \"swipeGesture\": [\"swipeGestureChanged\"],\r\n    \"root\": [\"rootChanged\"]\r\n  }; }\r\n};\r\nNav.style = navCss;\r\n\r\nconst navLink = (el, routerDirection, component, componentProps, routerAnimation) => {\r\n  const nav = el.closest('ion-nav');\r\n  if (nav) {\r\n    if (routerDirection === 'forward') {\r\n      if (component !== undefined) {\r\n        return nav.push(component, componentProps, { skipIfBusy: true, animationBuilder: routerAnimation });\r\n      }\r\n    }\r\n    else if (routerDirection === 'root') {\r\n      if (component !== undefined) {\r\n        return nav.setRoot(component, componentProps, { skipIfBusy: true, animationBuilder: routerAnimation });\r\n      }\r\n    }\r\n    else if (routerDirection === 'back') {\r\n      return nav.pop({ skipIfBusy: true, animationBuilder: routerAnimation });\r\n    }\r\n  }\r\n  return Promise.resolve(false);\r\n};\r\n\r\nconst NavLink = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n    /**\r\n     * The transition direction when navigating to another page.\r\n     */\r\n    this.routerDirection = 'forward';\r\n    this.onClick = () => {\r\n      return navLink(this.el, this.routerDirection, this.component, this.componentProps, this.routerAnimation);\r\n    };\r\n  }\r\n  render() {\r\n    return (h(Host, { onClick: this.onClick }));\r\n  }\r\n  get el() { return getElement(this); }\r\n};\r\n\r\nexport { Nav as ion_nav, NavLink as ion_nav_link };\r\n"]}