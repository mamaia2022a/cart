/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { getActionTypeFromInstance, getValue, setValue } from '@ngxs/store';
import { ResetForm, SetFormDirty, SetFormDisabled, SetFormEnabled, SetFormPristine, UpdateForm, UpdateFormDirty, UpdateFormErrors, UpdateFormStatus, UpdateFormValue } from './actions';
var NgxsFormPlugin = /** @class */ (function () {
    function NgxsFormPlugin() {
    }
    /**
     * @param {?} state
     * @param {?} event
     * @param {?} next
     * @return {?}
     */
    NgxsFormPlugin.prototype.handle = /**
     * @param {?} state
     * @param {?} event
     * @param {?} next
     * @return {?}
     */
    function (state, event, next) {
        /** @type {?} */
        var type = getActionTypeFromInstance(event);
        /** @type {?} */
        var nextState = state;
        if (type === UpdateFormValue.type || type === UpdateForm.type || type === ResetForm.type) {
            var value = event.payload.value;
            /** @type {?} */
            var payloadValue = Array.isArray(value) ? value.slice() : tslib_1.__assign({}, value);
            /** @type {?} */
            var path = this.joinPathWithPropertyPath(event);
            nextState = setValue(nextState, path, payloadValue);
        }
        if (type === ResetForm.type) {
            /** @type {?} */
            var model = getValue(nextState, event.payload.path + ".model");
            nextState = setValue(nextState, "" + event.payload.path, { model: model });
        }
        if (type === UpdateFormStatus.type || type === UpdateForm.type) {
            nextState = setValue(nextState, event.payload.path + ".status", event.payload.status);
        }
        if (type === UpdateFormErrors.type || type === UpdateForm.type) {
            nextState = setValue(nextState, event.payload.path + ".errors", tslib_1.__assign({}, event.payload.errors));
        }
        if (type === UpdateFormDirty.type || type === UpdateForm.type) {
            nextState = setValue(nextState, event.payload.path + ".dirty", event.payload.dirty);
        }
        if (type === SetFormDirty.type) {
            nextState = setValue(nextState, event.payload + ".dirty", true);
        }
        if (type === SetFormPristine.type) {
            nextState = setValue(nextState, event.payload + ".dirty", false);
        }
        if (type === SetFormDisabled.type) {
            nextState = setValue(nextState, event.payload + ".disabled", true);
        }
        if (type === SetFormEnabled.type) {
            nextState = setValue(nextState, event.payload + ".disabled", false);
        }
        return next(nextState, event);
    };
    /**
     * @private
     * @param {?} __0
     * @return {?}
     */
    NgxsFormPlugin.prototype.joinPathWithPropertyPath = /**
     * @private
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var payload = _a.payload;
        /** @type {?} */
        var path = payload.path + ".model";
        if (payload.propertyPath) {
            path += "." + payload.propertyPath;
        }
        return path;
    };
    NgxsFormPlugin.decorators = [
        { type: Injectable }
    ];
    return NgxsFormPlugin;
}());
export { NgxsFormPlugin };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS5wbHVnaW4uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9mb3JtLXBsdWdpbi8iLCJzb3VyY2VzIjpbInNyYy9mb3JtLnBsdWdpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUNMLHlCQUF5QixFQUN6QixRQUFRLEVBR1IsUUFBUSxFQUNULE1BQU0sYUFBYSxDQUFDO0FBQ3JCLE9BQU8sRUFDTCxTQUFTLEVBQ1QsWUFBWSxFQUNaLGVBQWUsRUFDZixjQUFjLEVBQ2QsZUFBZSxFQUNmLFVBQVUsRUFDVixlQUFlLEVBQ2YsZ0JBQWdCLEVBQ2hCLGdCQUFnQixFQUNoQixlQUFlLEVBQ2hCLE1BQU0sV0FBVyxDQUFDO0FBRW5CO0lBQUE7SUE2REEsQ0FBQzs7Ozs7OztJQTNEQywrQkFBTTs7Ozs7O0lBQU4sVUFBTyxLQUFVLEVBQUUsS0FBVSxFQUFFLElBQXNCOztZQUM3QyxJQUFJLEdBQUcseUJBQXlCLENBQUMsS0FBSyxDQUFDOztZQUV6QyxTQUFTLEdBQUcsS0FBSztRQUVyQixJQUFJLElBQUksS0FBSyxlQUFlLENBQUMsSUFBSSxJQUFJLElBQUksS0FBSyxVQUFVLENBQUMsSUFBSSxJQUFJLElBQUksS0FBSyxTQUFTLENBQUMsSUFBSSxFQUFFO1lBQ2hGLElBQUEsMkJBQUs7O2dCQUNQLFlBQVksR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxzQkFBTSxLQUFLLENBQUU7O2dCQUNsRSxJQUFJLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDLEtBQUssQ0FBQztZQUNqRCxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsWUFBWSxDQUFDLENBQUM7U0FDckQ7UUFFRCxJQUFJLElBQUksS0FBSyxTQUFTLENBQUMsSUFBSSxFQUFFOztnQkFDckIsS0FBSyxHQUFHLFFBQVEsQ0FBQyxTQUFTLEVBQUssS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLFdBQVEsQ0FBQztZQUNoRSxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsRUFBRSxLQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7U0FDNUU7UUFFRCxJQUFJLElBQUksS0FBSyxnQkFBZ0IsQ0FBQyxJQUFJLElBQUksSUFBSSxLQUFLLFVBQVUsQ0FBQyxJQUFJLEVBQUU7WUFDOUQsU0FBUyxHQUFHLFFBQVEsQ0FBQyxTQUFTLEVBQUssS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLFlBQVMsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZGO1FBRUQsSUFBSSxJQUFJLEtBQUssZ0JBQWdCLENBQUMsSUFBSSxJQUFJLElBQUksS0FBSyxVQUFVLENBQUMsSUFBSSxFQUFFO1lBQzlELFNBQVMsR0FBRyxRQUFRLENBQUMsU0FBUyxFQUFLLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxZQUFTLHVCQUN6RCxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFDdkIsQ0FBQztTQUNKO1FBRUQsSUFBSSxJQUFJLEtBQUssZUFBZSxDQUFDLElBQUksSUFBSSxJQUFJLEtBQUssVUFBVSxDQUFDLElBQUksRUFBRTtZQUM3RCxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsRUFBSyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksV0FBUSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDckY7UUFFRCxJQUFJLElBQUksS0FBSyxZQUFZLENBQUMsSUFBSSxFQUFFO1lBQzlCLFNBQVMsR0FBRyxRQUFRLENBQUMsU0FBUyxFQUFLLEtBQUssQ0FBQyxPQUFPLFdBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUNqRTtRQUVELElBQUksSUFBSSxLQUFLLGVBQWUsQ0FBQyxJQUFJLEVBQUU7WUFDakMsU0FBUyxHQUFHLFFBQVEsQ0FBQyxTQUFTLEVBQUssS0FBSyxDQUFDLE9BQU8sV0FBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ2xFO1FBRUQsSUFBSSxJQUFJLEtBQUssZUFBZSxDQUFDLElBQUksRUFBRTtZQUNqQyxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsRUFBSyxLQUFLLENBQUMsT0FBTyxjQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDcEU7UUFFRCxJQUFJLElBQUksS0FBSyxjQUFjLENBQUMsSUFBSSxFQUFFO1lBQ2hDLFNBQVMsR0FBRyxRQUFRLENBQUMsU0FBUyxFQUFLLEtBQUssQ0FBQyxPQUFPLGNBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUNyRTtRQUVELE9BQU8sSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNoQyxDQUFDOzs7Ozs7SUFFTyxpREFBd0I7Ozs7O0lBQWhDLFVBQWlDLEVBQTRCO1lBQTFCLG9CQUFPOztZQUNwQyxJQUFJLEdBQU0sT0FBTyxDQUFDLElBQUksV0FBUTtRQUVsQyxJQUFJLE9BQU8sQ0FBQyxZQUFZLEVBQUU7WUFDeEIsSUFBSSxJQUFJLE1BQUksT0FBTyxDQUFDLFlBQWMsQ0FBQztTQUNwQztRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7Z0JBNURGLFVBQVU7O0lBNkRYLHFCQUFDO0NBQUEsQUE3REQsSUE2REM7U0E1RFksY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtcclxuICBnZXRBY3Rpb25UeXBlRnJvbUluc3RhbmNlLFxyXG4gIGdldFZhbHVlLFxyXG4gIE5neHNOZXh0UGx1Z2luRm4sXHJcbiAgTmd4c1BsdWdpbixcclxuICBzZXRWYWx1ZVxyXG59IGZyb20gJ0BuZ3hzL3N0b3JlJztcclxuaW1wb3J0IHtcclxuICBSZXNldEZvcm0sXHJcbiAgU2V0Rm9ybURpcnR5LFxyXG4gIFNldEZvcm1EaXNhYmxlZCxcclxuICBTZXRGb3JtRW5hYmxlZCxcclxuICBTZXRGb3JtUHJpc3RpbmUsXHJcbiAgVXBkYXRlRm9ybSxcclxuICBVcGRhdGVGb3JtRGlydHksXHJcbiAgVXBkYXRlRm9ybUVycm9ycyxcclxuICBVcGRhdGVGb3JtU3RhdHVzLFxyXG4gIFVwZGF0ZUZvcm1WYWx1ZVxyXG59IGZyb20gJy4vYWN0aW9ucyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBOZ3hzRm9ybVBsdWdpbiBpbXBsZW1lbnRzIE5neHNQbHVnaW4ge1xyXG4gIGhhbmRsZShzdGF0ZTogYW55LCBldmVudDogYW55LCBuZXh0OiBOZ3hzTmV4dFBsdWdpbkZuKSB7XHJcbiAgICBjb25zdCB0eXBlID0gZ2V0QWN0aW9uVHlwZUZyb21JbnN0YW5jZShldmVudCk7XHJcblxyXG4gICAgbGV0IG5leHRTdGF0ZSA9IHN0YXRlO1xyXG5cclxuICAgIGlmICh0eXBlID09PSBVcGRhdGVGb3JtVmFsdWUudHlwZSB8fCB0eXBlID09PSBVcGRhdGVGb3JtLnR5cGUgfHwgdHlwZSA9PT0gUmVzZXRGb3JtLnR5cGUpIHtcclxuICAgICAgY29uc3QgeyB2YWx1ZSB9ID0gZXZlbnQucGF5bG9hZDtcclxuICAgICAgY29uc3QgcGF5bG9hZFZhbHVlID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5zbGljZSgpIDogeyAuLi52YWx1ZSB9O1xyXG4gICAgICBjb25zdCBwYXRoID0gdGhpcy5qb2luUGF0aFdpdGhQcm9wZXJ0eVBhdGgoZXZlbnQpO1xyXG4gICAgICBuZXh0U3RhdGUgPSBzZXRWYWx1ZShuZXh0U3RhdGUsIHBhdGgsIHBheWxvYWRWYWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGUgPT09IFJlc2V0Rm9ybS50eXBlKSB7XHJcbiAgICAgIGNvbnN0IG1vZGVsID0gZ2V0VmFsdWUobmV4dFN0YXRlLCBgJHtldmVudC5wYXlsb2FkLnBhdGh9Lm1vZGVsYCk7XHJcbiAgICAgIG5leHRTdGF0ZSA9IHNldFZhbHVlKG5leHRTdGF0ZSwgYCR7ZXZlbnQucGF5bG9hZC5wYXRofWAsIHsgbW9kZWw6IG1vZGVsIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlID09PSBVcGRhdGVGb3JtU3RhdHVzLnR5cGUgfHwgdHlwZSA9PT0gVXBkYXRlRm9ybS50eXBlKSB7XHJcbiAgICAgIG5leHRTdGF0ZSA9IHNldFZhbHVlKG5leHRTdGF0ZSwgYCR7ZXZlbnQucGF5bG9hZC5wYXRofS5zdGF0dXNgLCBldmVudC5wYXlsb2FkLnN0YXR1cyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGUgPT09IFVwZGF0ZUZvcm1FcnJvcnMudHlwZSB8fCB0eXBlID09PSBVcGRhdGVGb3JtLnR5cGUpIHtcclxuICAgICAgbmV4dFN0YXRlID0gc2V0VmFsdWUobmV4dFN0YXRlLCBgJHtldmVudC5wYXlsb2FkLnBhdGh9LmVycm9yc2AsIHtcclxuICAgICAgICAuLi5ldmVudC5wYXlsb2FkLmVycm9yc1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZSA9PT0gVXBkYXRlRm9ybURpcnR5LnR5cGUgfHwgdHlwZSA9PT0gVXBkYXRlRm9ybS50eXBlKSB7XHJcbiAgICAgIG5leHRTdGF0ZSA9IHNldFZhbHVlKG5leHRTdGF0ZSwgYCR7ZXZlbnQucGF5bG9hZC5wYXRofS5kaXJ0eWAsIGV2ZW50LnBheWxvYWQuZGlydHkpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlID09PSBTZXRGb3JtRGlydHkudHlwZSkge1xyXG4gICAgICBuZXh0U3RhdGUgPSBzZXRWYWx1ZShuZXh0U3RhdGUsIGAke2V2ZW50LnBheWxvYWR9LmRpcnR5YCwgdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGUgPT09IFNldEZvcm1QcmlzdGluZS50eXBlKSB7XHJcbiAgICAgIG5leHRTdGF0ZSA9IHNldFZhbHVlKG5leHRTdGF0ZSwgYCR7ZXZlbnQucGF5bG9hZH0uZGlydHlgLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGUgPT09IFNldEZvcm1EaXNhYmxlZC50eXBlKSB7XHJcbiAgICAgIG5leHRTdGF0ZSA9IHNldFZhbHVlKG5leHRTdGF0ZSwgYCR7ZXZlbnQucGF5bG9hZH0uZGlzYWJsZWRgLCB0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZSA9PT0gU2V0Rm9ybUVuYWJsZWQudHlwZSkge1xyXG4gICAgICBuZXh0U3RhdGUgPSBzZXRWYWx1ZShuZXh0U3RhdGUsIGAke2V2ZW50LnBheWxvYWR9LmRpc2FibGVkYCwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXh0KG5leHRTdGF0ZSwgZXZlbnQpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBqb2luUGF0aFdpdGhQcm9wZXJ0eVBhdGgoeyBwYXlsb2FkIH06IFVwZGF0ZUZvcm1WYWx1ZSk6IHN0cmluZyB7XHJcbiAgICBsZXQgcGF0aCA9IGAke3BheWxvYWQucGF0aH0ubW9kZWxgO1xyXG5cclxuICAgIGlmIChwYXlsb2FkLnByb3BlcnR5UGF0aCkge1xyXG4gICAgICBwYXRoICs9IGAuJHtwYXlsb2FkLnByb3BlcnR5UGF0aH1gO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBwYXRoO1xyXG4gIH1cclxufVxyXG4iXX0=