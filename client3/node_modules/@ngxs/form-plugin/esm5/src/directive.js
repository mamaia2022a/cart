/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Directive, Input } from '@angular/core';
import { FormGroupDirective } from '@angular/forms';
import { Actions, getValue, ofActionDispatched, Store } from '@ngxs/store';
import { Subject } from 'rxjs';
import { debounceTime, distinctUntilChanged, filter, takeUntil } from 'rxjs/operators';
import { ResetForm, UpdateForm, UpdateFormDirty, UpdateFormErrors, UpdateFormStatus, UpdateFormValue } from './actions';
var FormDirective = /** @class */ (function () {
    function FormDirective(_actions$, _store, _formGroupDirective, _cd) {
        this._actions$ = _actions$;
        this._store = _store;
        this._formGroupDirective = _formGroupDirective;
        this._cd = _cd;
        this.path = (/** @type {?} */ (null));
        this.debounce = 100;
        this._clearDestroy = false;
        this._destroy$ = new Subject();
        this._updating = false;
    }
    Object.defineProperty(FormDirective.prototype, "clearDestroy", {
        get: /**
         * @return {?}
         */
        function () {
            return this._clearDestroy;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._clearDestroy = val != null && "" + val !== 'false';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FormDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._actions$
            .pipe(ofActionDispatched(ResetForm), filter((/**
         * @param {?} action
         * @return {?}
         */
        function (action) { return action.payload.path === _this.path; })), takeUntil(this._destroy$))
            .subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var value = _a.payload.value;
            _this.form.reset(value);
            _this.updateFormStateWithRawValue(true);
            _this._cd.markForCheck();
        }));
        this.getStateStream(this.path + ".model").subscribe((/**
         * @param {?} model
         * @return {?}
         */
        function (model) {
            if (_this._updating || !model) {
                return;
            }
            _this.form.patchValue(model);
            _this._cd.markForCheck();
        }));
        this.getStateStream(this.path + ".dirty").subscribe((/**
         * @param {?} dirty
         * @return {?}
         */
        function (dirty) {
            if (_this.form.dirty === dirty || typeof dirty !== 'boolean') {
                return;
            }
            if (dirty) {
                _this.form.markAsDirty();
            }
            else {
                _this.form.markAsPristine();
            }
            _this._cd.markForCheck();
        }));
        // On first state change, sync form model, status and dirty with state
        this._store
            .selectOnce((/**
         * @param {?} state
         * @return {?}
         */
        function (state) { return getValue(state, _this.path); }))
            .subscribe((/**
         * @return {?}
         */
        function () {
            _this._store.dispatch([
                new UpdateFormValue({
                    path: _this.path,
                    value: _this.form.getRawValue()
                }),
                new UpdateFormStatus({
                    path: _this.path,
                    status: _this.form.status
                }),
                new UpdateFormDirty({
                    path: _this.path,
                    dirty: _this.form.dirty
                })
            ]);
        }));
        this.getStateStream(this.path + ".disabled").subscribe((/**
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            if (_this.form.disabled === disabled || typeof disabled !== 'boolean') {
                return;
            }
            if (disabled) {
                _this.form.disable();
            }
            else {
                _this.form.enable();
            }
            _this._cd.markForCheck();
        }));
        (/** @type {?} */ (this._formGroupDirective.valueChanges)).pipe(this.debounceChange()).subscribe((/**
         * @return {?}
         */
        function () {
            _this.updateFormStateWithRawValue();
        }));
        (/** @type {?} */ (this._formGroupDirective
            .statusChanges)).pipe(distinctUntilChanged(), this.debounceChange())
            .subscribe((/**
         * @param {?} status
         * @return {?}
         */
        function (status) {
            _this._store.dispatch(new UpdateFormStatus({
                status: status,
                path: _this.path
            }));
        }));
    };
    /**
     * @param {?=} withFormStatus
     * @return {?}
     */
    FormDirective.prototype.updateFormStateWithRawValue = /**
     * @param {?=} withFormStatus
     * @return {?}
     */
    function (withFormStatus) {
        var _this = this;
        if (this._updating)
            return;
        /** @type {?} */
        var value = this._formGroupDirective.control.getRawValue();
        /** @type {?} */
        var actions = [
            new UpdateFormValue({
                path: this.path,
                value: value
            }),
            new UpdateFormDirty({
                path: this.path,
                dirty: this._formGroupDirective.dirty
            }),
            new UpdateFormErrors({
                path: this.path,
                errors: this._formGroupDirective.errors
            })
        ];
        if (withFormStatus) {
            actions.push(new UpdateFormStatus({
                path: this.path,
                status: this._formGroupDirective.status
            }));
        }
        this._updating = true;
        this._store.dispatch(actions).subscribe({
            error: (/**
             * @return {?}
             */
            function () { return (_this._updating = false); }),
            complete: (/**
             * @return {?}
             */
            function () { return (_this._updating = false); })
        });
    };
    /**
     * @return {?}
     */
    FormDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._destroy$.next();
        this._destroy$.complete();
        if (this.clearDestroy) {
            this._store.dispatch(new UpdateForm({
                path: this.path,
                value: null,
                dirty: null,
                status: null,
                errors: null
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    FormDirective.prototype.debounceChange = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var skipDebounceTime = this._formGroupDirective.control.updateOn !== 'change' || this.debounce < 0;
        return skipDebounceTime
            ? (/**
             * @param {?} change
             * @return {?}
             */
            function (change) { return change.pipe(takeUntil(_this._destroy$)); })
            : (/**
             * @param {?} change
             * @return {?}
             */
            function (change) {
                return change.pipe(debounceTime(_this.debounce), takeUntil(_this._destroy$));
            });
    };
    Object.defineProperty(FormDirective.prototype, "form", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this._formGroupDirective.form;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    FormDirective.prototype.getStateStream = /**
     * @private
     * @param {?} path
     * @return {?}
     */
    function (path) {
        return this._store.select((/**
         * @param {?} state
         * @return {?}
         */
        function (state) { return getValue(state, path); })).pipe(takeUntil(this._destroy$));
    };
    FormDirective.decorators = [
        { type: Directive, args: [{ selector: '[ngxsForm]' },] }
    ];
    /** @nocollapse */
    FormDirective.ctorParameters = function () { return [
        { type: Actions },
        { type: Store },
        { type: FormGroupDirective },
        { type: ChangeDetectorRef }
    ]; };
    FormDirective.propDecorators = {
        path: [{ type: Input, args: ['ngxsForm',] }],
        debounce: [{ type: Input, args: ['ngxsFormDebounce',] }],
        clearDestroy: [{ type: Input, args: ['ngxsFormClearOnDestroy',] }]
    };
    return FormDirective;
}());
export { FormDirective };
if (false) {
    /** @type {?} */
    FormDirective.prototype.path;
    /** @type {?} */
    FormDirective.prototype.debounce;
    /** @type {?} */
    FormDirective.prototype._clearDestroy;
    /**
     * @type {?}
     * @private
     */
    FormDirective.prototype._destroy$;
    /**
     * @type {?}
     * @private
     */
    FormDirective.prototype._updating;
    /**
     * @type {?}
     * @private
     */
    FormDirective.prototype._actions$;
    /**
     * @type {?}
     * @private
     */
    FormDirective.prototype._store;
    /**
     * @type {?}
     * @private
     */
    FormDirective.prototype._formGroupDirective;
    /**
     * @type {?}
     * @private
     */
    FormDirective.prototype._cd;
}
//# sourceMappingURL=data:application/json;base64,