/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export class UpdateFormStatus {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        this.payload = payload;
    }
    /**
     * @return {?}
     */
    static get type() {
        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
        return '[Forms] Update Form Status';
    }
}
if (false) {
    /** @type {?} */
    UpdateFormStatus.prototype.payload;
}
export class UpdateFormValue {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        this.payload = payload;
    }
    /**
     * @return {?}
     */
    static get type() {
        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
        return '[Forms] Update Form Value';
    }
}
if (false) {
    /** @type {?} */
    UpdateFormValue.prototype.payload;
}
export class UpdateForm {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        this.payload = payload;
    }
    /**
     * @return {?}
     */
    static get type() {
        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
        return '[Forms] Update Form';
    }
}
if (false) {
    /** @type {?} */
    UpdateForm.prototype.payload;
}
export class UpdateFormDirty {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        this.payload = payload;
    }
    /**
     * @return {?}
     */
    static get type() {
        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
        return '[Forms] Update Form Dirty';
    }
}
if (false) {
    /** @type {?} */
    UpdateFormDirty.prototype.payload;
}
export class SetFormDirty {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        this.payload = payload;
    }
    /**
     * @return {?}
     */
    static get type() {
        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
        return '[Forms] Set Form Dirty';
    }
}
if (false) {
    /** @type {?} */
    SetFormDirty.prototype.payload;
}
export class SetFormPristine {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        this.payload = payload;
    }
    /**
     * @return {?}
     */
    static get type() {
        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
        return '[Forms] Set Form Pristine';
    }
}
if (false) {
    /** @type {?} */
    SetFormPristine.prototype.payload;
}
export class UpdateFormErrors {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        this.payload = payload;
    }
    /**
     * @return {?}
     */
    static get type() {
        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
        return '[Forms] Update Form Errors';
    }
}
if (false) {
    /** @type {?} */
    UpdateFormErrors.prototype.payload;
}
export class SetFormDisabled {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        this.payload = payload;
    }
    /**
     * @return {?}
     */
    static get type() {
        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
        return '[Forms] Set Form Disabled';
    }
}
if (false) {
    /** @type {?} */
    SetFormDisabled.prototype.payload;
}
export class SetFormEnabled {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        this.payload = payload;
    }
    /**
     * @return {?}
     */
    static get type() {
        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
        return '[Forms] Set Form Enabled';
    }
}
if (false) {
    /** @type {?} */
    SetFormEnabled.prototype.payload;
}
export class ResetForm {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        this.payload = payload;
    }
    /**
     * @return {?}
     */
    static get type() {
        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
        return '[Forms] Reset Form';
    }
}
if (false) {
    /** @type {?} */
    ResetForm.prototype.payload;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hzL2Zvcm0tcGx1Z2luLyIsInNvdXJjZXMiOlsic3JjL2FjdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU0sT0FBTyxnQkFBZ0I7Ozs7SUFLM0IsWUFDUyxPQUdOO1FBSE0sWUFBTyxHQUFQLE9BQU8sQ0FHYjtJQUNBLENBQUM7Ozs7SUFUSixNQUFNLEtBQUssSUFBSTtRQUNiLHNJQUFzSTtRQUN0SSxPQUFPLDRCQUE0QixDQUFDO0lBQ3RDLENBQUM7Q0FPRjs7O0lBTEcsbUNBR0M7O0FBSUwsTUFBTSxPQUFPLGVBQWU7Ozs7SUFLMUIsWUFBbUIsT0FBNEQ7UUFBNUQsWUFBTyxHQUFQLE9BQU8sQ0FBcUQ7SUFBRyxDQUFDOzs7O0lBSm5GLE1BQU0sS0FBSyxJQUFJO1FBQ2Isc0lBQXNJO1FBQ3RJLE9BQU8sMkJBQTJCLENBQUM7SUFDckMsQ0FBQztDQUVGOzs7SUFEYSxrQ0FBbUU7O0FBR2pGLE1BQU0sT0FBTyxVQUFVOzs7O0lBS3JCLFlBQ1MsT0FNTjtRQU5NLFlBQU8sR0FBUCxPQUFPLENBTWI7SUFDQSxDQUFDOzs7O0lBWkosTUFBTSxLQUFLLElBQUk7UUFDYixzSUFBc0k7UUFDdEksT0FBTyxxQkFBcUIsQ0FBQztJQUMvQixDQUFDO0NBVUY7OztJQVJHLDZCQU1DOztBQUlMLE1BQU0sT0FBTyxlQUFlOzs7O0lBSzFCLFlBQW1CLE9BQWdEO1FBQWhELFlBQU8sR0FBUCxPQUFPLENBQXlDO0lBQUcsQ0FBQzs7OztJQUp2RSxNQUFNLEtBQUssSUFBSTtRQUNiLHNJQUFzSTtRQUN0SSxPQUFPLDJCQUEyQixDQUFDO0lBQ3JDLENBQUM7Q0FFRjs7O0lBRGEsa0NBQXVEOztBQUdyRSxNQUFNLE9BQU8sWUFBWTs7OztJQUt2QixZQUFtQixPQUFlO1FBQWYsWUFBTyxHQUFQLE9BQU8sQ0FBUTtJQUFHLENBQUM7Ozs7SUFKdEMsTUFBTSxLQUFLLElBQUk7UUFDYixzSUFBc0k7UUFDdEksT0FBTyx3QkFBd0IsQ0FBQztJQUNsQyxDQUFDO0NBRUY7OztJQURhLCtCQUFzQjs7QUFHcEMsTUFBTSxPQUFPLGVBQWU7Ozs7SUFLMUIsWUFBbUIsT0FBZTtRQUFmLFlBQU8sR0FBUCxPQUFPLENBQVE7SUFBRyxDQUFDOzs7O0lBSnRDLE1BQU0sS0FBSyxJQUFJO1FBQ2Isc0lBQXNJO1FBQ3RJLE9BQU8sMkJBQTJCLENBQUM7SUFDckMsQ0FBQztDQUVGOzs7SUFEYSxrQ0FBc0I7O0FBR3BDLE1BQU0sT0FBTyxnQkFBZ0I7Ozs7SUFLM0IsWUFBbUIsT0FBaUU7UUFBakUsWUFBTyxHQUFQLE9BQU8sQ0FBMEQ7SUFBRyxDQUFDOzs7O0lBSnhGLE1BQU0sS0FBSyxJQUFJO1FBQ2Isc0lBQXNJO1FBQ3RJLE9BQU8sNEJBQTRCLENBQUM7SUFDdEMsQ0FBQztDQUVGOzs7SUFEYSxtQ0FBd0U7O0FBR3RGLE1BQU0sT0FBTyxlQUFlOzs7O0lBSzFCLFlBQW1CLE9BQWU7UUFBZixZQUFPLEdBQVAsT0FBTyxDQUFRO0lBQUcsQ0FBQzs7OztJQUp0QyxNQUFNLEtBQUssSUFBSTtRQUNiLHNJQUFzSTtRQUN0SSxPQUFPLDJCQUEyQixDQUFDO0lBQ3JDLENBQUM7Q0FFRjs7O0lBRGEsa0NBQXNCOztBQUdwQyxNQUFNLE9BQU8sY0FBYzs7OztJQUt6QixZQUFtQixPQUFlO1FBQWYsWUFBTyxHQUFQLE9BQU8sQ0FBUTtJQUFHLENBQUM7Ozs7SUFKdEMsTUFBTSxLQUFLLElBQUk7UUFDYixzSUFBc0k7UUFDdEksT0FBTywwQkFBMEIsQ0FBQztJQUNwQyxDQUFDO0NBRUY7OztJQURhLGlDQUFzQjs7QUFHcEMsTUFBTSxPQUFPLFNBQVM7Ozs7SUFLcEIsWUFBbUIsT0FBc0M7UUFBdEMsWUFBTyxHQUFQLE9BQU8sQ0FBK0I7SUFBRyxDQUFDOzs7O0lBSjdELE1BQU0sS0FBSyxJQUFJO1FBQ2Isc0lBQXNJO1FBQ3RJLE9BQU8sb0JBQW9CLENBQUM7SUFDOUIsQ0FBQztDQUVGOzs7SUFEYSw0QkFBNkMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgVXBkYXRlRm9ybVN0YXR1cyB7XHJcbiAgc3RhdGljIGdldCB0eXBlKCkge1xyXG4gICAgLy8gTk9URTogTm90IG5lY2Vzc2FyeSB0byBkZWNsYXJlIHRoZSB0eXBlIGluIHRoaXMgd2F5IGluIHlvdXIgY29kZS4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9uZ3hzL3N0b3JlL3B1bGwvNjQ0I2lzc3VlY29tbWVudC00MzYwMDMxMzhcclxuICAgIHJldHVybiAnW0Zvcm1zXSBVcGRhdGUgRm9ybSBTdGF0dXMnO1xyXG4gIH1cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyBwYXlsb2FkOiB7XHJcbiAgICAgIHN0YXR1czogc3RyaW5nIHwgbnVsbDtcclxuICAgICAgcGF0aDogc3RyaW5nO1xyXG4gICAgfVxyXG4gICkge31cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFVwZGF0ZUZvcm1WYWx1ZSB7XHJcbiAgc3RhdGljIGdldCB0eXBlKCkge1xyXG4gICAgLy8gTk9URTogTm90IG5lY2Vzc2FyeSB0byBkZWNsYXJlIHRoZSB0eXBlIGluIHRoaXMgd2F5IGluIHlvdXIgY29kZS4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9uZ3hzL3N0b3JlL3B1bGwvNjQ0I2lzc3VlY29tbWVudC00MzYwMDMxMzhcclxuICAgIHJldHVybiAnW0Zvcm1zXSBVcGRhdGUgRm9ybSBWYWx1ZSc7XHJcbiAgfVxyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiB7IHZhbHVlOiBhbnk7IHBhdGg6IHN0cmluZzsgcHJvcGVydHlQYXRoPzogc3RyaW5nIH0pIHt9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBVcGRhdGVGb3JtIHtcclxuICBzdGF0aWMgZ2V0IHR5cGUoKSB7XHJcbiAgICAvLyBOT1RFOiBOb3QgbmVjZXNzYXJ5IHRvIGRlY2xhcmUgdGhlIHR5cGUgaW4gdGhpcyB3YXkgaW4geW91ciBjb2RlLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL25neHMvc3RvcmUvcHVsbC82NDQjaXNzdWVjb21tZW50LTQzNjAwMzEzOFxyXG4gICAgcmV0dXJuICdbRm9ybXNdIFVwZGF0ZSBGb3JtJztcclxuICB9XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgcGF5bG9hZDoge1xyXG4gICAgICB2YWx1ZTogYW55O1xyXG4gICAgICBlcnJvcnM6IHsgW2s6IHN0cmluZ106IHN0cmluZyB9IHwgbnVsbDtcclxuICAgICAgZGlydHk6IGJvb2xlYW4gfCBudWxsO1xyXG4gICAgICBzdGF0dXM6IHN0cmluZyB8IG51bGw7XHJcbiAgICAgIHBhdGg6IHN0cmluZztcclxuICAgIH1cclxuICApIHt9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBVcGRhdGVGb3JtRGlydHkge1xyXG4gIHN0YXRpYyBnZXQgdHlwZSgpIHtcclxuICAgIC8vIE5PVEU6IE5vdCBuZWNlc3NhcnkgdG8gZGVjbGFyZSB0aGUgdHlwZSBpbiB0aGlzIHdheSBpbiB5b3VyIGNvZGUuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbmd4cy9zdG9yZS9wdWxsLzY0NCNpc3N1ZWNvbW1lbnQtNDM2MDAzMTM4XHJcbiAgICByZXR1cm4gJ1tGb3Jtc10gVXBkYXRlIEZvcm0gRGlydHknO1xyXG4gIH1cclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogeyBkaXJ0eTogYm9vbGVhbiB8IG51bGw7IHBhdGg6IHN0cmluZyB9KSB7fVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU2V0Rm9ybURpcnR5IHtcclxuICBzdGF0aWMgZ2V0IHR5cGUoKSB7XHJcbiAgICAvLyBOT1RFOiBOb3QgbmVjZXNzYXJ5IHRvIGRlY2xhcmUgdGhlIHR5cGUgaW4gdGhpcyB3YXkgaW4geW91ciBjb2RlLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL25neHMvc3RvcmUvcHVsbC82NDQjaXNzdWVjb21tZW50LTQzNjAwMzEzOFxyXG4gICAgcmV0dXJuICdbRm9ybXNdIFNldCBGb3JtIERpcnR5JztcclxuICB9XHJcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IHN0cmluZykge31cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFNldEZvcm1QcmlzdGluZSB7XHJcbiAgc3RhdGljIGdldCB0eXBlKCkge1xyXG4gICAgLy8gTk9URTogTm90IG5lY2Vzc2FyeSB0byBkZWNsYXJlIHRoZSB0eXBlIGluIHRoaXMgd2F5IGluIHlvdXIgY29kZS4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9uZ3hzL3N0b3JlL3B1bGwvNjQ0I2lzc3VlY29tbWVudC00MzYwMDMxMzhcclxuICAgIHJldHVybiAnW0Zvcm1zXSBTZXQgRm9ybSBQcmlzdGluZSc7XHJcbiAgfVxyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBzdHJpbmcpIHt9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBVcGRhdGVGb3JtRXJyb3JzIHtcclxuICBzdGF0aWMgZ2V0IHR5cGUoKSB7XHJcbiAgICAvLyBOT1RFOiBOb3QgbmVjZXNzYXJ5IHRvIGRlY2xhcmUgdGhlIHR5cGUgaW4gdGhpcyB3YXkgaW4geW91ciBjb2RlLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL25neHMvc3RvcmUvcHVsbC82NDQjaXNzdWVjb21tZW50LTQzNjAwMzEzOFxyXG4gICAgcmV0dXJuICdbRm9ybXNdIFVwZGF0ZSBGb3JtIEVycm9ycyc7XHJcbiAgfVxyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiB7IGVycm9yczogeyBbazogc3RyaW5nXTogc3RyaW5nIH0gfCBudWxsOyBwYXRoOiBzdHJpbmcgfSkge31cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFNldEZvcm1EaXNhYmxlZCB7XHJcbiAgc3RhdGljIGdldCB0eXBlKCkge1xyXG4gICAgLy8gTk9URTogTm90IG5lY2Vzc2FyeSB0byBkZWNsYXJlIHRoZSB0eXBlIGluIHRoaXMgd2F5IGluIHlvdXIgY29kZS4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9uZ3hzL3N0b3JlL3B1bGwvNjQ0I2lzc3VlY29tbWVudC00MzYwMDMxMzhcclxuICAgIHJldHVybiAnW0Zvcm1zXSBTZXQgRm9ybSBEaXNhYmxlZCc7XHJcbiAgfVxyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBzdHJpbmcpIHt9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTZXRGb3JtRW5hYmxlZCB7XHJcbiAgc3RhdGljIGdldCB0eXBlKCkge1xyXG4gICAgLy8gTk9URTogTm90IG5lY2Vzc2FyeSB0byBkZWNsYXJlIHRoZSB0eXBlIGluIHRoaXMgd2F5IGluIHlvdXIgY29kZS4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9uZ3hzL3N0b3JlL3B1bGwvNjQ0I2lzc3VlY29tbWVudC00MzYwMDMxMzhcclxuICAgIHJldHVybiAnW0Zvcm1zXSBTZXQgRm9ybSBFbmFibGVkJztcclxuICB9XHJcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IHN0cmluZykge31cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFJlc2V0Rm9ybSB7XHJcbiAgc3RhdGljIGdldCB0eXBlKCkge1xyXG4gICAgLy8gTk9URTogTm90IG5lY2Vzc2FyeSB0byBkZWNsYXJlIHRoZSB0eXBlIGluIHRoaXMgd2F5IGluIHlvdXIgY29kZS4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9uZ3hzL3N0b3JlL3B1bGwvNjQ0I2lzc3VlY29tbWVudC00MzYwMDMxMzhcclxuICAgIHJldHVybiAnW0Zvcm1zXSBSZXNldCBGb3JtJztcclxuICB9XHJcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IHsgcGF0aDogc3RyaW5nOyB2YWx1ZT86IGFueSB9KSB7fVxyXG59XHJcbiJdfQ==