/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { getActionTypeFromInstance, getValue, setValue } from '@ngxs/store';
import { ResetForm, SetFormDirty, SetFormDisabled, SetFormEnabled, SetFormPristine, UpdateForm, UpdateFormDirty, UpdateFormErrors, UpdateFormStatus, UpdateFormValue } from './actions';
export class NgxsFormPlugin {
    /**
     * @param {?} state
     * @param {?} event
     * @param {?} next
     * @return {?}
     */
    handle(state, event, next) {
        /** @type {?} */
        const type = getActionTypeFromInstance(event);
        /** @type {?} */
        let nextState = state;
        if (type === UpdateFormValue.type || type === UpdateForm.type || type === ResetForm.type) {
            const { value } = event.payload;
            /** @type {?} */
            const payloadValue = Array.isArray(value) ? value.slice() : Object.assign({}, value);
            /** @type {?} */
            const path = this.joinPathWithPropertyPath(event);
            nextState = setValue(nextState, path, payloadValue);
        }
        if (type === ResetForm.type) {
            /** @type {?} */
            const model = getValue(nextState, `${event.payload.path}.model`);
            nextState = setValue(nextState, `${event.payload.path}`, { model: model });
        }
        if (type === UpdateFormStatus.type || type === UpdateForm.type) {
            nextState = setValue(nextState, `${event.payload.path}.status`, event.payload.status);
        }
        if (type === UpdateFormErrors.type || type === UpdateForm.type) {
            nextState = setValue(nextState, `${event.payload.path}.errors`, Object.assign({}, event.payload.errors));
        }
        if (type === UpdateFormDirty.type || type === UpdateForm.type) {
            nextState = setValue(nextState, `${event.payload.path}.dirty`, event.payload.dirty);
        }
        if (type === SetFormDirty.type) {
            nextState = setValue(nextState, `${event.payload}.dirty`, true);
        }
        if (type === SetFormPristine.type) {
            nextState = setValue(nextState, `${event.payload}.dirty`, false);
        }
        if (type === SetFormDisabled.type) {
            nextState = setValue(nextState, `${event.payload}.disabled`, true);
        }
        if (type === SetFormEnabled.type) {
            nextState = setValue(nextState, `${event.payload}.disabled`, false);
        }
        return next(nextState, event);
    }
    /**
     * @private
     * @param {?} __0
     * @return {?}
     */
    joinPathWithPropertyPath({ payload }) {
        /** @type {?} */
        let path = `${payload.path}.model`;
        if (payload.propertyPath) {
            path += `.${payload.propertyPath}`;
        }
        return path;
    }
}
NgxsFormPlugin.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS5wbHVnaW4uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9mb3JtLXBsdWdpbi8iLCJzb3VyY2VzIjpbInNyYy9mb3JtLnBsdWdpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQ0wseUJBQXlCLEVBQ3pCLFFBQVEsRUFHUixRQUFRLEVBQ1QsTUFBTSxhQUFhLENBQUM7QUFDckIsT0FBTyxFQUNMLFNBQVMsRUFDVCxZQUFZLEVBQ1osZUFBZSxFQUNmLGNBQWMsRUFDZCxlQUFlLEVBQ2YsVUFBVSxFQUNWLGVBQWUsRUFDZixnQkFBZ0IsRUFDaEIsZ0JBQWdCLEVBQ2hCLGVBQWUsRUFDaEIsTUFBTSxXQUFXLENBQUM7QUFHbkIsTUFBTSxPQUFPLGNBQWM7Ozs7Ozs7SUFDekIsTUFBTSxDQUFDLEtBQVUsRUFBRSxLQUFVLEVBQUUsSUFBc0I7O2NBQzdDLElBQUksR0FBRyx5QkFBeUIsQ0FBQyxLQUFLLENBQUM7O1lBRXpDLFNBQVMsR0FBRyxLQUFLO1FBRXJCLElBQUksSUFBSSxLQUFLLGVBQWUsQ0FBQyxJQUFJLElBQUksSUFBSSxLQUFLLFVBQVUsQ0FBQyxJQUFJLElBQUksSUFBSSxLQUFLLFNBQVMsQ0FBQyxJQUFJLEVBQUU7a0JBQ2xGLEVBQUUsS0FBSyxFQUFFLEdBQUcsS0FBSyxDQUFDLE9BQU87O2tCQUN6QixZQUFZLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsbUJBQU0sS0FBSyxDQUFFOztrQkFDbEUsSUFBSSxHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxLQUFLLENBQUM7WUFDakQsU0FBUyxHQUFHLFFBQVEsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDO1NBQ3JEO1FBRUQsSUFBSSxJQUFJLEtBQUssU0FBUyxDQUFDLElBQUksRUFBRTs7a0JBQ3JCLEtBQUssR0FBRyxRQUFRLENBQUMsU0FBUyxFQUFFLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLFFBQVEsQ0FBQztZQUNoRSxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsRUFBRSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztTQUM1RTtRQUVELElBQUksSUFBSSxLQUFLLGdCQUFnQixDQUFDLElBQUksSUFBSSxJQUFJLEtBQUssVUFBVSxDQUFDLElBQUksRUFBRTtZQUM5RCxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsRUFBRSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxTQUFTLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2RjtRQUVELElBQUksSUFBSSxLQUFLLGdCQUFnQixDQUFDLElBQUksSUFBSSxJQUFJLEtBQUssVUFBVSxDQUFDLElBQUksRUFBRTtZQUM5RCxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsRUFBRSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxTQUFTLG9CQUN6RCxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFDdkIsQ0FBQztTQUNKO1FBRUQsSUFBSSxJQUFJLEtBQUssZUFBZSxDQUFDLElBQUksSUFBSSxJQUFJLEtBQUssVUFBVSxDQUFDLElBQUksRUFBRTtZQUM3RCxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsRUFBRSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxRQUFRLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNyRjtRQUVELElBQUksSUFBSSxLQUFLLFlBQVksQ0FBQyxJQUFJLEVBQUU7WUFDOUIsU0FBUyxHQUFHLFFBQVEsQ0FBQyxTQUFTLEVBQUUsR0FBRyxLQUFLLENBQUMsT0FBTyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDakU7UUFFRCxJQUFJLElBQUksS0FBSyxlQUFlLENBQUMsSUFBSSxFQUFFO1lBQ2pDLFNBQVMsR0FBRyxRQUFRLENBQUMsU0FBUyxFQUFFLEdBQUcsS0FBSyxDQUFDLE9BQU8sUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ2xFO1FBRUQsSUFBSSxJQUFJLEtBQUssZUFBZSxDQUFDLElBQUksRUFBRTtZQUNqQyxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsRUFBRSxHQUFHLEtBQUssQ0FBQyxPQUFPLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUNwRTtRQUVELElBQUksSUFBSSxLQUFLLGNBQWMsQ0FBQyxJQUFJLEVBQUU7WUFDaEMsU0FBUyxHQUFHLFFBQVEsQ0FBQyxTQUFTLEVBQUUsR0FBRyxLQUFLLENBQUMsT0FBTyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDckU7UUFFRCxPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDaEMsQ0FBQzs7Ozs7O0lBRU8sd0JBQXdCLENBQUMsRUFBRSxPQUFPLEVBQW1COztZQUN2RCxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsSUFBSSxRQUFRO1FBRWxDLElBQUksT0FBTyxDQUFDLFlBQVksRUFBRTtZQUN4QixJQUFJLElBQUksSUFBSSxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDcEM7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7OztZQTVERixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1xyXG4gIGdldEFjdGlvblR5cGVGcm9tSW5zdGFuY2UsXHJcbiAgZ2V0VmFsdWUsXHJcbiAgTmd4c05leHRQbHVnaW5GbixcclxuICBOZ3hzUGx1Z2luLFxyXG4gIHNldFZhbHVlXHJcbn0gZnJvbSAnQG5neHMvc3RvcmUnO1xyXG5pbXBvcnQge1xyXG4gIFJlc2V0Rm9ybSxcclxuICBTZXRGb3JtRGlydHksXHJcbiAgU2V0Rm9ybURpc2FibGVkLFxyXG4gIFNldEZvcm1FbmFibGVkLFxyXG4gIFNldEZvcm1QcmlzdGluZSxcclxuICBVcGRhdGVGb3JtLFxyXG4gIFVwZGF0ZUZvcm1EaXJ0eSxcclxuICBVcGRhdGVGb3JtRXJyb3JzLFxyXG4gIFVwZGF0ZUZvcm1TdGF0dXMsXHJcbiAgVXBkYXRlRm9ybVZhbHVlXHJcbn0gZnJvbSAnLi9hY3Rpb25zJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIE5neHNGb3JtUGx1Z2luIGltcGxlbWVudHMgTmd4c1BsdWdpbiB7XHJcbiAgaGFuZGxlKHN0YXRlOiBhbnksIGV2ZW50OiBhbnksIG5leHQ6IE5neHNOZXh0UGx1Z2luRm4pIHtcclxuICAgIGNvbnN0IHR5cGUgPSBnZXRBY3Rpb25UeXBlRnJvbUluc3RhbmNlKGV2ZW50KTtcclxuXHJcbiAgICBsZXQgbmV4dFN0YXRlID0gc3RhdGU7XHJcblxyXG4gICAgaWYgKHR5cGUgPT09IFVwZGF0ZUZvcm1WYWx1ZS50eXBlIHx8IHR5cGUgPT09IFVwZGF0ZUZvcm0udHlwZSB8fCB0eXBlID09PSBSZXNldEZvcm0udHlwZSkge1xyXG4gICAgICBjb25zdCB7IHZhbHVlIH0gPSBldmVudC5wYXlsb2FkO1xyXG4gICAgICBjb25zdCBwYXlsb2FkVmFsdWUgPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLnNsaWNlKCkgOiB7IC4uLnZhbHVlIH07XHJcbiAgICAgIGNvbnN0IHBhdGggPSB0aGlzLmpvaW5QYXRoV2l0aFByb3BlcnR5UGF0aChldmVudCk7XHJcbiAgICAgIG5leHRTdGF0ZSA9IHNldFZhbHVlKG5leHRTdGF0ZSwgcGF0aCwgcGF5bG9hZFZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZSA9PT0gUmVzZXRGb3JtLnR5cGUpIHtcclxuICAgICAgY29uc3QgbW9kZWwgPSBnZXRWYWx1ZShuZXh0U3RhdGUsIGAke2V2ZW50LnBheWxvYWQucGF0aH0ubW9kZWxgKTtcclxuICAgICAgbmV4dFN0YXRlID0gc2V0VmFsdWUobmV4dFN0YXRlLCBgJHtldmVudC5wYXlsb2FkLnBhdGh9YCwgeyBtb2RlbDogbW9kZWwgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGUgPT09IFVwZGF0ZUZvcm1TdGF0dXMudHlwZSB8fCB0eXBlID09PSBVcGRhdGVGb3JtLnR5cGUpIHtcclxuICAgICAgbmV4dFN0YXRlID0gc2V0VmFsdWUobmV4dFN0YXRlLCBgJHtldmVudC5wYXlsb2FkLnBhdGh9LnN0YXR1c2AsIGV2ZW50LnBheWxvYWQuc3RhdHVzKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZSA9PT0gVXBkYXRlRm9ybUVycm9ycy50eXBlIHx8IHR5cGUgPT09IFVwZGF0ZUZvcm0udHlwZSkge1xyXG4gICAgICBuZXh0U3RhdGUgPSBzZXRWYWx1ZShuZXh0U3RhdGUsIGAke2V2ZW50LnBheWxvYWQucGF0aH0uZXJyb3JzYCwge1xyXG4gICAgICAgIC4uLmV2ZW50LnBheWxvYWQuZXJyb3JzXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlID09PSBVcGRhdGVGb3JtRGlydHkudHlwZSB8fCB0eXBlID09PSBVcGRhdGVGb3JtLnR5cGUpIHtcclxuICAgICAgbmV4dFN0YXRlID0gc2V0VmFsdWUobmV4dFN0YXRlLCBgJHtldmVudC5wYXlsb2FkLnBhdGh9LmRpcnR5YCwgZXZlbnQucGF5bG9hZC5kaXJ0eSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGUgPT09IFNldEZvcm1EaXJ0eS50eXBlKSB7XHJcbiAgICAgIG5leHRTdGF0ZSA9IHNldFZhbHVlKG5leHRTdGF0ZSwgYCR7ZXZlbnQucGF5bG9hZH0uZGlydHlgLCB0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZSA9PT0gU2V0Rm9ybVByaXN0aW5lLnR5cGUpIHtcclxuICAgICAgbmV4dFN0YXRlID0gc2V0VmFsdWUobmV4dFN0YXRlLCBgJHtldmVudC5wYXlsb2FkfS5kaXJ0eWAsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZSA9PT0gU2V0Rm9ybURpc2FibGVkLnR5cGUpIHtcclxuICAgICAgbmV4dFN0YXRlID0gc2V0VmFsdWUobmV4dFN0YXRlLCBgJHtldmVudC5wYXlsb2FkfS5kaXNhYmxlZGAsIHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlID09PSBTZXRGb3JtRW5hYmxlZC50eXBlKSB7XHJcbiAgICAgIG5leHRTdGF0ZSA9IHNldFZhbHVlKG5leHRTdGF0ZSwgYCR7ZXZlbnQucGF5bG9hZH0uZGlzYWJsZWRgLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG5leHQobmV4dFN0YXRlLCBldmVudCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGpvaW5QYXRoV2l0aFByb3BlcnR5UGF0aCh7IHBheWxvYWQgfTogVXBkYXRlRm9ybVZhbHVlKTogc3RyaW5nIHtcclxuICAgIGxldCBwYXRoID0gYCR7cGF5bG9hZC5wYXRofS5tb2RlbGA7XHJcblxyXG4gICAgaWYgKHBheWxvYWQucHJvcGVydHlQYXRoKSB7XHJcbiAgICAgIHBhdGggKz0gYC4ke3BheWxvYWQucHJvcGVydHlQYXRofWA7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHBhdGg7XHJcbiAgfVxyXG59XHJcbiJdfQ==