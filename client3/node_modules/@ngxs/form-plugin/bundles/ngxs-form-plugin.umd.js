(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@ngxs/store'), require('@angular/forms'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@ngxs/form-plugin', ['exports', '@angular/core', '@ngxs/store', '@angular/forms', 'rxjs', 'rxjs/operators'], factory) :
    (global = global || self, factory((global.ngxs = global.ngxs || {}, global.ngxs['form-plugin'] = {}), global.ng.core, global['ngxs-store'], global.ng.forms, global.rxjs, global.rxjs.operators));
}(this, function (exports, core, store, forms, rxjs, operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __createBinding(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }

    function __exportStar(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UpdateFormStatus = /** @class */ (function () {
        function UpdateFormStatus(payload) {
            this.payload = payload;
        }
        Object.defineProperty(UpdateFormStatus, "type", {
            get: /**
             * @return {?}
             */
            function () {
                // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
                return '[Forms] Update Form Status';
            },
            enumerable: true,
            configurable: true
        });
        return UpdateFormStatus;
    }());
    if (false) {
        /** @type {?} */
        UpdateFormStatus.prototype.payload;
    }
    var UpdateFormValue = /** @class */ (function () {
        function UpdateFormValue(payload) {
            this.payload = payload;
        }
        Object.defineProperty(UpdateFormValue, "type", {
            get: /**
             * @return {?}
             */
            function () {
                // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
                return '[Forms] Update Form Value';
            },
            enumerable: true,
            configurable: true
        });
        return UpdateFormValue;
    }());
    if (false) {
        /** @type {?} */
        UpdateFormValue.prototype.payload;
    }
    var UpdateForm = /** @class */ (function () {
        function UpdateForm(payload) {
            this.payload = payload;
        }
        Object.defineProperty(UpdateForm, "type", {
            get: /**
             * @return {?}
             */
            function () {
                // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
                return '[Forms] Update Form';
            },
            enumerable: true,
            configurable: true
        });
        return UpdateForm;
    }());
    if (false) {
        /** @type {?} */
        UpdateForm.prototype.payload;
    }
    var UpdateFormDirty = /** @class */ (function () {
        function UpdateFormDirty(payload) {
            this.payload = payload;
        }
        Object.defineProperty(UpdateFormDirty, "type", {
            get: /**
             * @return {?}
             */
            function () {
                // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
                return '[Forms] Update Form Dirty';
            },
            enumerable: true,
            configurable: true
        });
        return UpdateFormDirty;
    }());
    if (false) {
        /** @type {?} */
        UpdateFormDirty.prototype.payload;
    }
    var SetFormDirty = /** @class */ (function () {
        function SetFormDirty(payload) {
            this.payload = payload;
        }
        Object.defineProperty(SetFormDirty, "type", {
            get: /**
             * @return {?}
             */
            function () {
                // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
                return '[Forms] Set Form Dirty';
            },
            enumerable: true,
            configurable: true
        });
        return SetFormDirty;
    }());
    if (false) {
        /** @type {?} */
        SetFormDirty.prototype.payload;
    }
    var SetFormPristine = /** @class */ (function () {
        function SetFormPristine(payload) {
            this.payload = payload;
        }
        Object.defineProperty(SetFormPristine, "type", {
            get: /**
             * @return {?}
             */
            function () {
                // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
                return '[Forms] Set Form Pristine';
            },
            enumerable: true,
            configurable: true
        });
        return SetFormPristine;
    }());
    if (false) {
        /** @type {?} */
        SetFormPristine.prototype.payload;
    }
    var UpdateFormErrors = /** @class */ (function () {
        function UpdateFormErrors(payload) {
            this.payload = payload;
        }
        Object.defineProperty(UpdateFormErrors, "type", {
            get: /**
             * @return {?}
             */
            function () {
                // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
                return '[Forms] Update Form Errors';
            },
            enumerable: true,
            configurable: true
        });
        return UpdateFormErrors;
    }());
    if (false) {
        /** @type {?} */
        UpdateFormErrors.prototype.payload;
    }
    var SetFormDisabled = /** @class */ (function () {
        function SetFormDisabled(payload) {
            this.payload = payload;
        }
        Object.defineProperty(SetFormDisabled, "type", {
            get: /**
             * @return {?}
             */
            function () {
                // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
                return '[Forms] Set Form Disabled';
            },
            enumerable: true,
            configurable: true
        });
        return SetFormDisabled;
    }());
    if (false) {
        /** @type {?} */
        SetFormDisabled.prototype.payload;
    }
    var SetFormEnabled = /** @class */ (function () {
        function SetFormEnabled(payload) {
            this.payload = payload;
        }
        Object.defineProperty(SetFormEnabled, "type", {
            get: /**
             * @return {?}
             */
            function () {
                // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
                return '[Forms] Set Form Enabled';
            },
            enumerable: true,
            configurable: true
        });
        return SetFormEnabled;
    }());
    if (false) {
        /** @type {?} */
        SetFormEnabled.prototype.payload;
    }
    var ResetForm = /** @class */ (function () {
        function ResetForm(payload) {
            this.payload = payload;
        }
        Object.defineProperty(ResetForm, "type", {
            get: /**
             * @return {?}
             */
            function () {
                // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
                return '[Forms] Reset Form';
            },
            enumerable: true,
            configurable: true
        });
        return ResetForm;
    }());
    if (false) {
        /** @type {?} */
        ResetForm.prototype.payload;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxsFormPlugin = /** @class */ (function () {
        function NgxsFormPlugin() {
        }
        /**
         * @param {?} state
         * @param {?} event
         * @param {?} next
         * @return {?}
         */
        NgxsFormPlugin.prototype.handle = /**
         * @param {?} state
         * @param {?} event
         * @param {?} next
         * @return {?}
         */
        function (state, event, next) {
            /** @type {?} */
            var type = store.getActionTypeFromInstance(event);
            /** @type {?} */
            var nextState = state;
            if (type === UpdateFormValue.type || type === UpdateForm.type || type === ResetForm.type) {
                var value = event.payload.value;
                /** @type {?} */
                var payloadValue = Array.isArray(value) ? value.slice() : __assign({}, value);
                /** @type {?} */
                var path = this.joinPathWithPropertyPath(event);
                nextState = store.setValue(nextState, path, payloadValue);
            }
            if (type === ResetForm.type) {
                /** @type {?} */
                var model = store.getValue(nextState, event.payload.path + ".model");
                nextState = store.setValue(nextState, "" + event.payload.path, { model: model });
            }
            if (type === UpdateFormStatus.type || type === UpdateForm.type) {
                nextState = store.setValue(nextState, event.payload.path + ".status", event.payload.status);
            }
            if (type === UpdateFormErrors.type || type === UpdateForm.type) {
                nextState = store.setValue(nextState, event.payload.path + ".errors", __assign({}, event.payload.errors));
            }
            if (type === UpdateFormDirty.type || type === UpdateForm.type) {
                nextState = store.setValue(nextState, event.payload.path + ".dirty", event.payload.dirty);
            }
            if (type === SetFormDirty.type) {
                nextState = store.setValue(nextState, event.payload + ".dirty", true);
            }
            if (type === SetFormPristine.type) {
                nextState = store.setValue(nextState, event.payload + ".dirty", false);
            }
            if (type === SetFormDisabled.type) {
                nextState = store.setValue(nextState, event.payload + ".disabled", true);
            }
            if (type === SetFormEnabled.type) {
                nextState = store.setValue(nextState, event.payload + ".disabled", false);
            }
            return next(nextState, event);
        };
        /**
         * @private
         * @param {?} __0
         * @return {?}
         */
        NgxsFormPlugin.prototype.joinPathWithPropertyPath = /**
         * @private
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var payload = _a.payload;
            /** @type {?} */
            var path = payload.path + ".model";
            if (payload.propertyPath) {
                path += "." + payload.propertyPath;
            }
            return path;
        };
        NgxsFormPlugin.decorators = [
            { type: core.Injectable }
        ];
        return NgxsFormPlugin;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormDirective = /** @class */ (function () {
        function FormDirective(_actions$, _store, _formGroupDirective, _cd) {
            this._actions$ = _actions$;
            this._store = _store;
            this._formGroupDirective = _formGroupDirective;
            this._cd = _cd;
            this.path = (/** @type {?} */ (null));
            this.debounce = 100;
            this._clearDestroy = false;
            this._destroy$ = new rxjs.Subject();
            this._updating = false;
        }
        Object.defineProperty(FormDirective.prototype, "clearDestroy", {
            get: /**
             * @return {?}
             */
            function () {
                return this._clearDestroy;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */
            function (val) {
                this._clearDestroy = val != null && "" + val !== 'false';
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        FormDirective.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this._actions$
                .pipe(store.ofActionDispatched(ResetForm), operators.filter((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload.path === _this.path; })), operators.takeUntil(this._destroy$))
                .subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var value = _a.payload.value;
                _this.form.reset(value);
                _this.updateFormStateWithRawValue(true);
                _this._cd.markForCheck();
            }));
            this.getStateStream(this.path + ".model").subscribe((/**
             * @param {?} model
             * @return {?}
             */
            function (model) {
                if (_this._updating || !model) {
                    return;
                }
                _this.form.patchValue(model);
                _this._cd.markForCheck();
            }));
            this.getStateStream(this.path + ".dirty").subscribe((/**
             * @param {?} dirty
             * @return {?}
             */
            function (dirty) {
                if (_this.form.dirty === dirty || typeof dirty !== 'boolean') {
                    return;
                }
                if (dirty) {
                    _this.form.markAsDirty();
                }
                else {
                    _this.form.markAsPristine();
                }
                _this._cd.markForCheck();
            }));
            // On first state change, sync form model, status and dirty with state
            this._store
                .selectOnce((/**
             * @param {?} state
             * @return {?}
             */
            function (state) { return store.getValue(state, _this.path); }))
                .subscribe((/**
             * @return {?}
             */
            function () {
                _this._store.dispatch([
                    new UpdateFormValue({
                        path: _this.path,
                        value: _this.form.getRawValue()
                    }),
                    new UpdateFormStatus({
                        path: _this.path,
                        status: _this.form.status
                    }),
                    new UpdateFormDirty({
                        path: _this.path,
                        dirty: _this.form.dirty
                    })
                ]);
            }));
            this.getStateStream(this.path + ".disabled").subscribe((/**
             * @param {?} disabled
             * @return {?}
             */
            function (disabled) {
                if (_this.form.disabled === disabled || typeof disabled !== 'boolean') {
                    return;
                }
                if (disabled) {
                    _this.form.disable();
                }
                else {
                    _this.form.enable();
                }
                _this._cd.markForCheck();
            }));
            (/** @type {?} */ (this._formGroupDirective.valueChanges)).pipe(this.debounceChange()).subscribe((/**
             * @return {?}
             */
            function () {
                _this.updateFormStateWithRawValue();
            }));
            (/** @type {?} */ (this._formGroupDirective
                .statusChanges)).pipe(operators.distinctUntilChanged(), this.debounceChange())
                .subscribe((/**
             * @param {?} status
             * @return {?}
             */
            function (status) {
                _this._store.dispatch(new UpdateFormStatus({
                    status: status,
                    path: _this.path
                }));
            }));
        };
        /**
         * @param {?=} withFormStatus
         * @return {?}
         */
        FormDirective.prototype.updateFormStateWithRawValue = /**
         * @param {?=} withFormStatus
         * @return {?}
         */
        function (withFormStatus) {
            var _this = this;
            if (this._updating)
                return;
            /** @type {?} */
            var value = this._formGroupDirective.control.getRawValue();
            /** @type {?} */
            var actions = [
                new UpdateFormValue({
                    path: this.path,
                    value: value
                }),
                new UpdateFormDirty({
                    path: this.path,
                    dirty: this._formGroupDirective.dirty
                }),
                new UpdateFormErrors({
                    path: this.path,
                    errors: this._formGroupDirective.errors
                })
            ];
            if (withFormStatus) {
                actions.push(new UpdateFormStatus({
                    path: this.path,
                    status: this._formGroupDirective.status
                }));
            }
            this._updating = true;
            this._store.dispatch(actions).subscribe({
                error: (/**
                 * @return {?}
                 */
                function () { return (_this._updating = false); }),
                complete: (/**
                 * @return {?}
                 */
                function () { return (_this._updating = false); })
            });
        };
        /**
         * @return {?}
         */
        FormDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this._destroy$.next();
            this._destroy$.complete();
            if (this.clearDestroy) {
                this._store.dispatch(new UpdateForm({
                    path: this.path,
                    value: null,
                    dirty: null,
                    status: null,
                    errors: null
                }));
            }
        };
        /**
         * @private
         * @return {?}
         */
        FormDirective.prototype.debounceChange = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var skipDebounceTime = this._formGroupDirective.control.updateOn !== 'change' || this.debounce < 0;
            return skipDebounceTime
                ? (/**
                 * @param {?} change
                 * @return {?}
                 */
                function (change) { return change.pipe(operators.takeUntil(_this._destroy$)); })
                : (/**
                 * @param {?} change
                 * @return {?}
                 */
                function (change) {
                    return change.pipe(operators.debounceTime(_this.debounce), operators.takeUntil(_this._destroy$));
                });
        };
        Object.defineProperty(FormDirective.prototype, "form", {
            get: /**
             * @private
             * @return {?}
             */
            function () {
                return this._formGroupDirective.form;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @private
         * @param {?} path
         * @return {?}
         */
        FormDirective.prototype.getStateStream = /**
         * @private
         * @param {?} path
         * @return {?}
         */
        function (path) {
            return this._store.select((/**
             * @param {?} state
             * @return {?}
             */
            function (state) { return store.getValue(state, path); })).pipe(operators.takeUntil(this._destroy$));
        };
        FormDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[ngxsForm]' },] }
        ];
        /** @nocollapse */
        FormDirective.ctorParameters = function () { return [
            { type: store.Actions },
            { type: store.Store },
            { type: forms.FormGroupDirective },
            { type: core.ChangeDetectorRef }
        ]; };
        FormDirective.propDecorators = {
            path: [{ type: core.Input, args: ['ngxsForm',] }],
            debounce: [{ type: core.Input, args: ['ngxsFormDebounce',] }],
            clearDestroy: [{ type: core.Input, args: ['ngxsFormClearOnDestroy',] }]
        };
        return FormDirective;
    }());
    if (false) {
        /** @type {?} */
        FormDirective.prototype.path;
        /** @type {?} */
        FormDirective.prototype.debounce;
        /** @type {?} */
        FormDirective.prototype._clearDestroy;
        /**
         * @type {?}
         * @private
         */
        FormDirective.prototype._destroy$;
        /**
         * @type {?}
         * @private
         */
        FormDirective.prototype._updating;
        /**
         * @type {?}
         * @private
         */
        FormDirective.prototype._actions$;
        /**
         * @type {?}
         * @private
         */
        FormDirective.prototype._store;
        /**
         * @type {?}
         * @private
         */
        FormDirective.prototype._formGroupDirective;
        /**
         * @type {?}
         * @private
         */
        FormDirective.prototype._cd;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxsFormPluginModule = /** @class */ (function () {
        function NgxsFormPluginModule() {
        }
        /**
         * @return {?}
         */
        NgxsFormPluginModule.forRoot = /**
         * @return {?}
         */
        function () {
            return {
                ngModule: NgxsFormPluginModule,
                providers: [
                    {
                        provide: store.NGXS_PLUGINS,
                        useClass: NgxsFormPlugin,
                        multi: true
                    }
                ]
            };
        };
        NgxsFormPluginModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [forms.ReactiveFormsModule],
                        declarations: [FormDirective],
                        exports: [FormDirective]
                    },] }
        ];
        return NgxsFormPluginModule;
    }());

    exports.NgxsFormPlugin = NgxsFormPlugin;
    exports.NgxsFormPluginModule = NgxsFormPluginModule;
    exports.ResetForm = ResetForm;
    exports.SetFormDirty = SetFormDirty;
    exports.SetFormDisabled = SetFormDisabled;
    exports.SetFormEnabled = SetFormEnabled;
    exports.SetFormPristine = SetFormPristine;
    exports.UpdateForm = UpdateForm;
    exports.UpdateFormDirty = UpdateFormDirty;
    exports.UpdateFormErrors = UpdateFormErrors;
    exports.UpdateFormStatus = UpdateFormStatus;
    exports.UpdateFormValue = UpdateFormValue;
    exports.ɵa = FormDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngxs-form-plugin.umd.js.map
