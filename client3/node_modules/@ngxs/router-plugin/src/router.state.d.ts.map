{"version":3,"file":"router.state.d.ts","sources":["router.state.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { NgZone } from '@angular/core';\r\nimport { Router, RouterStateSnapshot, UrlSerializer } from '@angular/router';\r\nimport { LocationStrategy, Location } from '@angular/common';\r\nimport { StateContext, Store } from '@ngxs/store';\r\nimport { Navigate, RouterAction } from './router.actions';\r\nimport { RouterStateSerializer } from './serializer';\r\nexport interface RouterStateModel<T = RouterStateSnapshot> {\r\n    state?: T;\r\n    navigationId?: number;\r\n    trigger: RouterTrigger;\r\n}\r\nexport declare type RouterTrigger = 'none' | 'router' | 'store';\r\nexport declare class RouterState {\r\n    private _store;\r\n    private _router;\r\n    private _serializer;\r\n    private _ngZone;\r\n    private _urlSerializer;\r\n    private _locationStrategy;\r\n    private _location;\r\n    /**\r\n     * Determines how navigation was performed by the `RouterState` itself\r\n     * or outside via `new Navigate(...)`\r\n     */\r\n    private _trigger;\r\n    /**\r\n     * That's the serialized state from the `Router` class\r\n     */\r\n    private _routerState;\r\n    /**\r\n     * That's the value of the `RouterState` state\r\n     */\r\n    private _storeState;\r\n    private _lastRoutesRecognized;\r\n    static state<T = RouterStateSnapshot>(state: RouterStateModel<T>): T | undefined;\r\n    static url(state: RouterStateModel): string | undefined;\r\n    constructor(_store: Store, _router: Router, _serializer: RouterStateSerializer<RouterStateSnapshot>, _ngZone: NgZone, _urlSerializer: UrlSerializer, _locationStrategy: LocationStrategy, _location: Location);\r\n    navigate(_: StateContext<RouterStateModel>, action: Navigate): Promise<boolean>;\r\n    angularRouterAction(ctx: StateContext<RouterStateModel>, action: RouterAction<RouterStateModel, RouterStateSnapshot>): void;\r\n    private setUpStoreListener;\r\n    private setUpRouterEventsListener;\r\n    private navigationStart;\r\n    private navigationEnd;\r\n    private shouldDispatchRouterNavigation;\r\n    private navigateIfNeeded;\r\n    private dispatchRouterNavigation;\r\n    private dispatchRouterCancel;\r\n    private dispatchRouterError;\r\n    private dispatchRouterAction;\r\n    private dispatchRouterDataResolved;\r\n    private reset;\r\n    /**\r\n     * No sense to mess up the `setUpRouterEventsListener` method as we have\r\n     * to perform this check only once and unsubscribe after the first event\r\n     * is triggered\r\n     */\r\n    private checkInitialNavigationOnce;\r\n}\r\n"]}