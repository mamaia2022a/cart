{"version":3,"file":"ngx-moment.js","sources":["../../../src/add.pipe.ts","../../../src/calendar.pipe.ts","../../../src/date-format.pipe.ts","../../../src/difference.pipe.ts","../../../src/moment-options.ts","../../../src/duration.pipe.ts","../../../src/from-unix.pipe.ts","../../../src/parse.pipe.ts","../../../src/from-utc.pipe.ts","../../../src/is-after.pipe.ts","../../../src/is-before.pipe.ts","../../../src/local.pipe.ts","../../../src/locale.pipe.ts","../../../src/parse-zone.pipe.ts","../../../src/subtract.pipe.ts","../../../src/time-ago.pipe.ts","../../../src/utc.pipe.ts","../../../src/moment.module.ts","../../../src/ngx-moment.ts"],"names":["momentConstructor","moment.isMoment","moment.duration","moment.relativeTimeThreshold","moment.unix","moment.utc","moment.parseZone","moment.isDate","moment.locale"],"mappings":"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","sourcesContent":["/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */\n\nimport { Pipe, PipeTransform } from '@angular/core';\nimport * as moment from 'moment';\n\nconst momentConstructor = moment;\n\n@Pipe({ name: 'amAdd' })\nexport class AddPipe implements PipeTransform {\n  transform(\n    value: moment.MomentInput,\n    amount: moment.DurationInputArg1,\n    unit?: moment.DurationInputArg2,\n  ): any {\n    if (\n      typeof amount === 'undefined' ||\n      (typeof amount === 'number' && typeof unit === 'undefined')\n    ) {\n      throw new Error('AddPipe: missing required arguments');\n    }\n    return momentConstructor(value).add(amount, unit);\n  }\n}\n","/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */\n\nimport {\n  Pipe,\n  ChangeDetectorRef,\n  PipeTransform,\n  EventEmitter,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport * as moment from 'moment';\nimport { Subscription } from 'rxjs';\n\nconst momentConstructor = moment;\n\n@Pipe({ name: 'amCalendar', pure: false })\nexport class CalendarPipe implements PipeTransform, OnDestroy {\n  /**\n   * Internal reference counter, so we can clean up when no instances are in use\n   */\n  private static refs = 0;\n\n  private static timer: number | null = null;\n  private static midnight: EventEmitter<Date> | null = null;\n\n  private midnightSub: Subscription;\n\n  constructor(private cdRef: ChangeDetectorRef, private ngZone: NgZone) {\n    // using a single static timer for all instances of this pipe for performance reasons\n    CalendarPipe.initTimer(ngZone);\n\n    CalendarPipe.refs++;\n\n    // values such as Today will need to be replaced with Yesterday after midnight,\n    // so make sure we subscribe to an EventEmitter that we set up to emit at midnight\n    this.midnightSub = CalendarPipe.midnight.subscribe(() => {\n      this.ngZone.run(() => this.cdRef.markForCheck());\n    });\n  }\n\n  transform(value: moment.MomentInput, ...args: any[]): any {\n    let formats: any = null;\n    let referenceTime: any = null;\n\n    for (let i = 0, len = args.length; i < len; i++) {\n      if (args[i] !== null) {\n        if (typeof args[i] === 'object' && !moment.isMoment(args[i])) {\n          formats = args[i];\n        } else {\n          referenceTime = momentConstructor(args[i]);\n        }\n      }\n    }\n\n    return momentConstructor(value).calendar(referenceTime, formats);\n  }\n\n  ngOnDestroy(): void {\n    if (CalendarPipe.refs > 0) {\n      CalendarPipe.refs--;\n    }\n\n    if (CalendarPipe.refs === 0) {\n      CalendarPipe.removeTimer();\n    }\n\n    this.midnightSub.unsubscribe();\n  }\n\n  private static initTimer(ngZone: NgZone) {\n    // initialize the timer\n    if (!CalendarPipe.midnight) {\n      CalendarPipe.midnight = new EventEmitter<Date>();\n      if (typeof window !== 'undefined') {\n        const timeToUpdate = CalendarPipe._getMillisecondsUntilUpdate();\n        CalendarPipe.timer = ngZone.runOutsideAngular(() => {\n          return window.setTimeout(() => {\n            // emit the current date\n            CalendarPipe.midnight.emit(new Date());\n\n            // refresh the timer\n            CalendarPipe.removeTimer();\n            CalendarPipe.initTimer(ngZone);\n          }, timeToUpdate);\n        });\n      }\n    }\n  }\n\n  private static removeTimer() {\n    if (CalendarPipe.timer) {\n      window.clearTimeout(CalendarPipe.timer);\n      CalendarPipe.timer = null;\n      CalendarPipe.midnight = null;\n    }\n  }\n\n  private static _getMillisecondsUntilUpdate() {\n    const now = momentConstructor();\n    const tomorrow = momentConstructor().startOf('day').add(1, 'days');\n    const timeToMidnight = tomorrow.valueOf() - now.valueOf();\n    return timeToMidnight + 1000; // 1 second after midnight\n  }\n}\n","/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */\n\nimport { Pipe, PipeTransform } from '@angular/core';\nimport * as moment from 'moment';\n\nconst momentConstructor = moment;\n\n@Pipe({ name: 'amDateFormat' })\nexport class DateFormatPipe implements PipeTransform {\n  transform(value: moment.MomentInput, ...args: any[]): string {\n    if (!value) {\n      return '';\n    }\n    return momentConstructor(value).format(args[0]);\n  }\n}\n","/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */\n\nimport { Pipe, PipeTransform } from '@angular/core';\nimport * as moment from 'moment';\n\nconst momentConstructor = moment;\n\n@Pipe({ name: 'amDifference' })\nexport class DifferencePipe implements PipeTransform {\n  transform(\n    value: moment.MomentInput,\n    otherValue: moment.MomentInput,\n    unit?: moment.unitOfTime.Diff,\n    precision?: boolean,\n  ): number {\n    const date = momentConstructor(value);\n    const date2 = otherValue !== null ? momentConstructor(otherValue) : momentConstructor();\n\n    return date.diff(date2, unit, precision);\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const NGX_MOMENT_OPTIONS: InjectionToken<NgxMomentOptions> = new InjectionToken<\n  NgxMomentOptions\n>('NGX_MOMENT_OPTIONS');\n\nexport interface NgxMomentOptions {\n  /**\n   * relativeTimeThresholdOptions\n   * @description Provides the `relativeTimeThreshold` units allowing a pipe to set the `moment.relativeTimeThreshold` values.\n   * The `key` is a unit defined as one of `ss`, `s`, `m`, `h`, `d`, `M`.\n   * @see https://momentjs.com/docs/#/customization/relative-time-threshold/\n   * @example by default more than 45 seconds is considered a minute, more than 22 hours is considered a day and so on.\n   * So settings the unit 'm' to `59` will adjust the `relativeTimeThreshold` and consider more than 59 minutes\n   * to be an hour (default is `45 minutes`)\n   */\n  relativeTimeThresholdOptions: { [key: string]: number };\n}\n","import * as moment from 'moment';\n\nimport { Inject, Optional, Pipe, PipeTransform } from '@angular/core';\nimport { NGX_MOMENT_OPTIONS, NgxMomentOptions } from './moment-options';\n\n@Pipe({ name: 'amDuration' })\nexport class DurationPipe implements PipeTransform {\n  allowedUnits: Array<string> = ['ss', 's', 'm', 'h', 'd', 'M'];\n\n  constructor(@Optional() @Inject(NGX_MOMENT_OPTIONS) momentOptions?: NgxMomentOptions) {\n    this._applyOptions(momentOptions);\n  }\n\n  transform(value: moment.DurationInputArg1, ...args: string[]): string {\n    if (typeof args === 'undefined' || args.length !== 1) {\n      throw new Error('DurationPipe: missing required time unit argument');\n    }\n    return moment.duration(value, args[0] as moment.unitOfTime.DurationConstructor).humanize();\n  }\n\n  private _applyOptions(momentOptions: NgxMomentOptions): void {\n    if (!momentOptions) {\n      return;\n    }\n\n    if (!!momentOptions.relativeTimeThresholdOptions) {\n      const units: Array<string> = Object.keys(momentOptions.relativeTimeThresholdOptions);\n      const filteredUnits: Array<string> = units.filter(\n        (unit) => this.allowedUnits.indexOf(unit) !== -1,\n      );\n      filteredUnits.forEach((unit) => {\n        moment.relativeTimeThreshold(unit, momentOptions.relativeTimeThresholdOptions[unit]);\n      });\n    }\n  }\n}\n","/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */\n\nimport { Pipe, PipeTransform } from '@angular/core';\nimport * as moment from 'moment';\n\n@Pipe({ name: 'amFromUnix' })\nexport class FromUnixPipe implements PipeTransform {\n  transform(value: number | string, ...args: string[]): any {\n    return typeof value === 'string' ? moment.unix(parseInt(value, 10)) : moment.unix(value);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport * as moment from 'moment';\n\nconst momentConstructor = moment;\n\n@Pipe({ name: 'amParse' })\nexport class ParsePipe implements PipeTransform {\n  transform(value: moment.MomentInput, formats: string | string[]): moment.Moment {\n    return momentConstructor(value, formats);\n  }\n}\n","/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */\n\nimport { Pipe, PipeTransform } from '@angular/core';\nimport * as moment from 'moment';\n\n@Pipe({ name: 'amFromUtc' })\nexport class FromUtcPipe implements PipeTransform {\n  transform(value: moment.MomentInput, formats?: string | string[], ...args: string[]): any {\n    return formats ? moment.utc(value, formats) : moment.utc(value);\n  }\n}\n","import * as moment from 'moment';\n\nimport { Pipe, PipeTransform } from '@angular/core';\n\nconst momentConstructor = moment;\n\n@Pipe({\n  name: 'amIsAfter',\n})\nexport class IsAfterPipe implements PipeTransform {\n  transform(\n    value: moment.MomentInput,\n    otherValue: moment.MomentInput,\n    unit?: moment.unitOfTime.StartOf,\n  ): boolean {\n    return momentConstructor(value).isAfter(momentConstructor(otherValue), unit);\n  }\n}\n","import * as moment from 'moment';\n\nimport { Pipe, PipeTransform } from '@angular/core';\n\nconst momentConstructor = moment;\n\n@Pipe({\n  name: 'amIsBefore',\n})\nexport class IsBeforePipe implements PipeTransform {\n  transform(\n    value: moment.MomentInput,\n    otherValue: moment.MomentInput,\n    unit?: moment.unitOfTime.StartOf,\n  ): boolean {\n    return momentConstructor(value).isBefore(momentConstructor(otherValue), unit);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport * as moment from 'moment';\n\nconst momentConstructor = moment;\n\n@Pipe({ name: 'amLocal' })\nexport class LocalTimePipe implements PipeTransform {\n  transform(value: moment.MomentInput): moment.Moment {\n    return momentConstructor(value).local();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport * as moment from 'moment';\n\n// See https://github.com/ng-packagr/ng-packagr/issues/217 for why this is needed:\nconst momentConstructor = moment;\n\n@Pipe({ name: 'amLocale' })\nexport class LocalePipe implements PipeTransform {\n  transform(value: moment.MomentInput, locale: string): moment.Moment {\n    return momentConstructor(value).locale(locale);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport * as moment from 'moment';\n\n@Pipe({ name: 'amParseZone' })\nexport class ParseZonePipe implements PipeTransform {\n  transform(value: moment.MomentInput): moment.Moment {\n    return moment.parseZone(value);\n  }\n}\n","/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */\n\nimport { Pipe, PipeTransform } from '@angular/core';\nimport * as moment from 'moment';\n\nconst momentConstructor = moment;\n\n@Pipe({ name: 'amSubtract' })\nexport class SubtractPipe implements PipeTransform {\n  transform(\n    value: moment.MomentInput,\n    amount: moment.DurationInputArg1,\n    unit?: moment.DurationInputArg2,\n  ): any {\n    if (\n      typeof amount === 'undefined' ||\n      (typeof amount === 'number' && typeof unit === 'undefined')\n    ) {\n      throw new Error('SubtractPipe: missing required arguments');\n    }\n    return momentConstructor(value).subtract(amount, unit);\n  }\n}\n","/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */\n\nimport { Pipe, ChangeDetectorRef, PipeTransform, OnDestroy, NgZone } from '@angular/core';\nimport * as moment from 'moment';\n\nconst momentConstructor = moment;\n\n@Pipe({ name: 'amTimeAgo', pure: false })\nexport class TimeAgoPipe implements PipeTransform, OnDestroy {\n  private currentTimer: number | null;\n\n  private lastTime: Number;\n  private lastValue: moment.MomentInput;\n  private lastOmitSuffix: boolean;\n  private lastLocale?: string;\n  private lastText: string;\n  private formatFn: (m: moment.Moment) => string;\n\n  constructor(private cdRef: ChangeDetectorRef, private ngZone: NgZone) {}\n\n  format(m: moment.Moment) {\n    return m.from(momentConstructor(), this.lastOmitSuffix);\n  }\n\n  transform(\n    value: moment.MomentInput,\n    omitSuffix?: boolean,\n    formatFn?: (m: moment.Moment) => string,\n  ): string {\n    if (this.hasChanged(value, omitSuffix)) {\n      this.lastTime = this.getTime(value);\n      this.lastValue = value;\n      this.lastOmitSuffix = omitSuffix;\n      this.lastLocale = this.getLocale(value);\n      this.formatFn = formatFn || this.format.bind(this);\n      this.removeTimer();\n      this.createTimer();\n      this.lastText = this.formatFn(momentConstructor(value));\n    } else {\n      this.createTimer();\n    }\n\n    return this.lastText;\n  }\n\n  ngOnDestroy(): void {\n    this.removeTimer();\n  }\n\n  private createTimer() {\n    if (this.currentTimer) {\n      return;\n    }\n\n    const momentInstance = momentConstructor(this.lastValue);\n    const timeToUpdate = this.getSecondsUntilUpdate(momentInstance) * 1000;\n\n    this.currentTimer = this.ngZone.runOutsideAngular(() => {\n      if (typeof window !== 'undefined') {\n        return window.setTimeout(() => {\n          this.lastText = this.formatFn(momentConstructor(this.lastValue));\n\n          this.currentTimer = null;\n          this.ngZone.run(() => this.cdRef.markForCheck());\n        }, timeToUpdate);\n      } else {\n        return null;\n      }\n    });\n  }\n\n  private removeTimer() {\n    if (this.currentTimer) {\n      window.clearTimeout(this.currentTimer);\n      this.currentTimer = null;\n    }\n  }\n\n  private getSecondsUntilUpdate(momentInstance: moment.Moment) {\n    const howOld = Math.abs(momentConstructor().diff(momentInstance, 'minute'));\n    if (howOld < 1) {\n      return 1;\n    } else if (howOld < 60) {\n      return 30;\n    } else if (howOld < 180) {\n      return 300;\n    } else {\n      return 3600;\n    }\n  }\n\n  private hasChanged(value: moment.MomentInput, omitSuffix?: boolean): boolean {\n    return (\n      this.getTime(value) !== this.lastTime ||\n      this.getLocale(value) !== this.lastLocale ||\n      omitSuffix !== this.lastOmitSuffix\n    );\n  }\n\n  private getTime(value: moment.MomentInput): number {\n    if (moment.isDate(value)) {\n      return value.getTime();\n    } else if (moment.isMoment(value)) {\n      return value.valueOf();\n    } else {\n      return momentConstructor(value).valueOf();\n    }\n  }\n\n  private getLocale(value: moment.MomentInput): string | null {\n    return moment.isMoment(value) ? value.locale() : moment.locale();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport * as moment from 'moment';\n\nconst momentConstructor = moment;\n\n@Pipe({ name: 'amUtc' })\nexport class UtcPipe implements PipeTransform {\n  transform(value: moment.MomentInput): moment.Moment {\n    return momentConstructor(value).utc();\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { NGX_MOMENT_OPTIONS, NgxMomentOptions } from './moment-options';\n\nimport { AddPipe } from './add.pipe';\nimport { CalendarPipe } from './calendar.pipe';\nimport { DateFormatPipe } from './date-format.pipe';\nimport { DifferencePipe } from './difference.pipe';\nimport { DurationPipe } from './duration.pipe';\nimport { FromUnixPipe } from './from-unix.pipe';\nimport { FromUtcPipe } from './from-utc.pipe';\nimport { IsAfterPipe } from './is-after.pipe';\nimport { IsBeforePipe } from './is-before.pipe';\nimport { LocalTimePipe } from './local.pipe';\nimport { LocalePipe } from './locale.pipe';\nimport { ParsePipe } from './parse.pipe';\nimport { ParseZonePipe } from './parse-zone.pipe';\nimport { SubtractPipe } from './subtract.pipe';\nimport { TimeAgoPipe } from './time-ago.pipe';\nimport { UtcPipe } from './utc.pipe';\n\nconst ANGULAR_MOMENT_PIPES = [\n  AddPipe,\n  CalendarPipe,\n  DateFormatPipe,\n  DifferencePipe,\n  DurationPipe,\n  FromUnixPipe,\n  ParsePipe,\n  SubtractPipe,\n  TimeAgoPipe,\n  UtcPipe,\n  FromUtcPipe,\n  LocalTimePipe,\n  LocalePipe,\n  ParseZonePipe,\n  IsBeforePipe,\n  IsAfterPipe,\n];\n\n@NgModule({\n  declarations: ANGULAR_MOMENT_PIPES,\n  exports: ANGULAR_MOMENT_PIPES,\n})\nexport class MomentModule {\n  static forRoot(options?: NgxMomentOptions): ModuleWithProviders<MomentModule> {\n    return {\n      ngModule: MomentModule,\n      providers: [\n        {\n          provide: NGX_MOMENT_OPTIONS,\n          useValue: {\n            ...options,\n          },\n        },\n      ],\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}