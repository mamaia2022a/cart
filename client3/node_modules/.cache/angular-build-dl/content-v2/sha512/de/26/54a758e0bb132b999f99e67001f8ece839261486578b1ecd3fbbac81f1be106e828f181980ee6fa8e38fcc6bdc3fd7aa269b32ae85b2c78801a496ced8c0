{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-radio_2.entry.js"],"names":["Radio","hostRef","r","this","ionStyle","ionFocus","ionBlur","inputId","radioButtonIds","radioGroup","checked","buttonTabindex","name","disabled","updateState","value","onFocus","emit","onBlur","ev","stopPropagation","preventDefault","el","focus","closest","a","emitStyle","color","mode","labelText","label","labelId","h","H","role","tabindex","class","c","part","htmlFor","type","id","style","ios","md","RadioGroup","ionChange","radioGroupIds","allowEmptySelection","setRadioTabindex","radios","getRadios","first","find","radio","focusable","setButtonTabindex","onClick","selectedRadio","target","currentValue","newValue","header","querySelector","Array","from","querySelectorAll","inSelectPopover","contains","filter","includes","next","index","findIndex","current","code","length","setFocus"],"mappings":"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","file":"x","sourcesContent":["import { r as registerInstance, e as createEvent, h, H as Host, i as getElement } from './index-7a8b7a1c.js';\r\nimport { b as getIonMode } from './ionic-global-63a97a32.js';\r\nimport { a as addEventListener, b as removeEventListener, d as getAriaLabel } from './helpers-dd7e4b7b.js';\r\nimport { c as createColorClasses, h as hostContext } from './theme-ff3fc52f.js';\r\n\r\nconst radioIosCss = \":host{--inner-border-radius:50%;display:inline-block;position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:2}:host(.radio-disabled){pointer-events:none}.radio-icon{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;contain:layout size style}.radio-icon,.radio-inner{-webkit-box-sizing:border-box;box-sizing:border-box}label{left:0;top:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;position:absolute;width:100%;height:100%;border:0;background:transparent;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:none;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;opacity:0}[dir=rtl] label,:host-context([dir=rtl]) label{left:unset;right:unset;right:0}label::-moz-focus-inner{border:0}input{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}:host(:focus){outline:none}:host{--color-checked:var(--ion-color-primary, #3880ff);width:15px;height:24px}:host(.ion-color.radio-checked) .radio-inner{border-color:var(--ion-color-base)}.item-radio.item-ios ion-label{margin-left:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.item-radio.item-ios ion-label{margin-left:unset;-webkit-margin-start:0;margin-inline-start:0}}.radio-inner{width:33%;height:50%}:host(.radio-checked) .radio-inner{-webkit-transform:rotate(45deg);transform:rotate(45deg);border-width:2px;border-top-width:0;border-left-width:0;border-style:solid;border-color:var(--color-checked)}:host(.radio-disabled){opacity:0.3}:host(.ion-focused) .radio-icon::after{border-radius:var(--inner-border-radius);left:-9px;top:-8px;display:block;position:absolute;width:36px;height:36px;background:var(--ion-color-primary-tint, #4c8dff);content:\\\"\\\";opacity:0.2}:host-context([dir=rtl]):host(.ion-focused) .radio-icon::after,:host-context([dir=rtl]).ion-focused .radio-icon::after{left:unset;right:unset;right:-9px}:host(.in-item){margin-left:10px;margin-right:11px;margin-top:8px;margin-bottom:8px;display:block;position:static}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.in-item){margin-left:unset;margin-right:unset;-webkit-margin-start:10px;margin-inline-start:10px;-webkit-margin-end:11px;margin-inline-end:11px}}:host(.in-item[slot=start]){margin-left:3px;margin-right:21px;margin-top:8px;margin-bottom:8px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.in-item[slot=start]){margin-left:unset;margin-right:unset;-webkit-margin-start:3px;margin-inline-start:3px;-webkit-margin-end:21px;margin-inline-end:21px}}\";\r\n\r\nconst radioMdCss = \":host{--inner-border-radius:50%;display:inline-block;position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:2}:host(.radio-disabled){pointer-events:none}.radio-icon{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;contain:layout size style}.radio-icon,.radio-inner{-webkit-box-sizing:border-box;box-sizing:border-box}label{left:0;top:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;position:absolute;width:100%;height:100%;border:0;background:transparent;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:none;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;opacity:0}[dir=rtl] label,:host-context([dir=rtl]) label{left:unset;right:unset;right:0}label::-moz-focus-inner{border:0}input{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}:host(:focus){outline:none}:host{--color:var(--ion-color-step-400, #999999);--color-checked:var(--ion-color-primary, #3880ff);--border-width:2px;--border-style:solid;--border-radius:50%;width:20px;height:20px}:host(.ion-color) .radio-inner{background:var(--ion-color-base)}:host(.ion-color.radio-checked) .radio-icon{border-color:var(--ion-color-base)}.radio-icon{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;border-radius:var(--border-radius);border-width:var(--border-width);border-style:var(--border-style);border-color:var(--color)}.radio-inner{border-radius:var(--inner-border-radius);width:calc(50% + var(--border-width));height:calc(50% + var(--border-width));-webkit-transform:scale3d(0, 0, 0);transform:scale3d(0, 0, 0);-webkit-transition:-webkit-transform 280ms cubic-bezier(0.4, 0, 0.2, 1);transition:-webkit-transform 280ms cubic-bezier(0.4, 0, 0.2, 1);transition:transform 280ms cubic-bezier(0.4, 0, 0.2, 1);transition:transform 280ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 280ms cubic-bezier(0.4, 0, 0.2, 1);background:var(--color-checked)}:host(.radio-checked) .radio-icon{border-color:var(--color-checked)}:host(.radio-checked) .radio-inner{-webkit-transform:scale3d(1, 1, 1);transform:scale3d(1, 1, 1)}:host(.radio-disabled){opacity:0.3}:host(.ion-focused) .radio-icon::after{border-radius:var(--inner-border-radius);left:-12px;top:-12px;display:block;position:absolute;width:36px;height:36px;background:var(--ion-color-primary-tint, #4c8dff);content:\\\"\\\";opacity:0.2}:host-context([dir=rtl]):host(.ion-focused) .radio-icon::after,:host-context([dir=rtl]).ion-focused .radio-icon::after{left:unset;right:unset;right:-12px}:host(.in-item){margin-left:0;margin-right:0;margin-top:9px;margin-bottom:9px;display:block;position:static}:host(.in-item[slot=start]){margin-left:4px;margin-right:36px;margin-top:11px;margin-bottom:10px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.in-item[slot=start]){margin-left:unset;margin-right:unset;-webkit-margin-start:4px;margin-inline-start:4px;-webkit-margin-end:36px;margin-inline-end:36px}}\";\r\n\r\nconst Radio = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n    this.ionStyle = createEvent(this, \"ionStyle\", 7);\r\n    this.ionFocus = createEvent(this, \"ionFocus\", 7);\r\n    this.ionBlur = createEvent(this, \"ionBlur\", 7);\r\n    this.inputId = `ion-rb-${radioButtonIds++}`;\r\n    this.radioGroup = null;\r\n    /**\r\n     * If `true`, the radio is selected.\r\n     */\r\n    this.checked = false;\r\n    /**\r\n     * The tabindex of the radio button.\r\n     * @internal\r\n     */\r\n    this.buttonTabindex = -1;\r\n    /**\r\n     * The name of the control, which is submitted with the form data.\r\n     */\r\n    this.name = this.inputId;\r\n    /**\r\n     * If `true`, the user cannot interact with the radio.\r\n     */\r\n    this.disabled = false;\r\n    this.updateState = () => {\r\n      if (this.radioGroup) {\r\n        this.checked = this.radioGroup.value === this.value;\r\n      }\r\n    };\r\n    this.onFocus = () => {\r\n      this.ionFocus.emit();\r\n    };\r\n    this.onBlur = () => {\r\n      this.ionBlur.emit();\r\n    };\r\n  }\r\n  /** @internal */\r\n  async setFocus(ev) {\r\n    ev.stopPropagation();\r\n    ev.preventDefault();\r\n    this.el.focus();\r\n  }\r\n  /** @internal */\r\n  async setButtonTabindex(value) {\r\n    this.buttonTabindex = value;\r\n  }\r\n  connectedCallback() {\r\n    if (this.value === undefined) {\r\n      this.value = this.inputId;\r\n    }\r\n    const radioGroup = this.radioGroup = this.el.closest('ion-radio-group');\r\n    if (radioGroup) {\r\n      this.updateState();\r\n      addEventListener(radioGroup, 'ionChange', this.updateState);\r\n    }\r\n  }\r\n  disconnectedCallback() {\r\n    const radioGroup = this.radioGroup;\r\n    if (radioGroup) {\r\n      removeEventListener(radioGroup, 'ionChange', this.updateState);\r\n      this.radioGroup = null;\r\n    }\r\n  }\r\n  componentWillLoad() {\r\n    this.emitStyle();\r\n  }\r\n  emitStyle() {\r\n    this.ionStyle.emit({\r\n      'radio-checked': this.checked,\r\n      'interactive-disabled': this.disabled,\r\n    });\r\n  }\r\n  render() {\r\n    const { inputId, disabled, checked, color, el, buttonTabindex } = this;\r\n    const mode = getIonMode(this);\r\n    const { label, labelId, labelText } = getAriaLabel(el, inputId);\r\n    return (h(Host, { \"aria-checked\": `${checked}`, \"aria-hidden\": disabled ? 'true' : null, \"aria-labelledby\": label ? labelId : null, role: \"radio\", tabindex: buttonTabindex, onFocus: this.onFocus, onBlur: this.onBlur, class: createColorClasses(color, {\r\n        [mode]: true,\r\n        'in-item': hostContext('ion-item', el),\r\n        'interactive': true,\r\n        'radio-checked': checked,\r\n        'radio-disabled': disabled,\r\n      }) }, h(\"div\", { class: \"radio-icon\", part: \"container\" }, h(\"div\", { class: \"radio-inner\", part: \"mark\" }), h(\"div\", { class: \"radio-ripple\" })), h(\"label\", { htmlFor: inputId }, labelText), h(\"input\", { type: \"radio\", checked: checked, disabled: disabled, tabindex: \"-1\", id: inputId })));\r\n  }\r\n  get el() { return getElement(this); }\r\n  static get watchers() { return {\r\n    \"color\": [\"emitStyle\"],\r\n    \"checked\": [\"emitStyle\"],\r\n    \"disabled\": [\"emitStyle\"]\r\n  }; }\r\n};\r\nlet radioButtonIds = 0;\r\nRadio.style = {\r\n  ios: radioIosCss,\r\n  md: radioMdCss\r\n};\r\n\r\nconst RadioGroup = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n    this.ionChange = createEvent(this, \"ionChange\", 7);\r\n    this.inputId = `ion-rg-${radioGroupIds++}`;\r\n    this.labelId = `${this.inputId}-lbl`;\r\n    /**\r\n     * If `true`, the radios can be deselected.\r\n     */\r\n    this.allowEmptySelection = false;\r\n    /**\r\n     * The name of the control, which is submitted with the form data.\r\n     */\r\n    this.name = this.inputId;\r\n    this.setRadioTabindex = (value) => {\r\n      const radios = this.getRadios();\r\n      // Get the first radio that is not disabled and the checked one\r\n      const first = radios.find(radio => !radio.disabled);\r\n      const checked = radios.find(radio => (radio.value === value && !radio.disabled));\r\n      if (!first && !checked) {\r\n        return;\r\n      }\r\n      // If an enabled checked radio exists, set it to be the focusable radio\r\n      // otherwise we default to focus the first radio\r\n      const focusable = checked || first;\r\n      for (const radio of radios) {\r\n        const tabindex = radio === focusable ? 0 : -1;\r\n        radio.setButtonTabindex(tabindex);\r\n      }\r\n    };\r\n    this.onClick = (ev) => {\r\n      ev.preventDefault();\r\n      const selectedRadio = ev.target && ev.target.closest('ion-radio');\r\n      if (selectedRadio) {\r\n        const currentValue = this.value;\r\n        const newValue = selectedRadio.value;\r\n        if (newValue !== currentValue) {\r\n          this.value = newValue;\r\n        }\r\n        else if (this.allowEmptySelection) {\r\n          this.value = undefined;\r\n        }\r\n      }\r\n    };\r\n  }\r\n  valueChanged(value) {\r\n    this.setRadioTabindex(value);\r\n    this.ionChange.emit({ value });\r\n  }\r\n  componentDidLoad() {\r\n    this.setRadioTabindex(this.value);\r\n  }\r\n  async connectedCallback() {\r\n    // Get the list header if it exists and set the id\r\n    // this is used to set aria-labelledby\r\n    const header = this.el.querySelector('ion-list-header') || this.el.querySelector('ion-item-divider');\r\n    if (header) {\r\n      const label = this.label = header.querySelector('ion-label');\r\n      if (label) {\r\n        this.labelId = label.id = this.name + '-lbl';\r\n      }\r\n    }\r\n  }\r\n  getRadios() {\r\n    return Array.from(this.el.querySelectorAll('ion-radio'));\r\n  }\r\n  onKeydown(ev) {\r\n    const inSelectPopover = !!this.el.closest('ion-select-popover');\r\n    if (ev.target && !this.el.contains(ev.target)) {\r\n      return;\r\n    }\r\n    // Get all radios inside of the radio group and then\r\n    // filter out disabled radios since we need to skip those\r\n    const radios = Array.from(this.el.querySelectorAll('ion-radio')).filter(radio => !radio.disabled);\r\n    // Only move the radio if the current focus is in the radio group\r\n    if (ev.target && radios.includes(ev.target)) {\r\n      const index = radios.findIndex(radio => radio === ev.target);\r\n      const current = radios[index];\r\n      let next;\r\n      // If hitting arrow down or arrow right, move to the next radio\r\n      // If we're on the last radio, move to the first radio\r\n      if (['ArrowDown', 'ArrowRight'].includes(ev.code)) {\r\n        next = (index === radios.length - 1)\r\n          ? radios[0]\r\n          : radios[index + 1];\r\n      }\r\n      // If hitting arrow up or arrow left, move to the previous radio\r\n      // If we're on the first radio, move to the last radio\r\n      if (['ArrowUp', 'ArrowLeft'].includes(ev.code)) {\r\n        next = (index === 0)\r\n          ? radios[radios.length - 1]\r\n          : radios[index - 1];\r\n      }\r\n      if (next && radios.includes(next)) {\r\n        next.setFocus(ev);\r\n        if (!inSelectPopover) {\r\n          this.value = next.value;\r\n        }\r\n      }\r\n      // Update the radio group value when a user presses the\r\n      // space bar on top of a selected radio\r\n      if (['Space'].includes(ev.code)) {\r\n        this.value = (this.allowEmptySelection && this.value !== undefined)\r\n          ? undefined\r\n          : current.value;\r\n        // Prevent browsers from jumping\r\n        // to the bottom of the screen\r\n        ev.preventDefault();\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    const { label, labelId } = this;\r\n    const mode = getIonMode(this);\r\n    return (h(Host, { role: \"radiogroup\", \"aria-labelledby\": label ? labelId : null, onClick: this.onClick, class: mode }));\r\n  }\r\n  get el() { return getElement(this); }\r\n  static get watchers() { return {\r\n    \"value\": [\"valueChanged\"]\r\n  }; }\r\n};\r\nlet radioGroupIds = 0;\r\n\r\nexport { Radio as ion_radio, RadioGroup as ion_radio_group };\r\n"]}