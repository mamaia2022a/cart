{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-virtual-scroll.entry.js"],"names":["createNode","el","type","template","getTemplate","ownerDocument","importNode","content","children","querySelector","calcCells","items","itemHeight","headerHeight","footerHeight","headerFn","footerFn","approxHeaderHeight","approxFooterHeight","approxItemHeight","j","offset","len","cells","end","i","item","value","push","index","height","reads","visible","VirtualScroll","hostRef","r","this","range","length","viewportHeight","virtualDom","isEnabled","viewportOffset","currentScrollTop","indexDirty","lastItemLen","totalHeight","onScroll","updateVirtualScroll","contentEl","closest","getScrollElement","scrollEl","updateState","console","error","Promise","resolve","heightIndex","cell","find","c","getHeightIndex","cellIndex","max","findIndex","dst","src","Math","scheduleUpdate","checkRange","timerUpdate","clearTimeout","undefined","readVS","bind","writeVS","topOffset","node","offsetTop","offsetParent","offsetHeight","scrollTop","vierportHeight","dirtyIndex","viewport","top","bottom","buffer","topPos","bottomPos","min","currentRange","dom","change","d","toMutate","n","pool","filter","forEach","nodeRender","updateCellHeight","child","Array","from","tagName","childrenNu","newChild","classList","add","appendChild","style","transform","remove","domRender","renderItem","update","window","getComputedStyle","parseFloat","getPropertyValue","setCellHeight","setTimeout","shouldEnable","enableScrollEvents","Infinity","calcHeightIndex","buf","Uint32Array","newBuf","set","subarray","acum","shouldListen","rmEvent","addEventListener","removeEventListener","renderHeader","renderFooter","h","H","VirtualProxy","map","renderVirtualNode","utils","vattrs","classes","Object","assign","class"],"mappings":"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","file":"x","sourcesContent":["import { r as registerInstance, f as readTask, c as writeTask, j as forceUpdate, h, H as Host, i as getElement } from './index-7a8b7a1c.js';\r\nimport { c as componentOnReady } from './helpers-dd7e4b7b.js';\r\n\r\nconst CELL_TYPE_ITEM = 'item';\r\nconst CELL_TYPE_HEADER = 'header';\r\nconst CELL_TYPE_FOOTER = 'footer';\r\nconst NODE_CHANGE_NONE = 0;\r\nconst NODE_CHANGE_POSITION = 1;\r\nconst NODE_CHANGE_CELL = 2;\r\n\r\nconst MIN_READS = 2;\r\nconst updateVDom = (dom, heightIndex, cells, range) => {\r\n  // reset dom\r\n  for (const node of dom) {\r\n    node.change = NODE_CHANGE_NONE;\r\n    node.d = true;\r\n  }\r\n  // try to match into exisiting dom\r\n  const toMutate = [];\r\n  const end = range.offset + range.length;\r\n  for (let i = range.offset; i < end; i++) {\r\n    const cell = cells[i];\r\n    const node = dom.find(n => n.d && n.cell === cell);\r\n    if (node) {\r\n      const top = heightIndex[i];\r\n      if (top !== node.top) {\r\n        node.top = top;\r\n        node.change = NODE_CHANGE_POSITION;\r\n      }\r\n      node.d = false;\r\n    }\r\n    else {\r\n      toMutate.push(cell);\r\n    }\r\n  }\r\n  // needs to append\r\n  const pool = dom.filter(n => n.d);\r\n  for (const cell of toMutate) {\r\n    const node = pool.find(n => n.d && n.cell.type === cell.type);\r\n    const index = cell.i;\r\n    if (node) {\r\n      node.d = false;\r\n      node.change = NODE_CHANGE_CELL;\r\n      node.cell = cell;\r\n      node.top = heightIndex[index];\r\n    }\r\n    else {\r\n      dom.push({\r\n        d: false,\r\n        cell,\r\n        visible: true,\r\n        change: NODE_CHANGE_CELL,\r\n        top: heightIndex[index],\r\n      });\r\n    }\r\n  }\r\n  dom\r\n    .filter(n => n.d && n.top !== -9999)\r\n    .forEach(n => {\r\n    n.change = NODE_CHANGE_POSITION;\r\n    n.top = -9999;\r\n  });\r\n};\r\nconst doRender = (el, nodeRender, dom, updateCellHeight) => {\r\n  const children = Array.from(el.children).filter(n => n.tagName !== 'TEMPLATE');\r\n  const childrenNu = children.length;\r\n  let child;\r\n  for (let i = 0; i < dom.length; i++) {\r\n    const node = dom[i];\r\n    const cell = node.cell;\r\n    // the cell change, the content must be updated\r\n    if (node.change === NODE_CHANGE_CELL) {\r\n      if (i < childrenNu) {\r\n        child = children[i];\r\n        nodeRender(child, cell, i);\r\n      }\r\n      else {\r\n        const newChild = createNode(el, cell.type);\r\n        child = nodeRender(newChild, cell, i) || newChild;\r\n        child.classList.add('virtual-item');\r\n        el.appendChild(child);\r\n      }\r\n      child['$ionCell'] = cell;\r\n    }\r\n    else {\r\n      child = children[i];\r\n    }\r\n    // only update position when it changes\r\n    if (node.change !== NODE_CHANGE_NONE) {\r\n      child.style.transform = `translate3d(0,${node.top}px,0)`;\r\n    }\r\n    // update visibility\r\n    const visible = cell.visible;\r\n    if (node.visible !== visible) {\r\n      if (visible) {\r\n        child.classList.remove('virtual-loading');\r\n      }\r\n      else {\r\n        child.classList.add('virtual-loading');\r\n      }\r\n      node.visible = visible;\r\n    }\r\n    // dynamic height\r\n    if (cell.reads > 0) {\r\n      updateCellHeight(cell, child);\r\n      cell.reads--;\r\n    }\r\n  }\r\n};\r\nconst createNode = (el, type) => {\r\n  const template = getTemplate(el, type);\r\n  if (template && el.ownerDocument) {\r\n    return el.ownerDocument.importNode(template.content, true).children[0];\r\n  }\r\n  return null;\r\n};\r\nconst getTemplate = (el, type) => {\r\n  switch (type) {\r\n    case CELL_TYPE_ITEM: return el.querySelector('template:not([name])');\r\n    case CELL_TYPE_HEADER: return el.querySelector('template[name=header]');\r\n    case CELL_TYPE_FOOTER: return el.querySelector('template[name=footer]');\r\n  }\r\n};\r\nconst getViewport = (scrollTop, vierportHeight, margin) => {\r\n  return {\r\n    top: Math.max(scrollTop - margin, 0),\r\n    bottom: scrollTop + vierportHeight + margin\r\n  };\r\n};\r\nconst getRange = (heightIndex, viewport, buffer) => {\r\n  const topPos = viewport.top;\r\n  const bottomPos = viewport.bottom;\r\n  // find top index\r\n  let i = 0;\r\n  for (; i < heightIndex.length; i++) {\r\n    if (heightIndex[i] > topPos) {\r\n      break;\r\n    }\r\n  }\r\n  const offset = Math.max(i - buffer - 1, 0);\r\n  // find bottom index\r\n  for (; i < heightIndex.length; i++) {\r\n    if (heightIndex[i] >= bottomPos) {\r\n      break;\r\n    }\r\n  }\r\n  const end = Math.min(i + buffer, heightIndex.length);\r\n  const length = end - offset;\r\n  return { offset, length };\r\n};\r\nconst getShouldUpdate = (dirtyIndex, currentRange, range) => {\r\n  const end = range.offset + range.length;\r\n  return (dirtyIndex <= end ||\r\n    currentRange.offset !== range.offset ||\r\n    currentRange.length !== range.length);\r\n};\r\nconst findCellIndex = (cells, index) => {\r\n  const max = cells.length > 0 ? cells[cells.length - 1].index : 0;\r\n  if (index === 0) {\r\n    return 0;\r\n  }\r\n  else if (index === max + 1) {\r\n    return cells.length;\r\n  }\r\n  else {\r\n    return cells.findIndex(c => c.index === index);\r\n  }\r\n};\r\nconst inplaceUpdate = (dst, src, offset) => {\r\n  if (offset === 0 && src.length >= dst.length) {\r\n    return src;\r\n  }\r\n  for (let i = 0; i < src.length; i++) {\r\n    dst[i + offset] = src[i];\r\n  }\r\n  return dst;\r\n};\r\nconst calcCells = (items, itemHeight, headerHeight, footerHeight, headerFn, footerFn, approxHeaderHeight, approxFooterHeight, approxItemHeight, j, offset, len) => {\r\n  const cells = [];\r\n  const end = len + offset;\r\n  for (let i = offset; i < end; i++) {\r\n    const item = items[i];\r\n    if (headerFn) {\r\n      const value = headerFn(item, i, items);\r\n      if (value != null) {\r\n        cells.push({\r\n          i: j++,\r\n          type: CELL_TYPE_HEADER,\r\n          value,\r\n          index: i,\r\n          height: headerHeight ? headerHeight(value, i) : approxHeaderHeight,\r\n          reads: headerHeight ? 0 : MIN_READS,\r\n          visible: !!headerHeight,\r\n        });\r\n      }\r\n    }\r\n    cells.push({\r\n      i: j++,\r\n      type: CELL_TYPE_ITEM,\r\n      value: item,\r\n      index: i,\r\n      height: itemHeight ? itemHeight(item, i) : approxItemHeight,\r\n      reads: itemHeight ? 0 : MIN_READS,\r\n      visible: !!itemHeight,\r\n    });\r\n    if (footerFn) {\r\n      const value = footerFn(item, i, items);\r\n      if (value != null) {\r\n        cells.push({\r\n          i: j++,\r\n          type: CELL_TYPE_FOOTER,\r\n          value,\r\n          index: i,\r\n          height: footerHeight ? footerHeight(value, i) : approxFooterHeight,\r\n          reads: footerHeight ? 0 : MIN_READS,\r\n          visible: !!footerHeight,\r\n        });\r\n      }\r\n    }\r\n  }\r\n  return cells;\r\n};\r\nconst calcHeightIndex = (buf, cells, index) => {\r\n  let acum = buf[index];\r\n  for (let i = index; i < buf.length; i++) {\r\n    buf[i] = acum;\r\n    acum += cells[i].height;\r\n  }\r\n  return acum;\r\n};\r\nconst resizeBuffer = (buf, len) => {\r\n  if (!buf) {\r\n    return new Uint32Array(len);\r\n  }\r\n  if (buf.length === len) {\r\n    return buf;\r\n  }\r\n  else if (len > buf.length) {\r\n    const newBuf = new Uint32Array(len);\r\n    newBuf.set(buf);\r\n    return newBuf;\r\n  }\r\n  else {\r\n    return buf.subarray(0, len);\r\n  }\r\n};\r\nconst positionForIndex = (index, cells, heightIndex) => {\r\n  const cell = cells.find(c => c.type === CELL_TYPE_ITEM && c.index === index);\r\n  if (cell) {\r\n    return heightIndex[cell.i];\r\n  }\r\n  return -1;\r\n};\r\n\r\nconst virtualScrollCss = \"ion-virtual-scroll{display:block;position:relative;width:100%;contain:strict;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}ion-virtual-scroll>.virtual-loading{opacity:0}ion-virtual-scroll>.virtual-item{position:absolute !important;top:0 !important;right:0 !important;left:0 !important;-webkit-transition-duration:0ms;transition-duration:0ms;will-change:transform}\";\r\n\r\nconst VirtualScroll = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n    this.range = { offset: 0, length: 0 };\r\n    this.viewportHeight = 0;\r\n    this.cells = [];\r\n    this.virtualDom = [];\r\n    this.isEnabled = false;\r\n    this.viewportOffset = 0;\r\n    this.currentScrollTop = 0;\r\n    this.indexDirty = 0;\r\n    this.lastItemLen = 0;\r\n    this.totalHeight = 0;\r\n    /**\r\n     * It is important to provide this\r\n     * if virtual item height will be significantly larger than the default\r\n     * The approximate height of each virtual item template's cell.\r\n     * This dimension is used to help determine how many cells should\r\n     * be created when initialized, and to help calculate the height of\r\n     * the scrollable area. This height value can only use `px` units.\r\n     * Note that the actual rendered size of each cell comes from the\r\n     * app's CSS, whereas this approximation is used to help calculate\r\n     * initial dimensions before the item has been rendered.\r\n     */\r\n    this.approxItemHeight = 45;\r\n    /**\r\n     * The approximate height of each header template's cell.\r\n     * This dimension is used to help determine how many cells should\r\n     * be created when initialized, and to help calculate the height of\r\n     * the scrollable area. This height value can only use `px` units.\r\n     * Note that the actual rendered size of each cell comes from the\r\n     * app's CSS, whereas this approximation is used to help calculate\r\n     * initial dimensions before the item has been rendered.\r\n     */\r\n    this.approxHeaderHeight = 30;\r\n    /**\r\n     * The approximate width of each footer template's cell.\r\n     * This dimension is used to help determine how many cells should\r\n     * be created when initialized, and to help calculate the height of\r\n     * the scrollable area. This height value can only use `px` units.\r\n     * Note that the actual rendered size of each cell comes from the\r\n     * app's CSS, whereas this approximation is used to help calculate\r\n     * initial dimensions before the item has been rendered.\r\n     */\r\n    this.approxFooterHeight = 30;\r\n    this.onScroll = () => {\r\n      this.updateVirtualScroll();\r\n    };\r\n  }\r\n  itemsChanged() {\r\n    this.calcCells();\r\n    this.updateVirtualScroll();\r\n  }\r\n  async connectedCallback() {\r\n    const contentEl = this.el.closest('ion-content');\r\n    if (!contentEl) {\r\n      console.error('<ion-virtual-scroll> must be used inside an <ion-content>');\r\n      return;\r\n    }\r\n    this.scrollEl = await contentEl.getScrollElement();\r\n    this.contentEl = contentEl;\r\n    this.calcCells();\r\n    this.updateState();\r\n  }\r\n  componentDidUpdate() {\r\n    this.updateState();\r\n  }\r\n  disconnectedCallback() {\r\n    this.scrollEl = undefined;\r\n  }\r\n  onResize() {\r\n    this.calcCells();\r\n    this.updateVirtualScroll();\r\n  }\r\n  /**\r\n   * Returns the position of the virtual item at the given index.\r\n   */\r\n  positionForItem(index) {\r\n    return Promise.resolve(positionForIndex(index, this.cells, this.getHeightIndex()));\r\n  }\r\n  /**\r\n   * This method marks a subset of items as dirty, so they can be re-rendered. Items should be marked as\r\n   * dirty any time the content or their style changes.\r\n   *\r\n   * The subset of items to be updated can are specifing by an offset and a length.\r\n   */\r\n  async checkRange(offset, len = -1) {\r\n    // TODO: kind of hacky how we do in-place updated of the cells\r\n    // array. this part needs a complete refactor\r\n    if (!this.items) {\r\n      return;\r\n    }\r\n    const length = (len === -1)\r\n      ? this.items.length - offset\r\n      : len;\r\n    const cellIndex = findCellIndex(this.cells, offset);\r\n    const cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, cellIndex, offset, length);\r\n    this.cells = inplaceUpdate(this.cells, cells, cellIndex);\r\n    this.lastItemLen = this.items.length;\r\n    this.indexDirty = Math.max(offset - 1, 0);\r\n    this.scheduleUpdate();\r\n  }\r\n  /**\r\n   * This method marks the tail the items array as dirty, so they can be re-rendered.\r\n   *\r\n   * It's equivalent to calling:\r\n   *\r\n   * ```js\r\n   * virtualScroll.checkRange(lastItemLen);\r\n   * ```\r\n   */\r\n  async checkEnd() {\r\n    if (this.items) {\r\n      this.checkRange(this.lastItemLen);\r\n    }\r\n  }\r\n  updateVirtualScroll() {\r\n    // do nothing if virtual-scroll is disabled\r\n    if (!this.isEnabled || !this.scrollEl) {\r\n      return;\r\n    }\r\n    // unschedule future updates\r\n    if (this.timerUpdate) {\r\n      clearTimeout(this.timerUpdate);\r\n      this.timerUpdate = undefined;\r\n    }\r\n    // schedule DOM operations into the stencil queue\r\n    readTask(this.readVS.bind(this));\r\n    writeTask(this.writeVS.bind(this));\r\n  }\r\n  readVS() {\r\n    const { contentEl, scrollEl, el } = this;\r\n    let topOffset = 0;\r\n    let node = el;\r\n    while (node && node !== contentEl) {\r\n      topOffset += node.offsetTop;\r\n      node = node.offsetParent;\r\n    }\r\n    this.viewportOffset = topOffset;\r\n    if (scrollEl) {\r\n      this.viewportHeight = scrollEl.offsetHeight;\r\n      this.currentScrollTop = scrollEl.scrollTop;\r\n    }\r\n  }\r\n  writeVS() {\r\n    const dirtyIndex = this.indexDirty;\r\n    // get visible viewport\r\n    const scrollTop = this.currentScrollTop - this.viewportOffset;\r\n    const viewport = getViewport(scrollTop, this.viewportHeight, 100);\r\n    // compute lazily the height index\r\n    const heightIndex = this.getHeightIndex();\r\n    // get array bounds of visible cells base in the viewport\r\n    const range = getRange(heightIndex, viewport, 2);\r\n    // fast path, do nothing\r\n    const shouldUpdate = getShouldUpdate(dirtyIndex, this.range, range);\r\n    if (!shouldUpdate) {\r\n      return;\r\n    }\r\n    this.range = range;\r\n    // in place mutation of the virtual DOM\r\n    updateVDom(this.virtualDom, heightIndex, this.cells, range);\r\n    // Write DOM\r\n    // Different code paths taken depending of the render API used\r\n    if (this.nodeRender) {\r\n      doRender(this.el, this.nodeRender, this.virtualDom, this.updateCellHeight.bind(this));\r\n    }\r\n    else if (this.domRender) {\r\n      this.domRender(this.virtualDom);\r\n    }\r\n    else if (this.renderItem) {\r\n      forceUpdate(this);\r\n    }\r\n  }\r\n  updateCellHeight(cell, node) {\r\n    const update = () => {\r\n      if (node['$ionCell'] === cell) {\r\n        const style = window.getComputedStyle(node);\r\n        const height = node.offsetHeight + parseFloat(style.getPropertyValue('margin-bottom'));\r\n        this.setCellHeight(cell, height);\r\n      }\r\n    };\r\n    if (node) {\r\n      componentOnReady(node, update);\r\n    }\r\n    else {\r\n      update();\r\n    }\r\n  }\r\n  setCellHeight(cell, height) {\r\n    const index = cell.i;\r\n    // the cell might changed since the height update was scheduled\r\n    if (cell !== this.cells[index]) {\r\n      return;\r\n    }\r\n    if (cell.height !== height || cell.visible !== true) {\r\n      cell.visible = true;\r\n      cell.height = height;\r\n      this.indexDirty = Math.min(this.indexDirty, index);\r\n      this.scheduleUpdate();\r\n    }\r\n  }\r\n  scheduleUpdate() {\r\n    clearTimeout(this.timerUpdate);\r\n    this.timerUpdate = setTimeout(() => this.updateVirtualScroll(), 100);\r\n  }\r\n  updateState() {\r\n    const shouldEnable = !!(this.scrollEl &&\r\n      this.cells);\r\n    if (shouldEnable !== this.isEnabled) {\r\n      this.enableScrollEvents(shouldEnable);\r\n      if (shouldEnable) {\r\n        this.updateVirtualScroll();\r\n      }\r\n    }\r\n  }\r\n  calcCells() {\r\n    if (!this.items) {\r\n      return;\r\n    }\r\n    this.lastItemLen = this.items.length;\r\n    this.cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, 0, 0, this.lastItemLen);\r\n    this.indexDirty = 0;\r\n  }\r\n  getHeightIndex() {\r\n    if (this.indexDirty !== Infinity) {\r\n      this.calcHeightIndex(this.indexDirty);\r\n    }\r\n    return this.heightIndex;\r\n  }\r\n  calcHeightIndex(index = 0) {\r\n    // TODO: optimize, we don't need to calculate all the cells\r\n    this.heightIndex = resizeBuffer(this.heightIndex, this.cells.length);\r\n    this.totalHeight = calcHeightIndex(this.heightIndex, this.cells, index);\r\n    this.indexDirty = Infinity;\r\n  }\r\n  enableScrollEvents(shouldListen) {\r\n    if (this.rmEvent) {\r\n      this.rmEvent();\r\n      this.rmEvent = undefined;\r\n    }\r\n    const scrollEl = this.scrollEl;\r\n    if (scrollEl) {\r\n      this.isEnabled = shouldListen;\r\n      scrollEl.addEventListener('scroll', this.onScroll);\r\n      this.rmEvent = () => {\r\n        scrollEl.removeEventListener('scroll', this.onScroll);\r\n      };\r\n    }\r\n  }\r\n  renderVirtualNode(node) {\r\n    const { type, value, index } = node.cell;\r\n    switch (type) {\r\n      case CELL_TYPE_ITEM: return this.renderItem(value, index);\r\n      case CELL_TYPE_HEADER: return this.renderHeader(value, index);\r\n      case CELL_TYPE_FOOTER: return this.renderFooter(value, index);\r\n    }\r\n  }\r\n  render() {\r\n    return (h(Host, { style: {\r\n        height: `${this.totalHeight}px`\r\n      } }, this.renderItem && (h(VirtualProxy, { dom: this.virtualDom }, this.virtualDom.map(node => this.renderVirtualNode(node))))));\r\n  }\r\n  get el() { return getElement(this); }\r\n  static get watchers() { return {\r\n    \"itemHeight\": [\"itemsChanged\"],\r\n    \"headerHeight\": [\"itemsChanged\"],\r\n    \"footerHeight\": [\"itemsChanged\"],\r\n    \"items\": [\"itemsChanged\"]\r\n  }; }\r\n};\r\nconst VirtualProxy = ({ dom }, children, utils) => {\r\n  return utils.map(children, (child, i) => {\r\n    const node = dom[i];\r\n    const vattrs = child.vattrs || {};\r\n    let classes = vattrs.class || '';\r\n    classes += 'virtual-item ';\r\n    if (!node.visible) {\r\n      classes += 'virtual-loading';\r\n    }\r\n    return Object.assign(Object.assign({}, child), { vattrs: Object.assign(Object.assign({}, vattrs), { class: classes, style: Object.assign(Object.assign({}, vattrs.style), { transform: `translate3d(0,${node.top}px,0)` }) }) });\r\n  });\r\n};\r\nVirtualScroll.style = virtualScrollCss;\r\n\r\nexport { VirtualScroll as ion_virtual_scroll };\r\n"]}