{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-route_4.entry.js"],"names":["Route","hostRef","r","this","ionRouteDataChanged","url","newValue","emit","oldValue","keys1","Object","keys","keys2","length","key","onUpdate","RouteRedirect","ionRouteRedirectChanged","generatePath","segments","filter","s","join","parsePath","path","split","map","trim","writeNavState","async","root","chain","direction","index","changed","animation","outlet","searchNavNode","Promise","resolve","c","route","setRouteId","id","params","result","element","markVisible","console","error","e","QUERY","matches","querySelector","routeRedirect","routes","find","input","from","i","expected","matchesIDs","ids","len","Math","min","toLowerCase","matchesPath","inputPath","allparams","RouterSegments","matchesDefault","segment","data","next","slice","mergeParams","beforeEnter","beforeLeave","a","b","assign","routerPathToChain","chains","match","matchedChain","score","computePriority","level","pow","f","shift","readRedirects","Array","children","el","tagName","to","readProp","readRoutes","flattenRouterTree","readRouteNodes","node","component","Error","componentProps","prop","hasAttribute","getAttribute","nodes","flattenNode","push","Router","ionRouteWillChange","ionRouteDidChange","previousPath","busy","state","lastState","useHash","debug","document","body","window","addEventListener","once","onRoutesChanged","onRedirectChanged","bind","historyDirection","getPath","runGuards","canProceed","redirect","writeNavStateRoot","ev","detail","register","processNextHandler","back","startsWith","URL","location","href","pathname","queryString","setPath","history","waitPromise","group","forEach","groupEnd","redirects","warn","getRouteId","maxMatches","plainIDs","param","safeWriteNavState","win","replaceState","title","redirectFrom","lock","unlock","p","toChain","fromChain","beforeEnterHook","beforeLeaveHook","canLeave","canEnter","routeEvent","routeChangeEvent","pushState","loc","hash","prefix","redirectFromPath","redirectedFrom","RouterLink","routerDirection","onClick","o","routerAnimation","mode","attrs","rel","target","h","H","class","color","style"],"mappings":"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","file":"x","sourcesContent":["import { r as registerInstance, e as createEvent, i as getElement, h, H as Host } from './index-7a8b7a1c.js';\r\nimport { c as componentOnReady, n as debounce } from './helpers-dd7e4b7b.js';\r\nimport { b as getIonMode } from './ionic-global-63a97a32.js';\r\nimport { o as openURL, c as createColorClasses } from './theme-ff3fc52f.js';\r\n\r\nconst Route = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n    this.ionRouteDataChanged = createEvent(this, \"ionRouteDataChanged\", 7);\r\n    /**\r\n     * Relative path that needs to match in order for this route to apply.\r\n     *\r\n     * Accepts paths similar to expressjs so that you can define parameters\r\n     * in the url /foo/:bar where bar would be available in incoming props.\r\n     */\r\n    this.url = '';\r\n  }\r\n  onUpdate(newValue) {\r\n    this.ionRouteDataChanged.emit(newValue);\r\n  }\r\n  onComponentProps(newValue, oldValue) {\r\n    if (newValue === oldValue) {\r\n      return;\r\n    }\r\n    const keys1 = newValue ? Object.keys(newValue) : [];\r\n    const keys2 = oldValue ? Object.keys(oldValue) : [];\r\n    if (keys1.length !== keys2.length) {\r\n      this.onUpdate(newValue);\r\n      return;\r\n    }\r\n    for (const key of keys1) {\r\n      if (newValue[key] !== oldValue[key]) {\r\n        this.onUpdate(newValue);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n  connectedCallback() {\r\n    this.ionRouteDataChanged.emit();\r\n  }\r\n  static get watchers() { return {\r\n    \"url\": [\"onUpdate\"],\r\n    \"component\": [\"onUpdate\"],\r\n    \"componentProps\": [\"onComponentProps\"]\r\n  }; }\r\n};\r\n\r\nconst RouteRedirect = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n    this.ionRouteRedirectChanged = createEvent(this, \"ionRouteRedirectChanged\", 7);\r\n  }\r\n  propDidChange() {\r\n    this.ionRouteRedirectChanged.emit();\r\n  }\r\n  connectedCallback() {\r\n    this.ionRouteRedirectChanged.emit();\r\n  }\r\n  static get watchers() { return {\r\n    \"from\": [\"propDidChange\"],\r\n    \"to\": [\"propDidChange\"]\r\n  }; }\r\n};\r\n\r\nconst ROUTER_INTENT_NONE = 'root';\r\nconst ROUTER_INTENT_FORWARD = 'forward';\r\nconst ROUTER_INTENT_BACK = 'back';\r\n\r\nconst generatePath = (segments) => {\r\n  const path = segments\r\n    .filter(s => s.length > 0)\r\n    .join('/');\r\n  return '/' + path;\r\n};\r\nconst chainToPath = (chain) => {\r\n  const path = [];\r\n  for (const route of chain) {\r\n    for (const segment of route.path) {\r\n      if (segment[0] === ':') {\r\n        const param = route.params && route.params[segment.slice(1)];\r\n        if (!param) {\r\n          return null;\r\n        }\r\n        path.push(param);\r\n      }\r\n      else if (segment !== '') {\r\n        path.push(segment);\r\n      }\r\n    }\r\n  }\r\n  return path;\r\n};\r\nconst writePath = (history, root, useHash, path, direction, state, queryString) => {\r\n  let url = generatePath([\r\n    ...parsePath(root),\r\n    ...path\r\n  ]);\r\n  if (useHash) {\r\n    url = '#' + url;\r\n  }\r\n  if (queryString !== undefined) {\r\n    url = url + '?' + queryString;\r\n  }\r\n  if (direction === ROUTER_INTENT_FORWARD) {\r\n    history.pushState(state, '', url);\r\n  }\r\n  else {\r\n    history.replaceState(state, '', url);\r\n  }\r\n};\r\nconst removePrefix = (prefix, path) => {\r\n  if (prefix.length > path.length) {\r\n    return null;\r\n  }\r\n  if (prefix.length <= 1 && prefix[0] === '') {\r\n    return path;\r\n  }\r\n  for (let i = 0; i < prefix.length; i++) {\r\n    if (prefix[i].length > 0 && prefix[i] !== path[i]) {\r\n      return null;\r\n    }\r\n  }\r\n  if (path.length === prefix.length) {\r\n    return [''];\r\n  }\r\n  return path.slice(prefix.length);\r\n};\r\nconst readPath = (loc, root, useHash) => {\r\n  let pathname = loc.pathname;\r\n  if (useHash) {\r\n    const hash = loc.hash;\r\n    pathname = (hash[0] === '#')\r\n      ? hash.slice(1)\r\n      : '';\r\n  }\r\n  const prefix = parsePath(root);\r\n  const path = parsePath(pathname);\r\n  return removePrefix(prefix, path);\r\n};\r\nconst parsePath = (path) => {\r\n  if (path == null) {\r\n    return [''];\r\n  }\r\n  const removeQueryString = path.split('?')[0];\r\n  const segments = removeQueryString.split('/')\r\n    .map(s => s.trim())\r\n    .filter(s => s.length > 0);\r\n  if (segments.length === 0) {\r\n    return [''];\r\n  }\r\n  else {\r\n    return segments;\r\n  }\r\n};\r\n\r\nconst printRoutes = (routes) => {\r\n  console.group(`[ion-core] ROUTES[${routes.length}]`);\r\n  for (const chain of routes) {\r\n    const path = [];\r\n    chain.forEach(r => path.push(...r.path));\r\n    const ids = chain.map(r => r.id);\r\n    console.debug(`%c ${generatePath(path)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\r\n  }\r\n  console.groupEnd();\r\n};\r\nconst printRedirects = (redirects) => {\r\n  console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\r\n  for (const redirect of redirects) {\r\n    if (redirect.to) {\r\n      console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to)}`, 'font-weight: bold');\r\n    }\r\n  }\r\n  console.groupEnd();\r\n};\r\n\r\nconst writeNavState = async (root, chain, direction, index, changed = false, animation) => {\r\n  try {\r\n    // find next navigation outlet in the DOM\r\n    const outlet = searchNavNode(root);\r\n    // make sure we can continue interacting the DOM, otherwise abort\r\n    if (index >= chain.length || !outlet) {\r\n      return changed;\r\n    }\r\n    await new Promise(resolve => componentOnReady(outlet, resolve));\r\n    const route = chain[index];\r\n    const result = await outlet.setRouteId(route.id, route.params, direction, animation);\r\n    // if the outlet changed the page, reset navigation to neutral (no direction)\r\n    // this means nested outlets will not animate\r\n    if (result.changed) {\r\n      direction = ROUTER_INTENT_NONE;\r\n      changed = true;\r\n    }\r\n    // recursively set nested outlets\r\n    changed = await writeNavState(result.element, chain, direction, index + 1, changed, animation);\r\n    // once all nested outlets are visible let's make the parent visible too,\r\n    // using markVisible prevents flickering\r\n    if (result.markVisible) {\r\n      await result.markVisible();\r\n    }\r\n    return changed;\r\n  }\r\n  catch (e) {\r\n    console.error(e);\r\n    return false;\r\n  }\r\n};\r\nconst readNavState = async (root) => {\r\n  const ids = [];\r\n  let outlet;\r\n  let node = root;\r\n  // tslint:disable-next-line:no-constant-condition\r\n  while (true) {\r\n    outlet = searchNavNode(node);\r\n    if (outlet) {\r\n      const id = await outlet.getRouteId();\r\n      if (id) {\r\n        node = id.element;\r\n        id.element = undefined;\r\n        ids.push(id);\r\n      }\r\n      else {\r\n        break;\r\n      }\r\n    }\r\n    else {\r\n      break;\r\n    }\r\n  }\r\n  return { ids, outlet };\r\n};\r\nconst waitUntilNavNode = () => {\r\n  if (searchNavNode(document.body)) {\r\n    return Promise.resolve();\r\n  }\r\n  return new Promise(resolve => {\r\n    window.addEventListener('ionNavWillLoad', resolve, { once: true });\r\n  });\r\n};\r\nconst QUERY = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\r\nconst searchNavNode = (root) => {\r\n  if (!root) {\r\n    return undefined;\r\n  }\r\n  if (root.matches(QUERY)) {\r\n    return root;\r\n  }\r\n  const outlet = root.querySelector(QUERY);\r\n  return outlet ? outlet : undefined;\r\n};\r\n\r\nconst matchesRedirect = (input, route) => {\r\n  const { from, to } = route;\r\n  if (to === undefined) {\r\n    return false;\r\n  }\r\n  if (from.length > input.length) {\r\n    return false;\r\n  }\r\n  for (let i = 0; i < from.length; i++) {\r\n    const expected = from[i];\r\n    if (expected === '*') {\r\n      return true;\r\n    }\r\n    if (expected !== input[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return from.length === input.length;\r\n};\r\nconst routeRedirect = (path, routes) => {\r\n  return routes.find(route => matchesRedirect(path, route));\r\n};\r\nconst matchesIDs = (ids, chain) => {\r\n  const len = Math.min(ids.length, chain.length);\r\n  let i = 0;\r\n  for (; i < len; i++) {\r\n    if (ids[i].toLowerCase() !== chain[i].id) {\r\n      break;\r\n    }\r\n  }\r\n  return i;\r\n};\r\nconst matchesPath = (inputPath, chain) => {\r\n  const segments = new RouterSegments(inputPath);\r\n  let matchesDefault = false;\r\n  let allparams;\r\n  for (let i = 0; i < chain.length; i++) {\r\n    const path = chain[i].path;\r\n    if (path[0] === '') {\r\n      matchesDefault = true;\r\n    }\r\n    else {\r\n      for (const segment of path) {\r\n        const data = segments.next();\r\n        // data param\r\n        if (segment[0] === ':') {\r\n          if (data === '') {\r\n            return null;\r\n          }\r\n          allparams = allparams || [];\r\n          const params = allparams[i] || (allparams[i] = {});\r\n          params[segment.slice(1)] = data;\r\n        }\r\n        else if (data !== segment) {\r\n          return null;\r\n        }\r\n      }\r\n      matchesDefault = false;\r\n    }\r\n  }\r\n  const matches = (matchesDefault)\r\n    ? matchesDefault === (segments.next() === '')\r\n    : true;\r\n  if (!matches) {\r\n    return null;\r\n  }\r\n  if (allparams) {\r\n    return chain.map((route, i) => ({\r\n      id: route.id,\r\n      path: route.path,\r\n      params: mergeParams(route.params, allparams[i]),\r\n      beforeEnter: route.beforeEnter,\r\n      beforeLeave: route.beforeLeave\r\n    }));\r\n  }\r\n  return chain;\r\n};\r\n// Merges the route parameter objects.\r\n// Returns undefined when both parameters are undefined.\r\nconst mergeParams = (a, b) => {\r\n  return a || b ? Object.assign(Object.assign({}, a), b) : undefined;\r\n};\r\nconst routerIDsToChain = (ids, chains) => {\r\n  let match = null;\r\n  let maxMatches = 0;\r\n  const plainIDs = ids.map(i => i.id);\r\n  for (const chain of chains) {\r\n    const score = matchesIDs(plainIDs, chain);\r\n    if (score > maxMatches) {\r\n      match = chain;\r\n      maxMatches = score;\r\n    }\r\n  }\r\n  if (match) {\r\n    return match.map((route, i) => ({\r\n      id: route.id,\r\n      path: route.path,\r\n      params: mergeParams(route.params, ids[i] && ids[i].params)\r\n    }));\r\n  }\r\n  return null;\r\n};\r\nconst routerPathToChain = (path, chains) => {\r\n  let match = null;\r\n  let matches = 0;\r\n  for (const chain of chains) {\r\n    const matchedChain = matchesPath(path, chain);\r\n    if (matchedChain !== null) {\r\n      const score = computePriority(matchedChain);\r\n      if (score > matches) {\r\n        matches = score;\r\n        match = matchedChain;\r\n      }\r\n    }\r\n  }\r\n  return match;\r\n};\r\nconst computePriority = (chain) => {\r\n  let score = 1;\r\n  let level = 1;\r\n  for (const route of chain) {\r\n    for (const path of route.path) {\r\n      if (path[0] === ':') {\r\n        score += Math.pow(1, level);\r\n      }\r\n      else if (path !== '') {\r\n        score += Math.pow(2, level);\r\n      }\r\n      level++;\r\n    }\r\n  }\r\n  return score;\r\n};\r\nclass RouterSegments {\r\n  constructor(path) {\r\n    this.path = path.slice();\r\n  }\r\n  next() {\r\n    if (this.path.length > 0) {\r\n      return this.path.shift();\r\n    }\r\n    return '';\r\n  }\r\n}\r\n\r\nconst readRedirects = (root) => {\r\n  return Array.from(root.children)\r\n    .filter(el => el.tagName === 'ION-ROUTE-REDIRECT')\r\n    .map(el => {\r\n    const to = readProp(el, 'to');\r\n    return {\r\n      from: parsePath(readProp(el, 'from')),\r\n      to: to == null ? undefined : parsePath(to),\r\n    };\r\n  });\r\n};\r\nconst readRoutes = (root) => {\r\n  return flattenRouterTree(readRouteNodes(root));\r\n};\r\nconst readRouteNodes = (root, node = root) => {\r\n  return Array.from(node.children)\r\n    .filter(el => el.tagName === 'ION-ROUTE' && el.component)\r\n    .map(el => {\r\n    const component = readProp(el, 'component');\r\n    if (component == null) {\r\n      throw new Error('component missing in ion-route');\r\n    }\r\n    return {\r\n      path: parsePath(readProp(el, 'url')),\r\n      id: component.toLowerCase(),\r\n      params: el.componentProps,\r\n      beforeLeave: el.beforeLeave,\r\n      beforeEnter: el.beforeEnter,\r\n      children: readRouteNodes(root, el)\r\n    };\r\n  });\r\n};\r\nconst readProp = (el, prop) => {\r\n  if (prop in el) {\r\n    return el[prop];\r\n  }\r\n  if (el.hasAttribute(prop)) {\r\n    return el.getAttribute(prop);\r\n  }\r\n  return null;\r\n};\r\nconst flattenRouterTree = (nodes) => {\r\n  const routes = [];\r\n  for (const node of nodes) {\r\n    flattenNode([], routes, node);\r\n  }\r\n  return routes;\r\n};\r\nconst flattenNode = (chain, routes, node) => {\r\n  const s = chain.slice();\r\n  s.push({\r\n    id: node.id,\r\n    path: node.path,\r\n    params: node.params,\r\n    beforeLeave: node.beforeLeave,\r\n    beforeEnter: node.beforeEnter\r\n  });\r\n  if (node.children.length === 0) {\r\n    routes.push(s);\r\n    return;\r\n  }\r\n  for (const sub of node.children) {\r\n    flattenNode(s, routes, sub);\r\n  }\r\n};\r\n\r\nconst Router = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n    this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\r\n    this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\r\n    this.previousPath = null;\r\n    this.busy = false;\r\n    this.state = 0;\r\n    this.lastState = 0;\r\n    /**\r\n     * By default `ion-router` will match the routes at the root path (\"/\").\r\n     * That can be changed when\r\n     *\r\n     */\r\n    this.root = '/';\r\n    /**\r\n     * The router can work in two \"modes\":\r\n     * - With hash: `/index.html#/path/to/page`\r\n     * - Without hash: `/path/to/page`\r\n     *\r\n     * Using one or another might depend in the requirements of your app and/or where it's deployed.\r\n     *\r\n     * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\r\n     * requires additional server-side configuration in order to properly work.\r\n     *\r\n     * On the otherside hash-navigation is much easier to deploy, it even works over the file protocol.\r\n     *\r\n     * By default, this property is `true`, change to `false` to allow hash-less URLs.\r\n     */\r\n    this.useHash = true;\r\n  }\r\n  async componentWillLoad() {\r\n    console.debug('[ion-router] router will load');\r\n    await waitUntilNavNode();\r\n    console.debug('[ion-router] found nav');\r\n    await this.onRoutesChanged();\r\n  }\r\n  componentDidLoad() {\r\n    window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\r\n    window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\r\n  }\r\n  async onPopState() {\r\n    const direction = this.historyDirection();\r\n    let path = this.getPath();\r\n    const canProceed = await this.runGuards(path);\r\n    if (canProceed !== true) {\r\n      if (typeof canProceed === 'object') {\r\n        path = parsePath(canProceed.redirect);\r\n      }\r\n      return false;\r\n    }\r\n    console.debug('[ion-router] URL changed -> update nav', path, direction);\r\n    return this.writeNavStateRoot(path, direction);\r\n  }\r\n  onBackButton(ev) {\r\n    ev.detail.register(0, processNextHandler => {\r\n      this.back();\r\n      processNextHandler();\r\n    });\r\n  }\r\n  /** @internal */\r\n  async canTransition() {\r\n    const canProceed = await this.runGuards();\r\n    if (canProceed !== true) {\r\n      if (typeof canProceed === 'object') {\r\n        return canProceed.redirect;\r\n      }\r\n      else {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  /**\r\n   * Navigate to the specified URL.\r\n   *\r\n   * @param url The url to navigate to.\r\n   * @param direction The direction of the animation. Defaults to `\"forward\"`.\r\n   */\r\n  async push(url, direction = 'forward', animation) {\r\n    if (url.startsWith('.')) {\r\n      url = (new URL(url, window.location.href)).pathname;\r\n    }\r\n    console.debug('[ion-router] URL pushed -> updating nav', url, direction);\r\n    let path = parsePath(url);\r\n    let queryString = url.split('?')[1];\r\n    const canProceed = await this.runGuards(path);\r\n    if (canProceed !== true) {\r\n      if (typeof canProceed === 'object') {\r\n        path = parsePath(canProceed.redirect);\r\n        queryString = canProceed.redirect.split('?')[1];\r\n      }\r\n      else {\r\n        return false;\r\n      }\r\n    }\r\n    this.setPath(path, direction, queryString);\r\n    return this.writeNavStateRoot(path, direction, animation);\r\n  }\r\n  /**\r\n   * Go back to previous page in the window.history.\r\n   */\r\n  back() {\r\n    window.history.back();\r\n    return Promise.resolve(this.waitPromise);\r\n  }\r\n  /** @internal */\r\n  async printDebug() {\r\n    console.debug('CURRENT PATH', this.getPath());\r\n    console.debug('PREVIOUS PATH', this.previousPath);\r\n    printRoutes(readRoutes(this.el));\r\n    printRedirects(readRedirects(this.el));\r\n  }\r\n  /** @internal */\r\n  async navChanged(direction) {\r\n    if (this.busy) {\r\n      console.warn('[ion-router] router is busy, navChanged was cancelled');\r\n      return false;\r\n    }\r\n    const { ids, outlet } = await readNavState(window.document.body);\r\n    const routes = readRoutes(this.el);\r\n    const chain = routerIDsToChain(ids, routes);\r\n    if (!chain) {\r\n      console.warn('[ion-router] no matching URL for ', ids.map(i => i.id));\r\n      return false;\r\n    }\r\n    const path = chainToPath(chain);\r\n    if (!path) {\r\n      console.warn('[ion-router] router could not match path because some required param is missing');\r\n      return false;\r\n    }\r\n    console.debug('[ion-router] nav changed -> update URL', ids, path);\r\n    this.setPath(path, direction);\r\n    await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, path, null, ids.length);\r\n    return true;\r\n  }\r\n  onRedirectChanged() {\r\n    const path = this.getPath();\r\n    if (path && routeRedirect(path, readRedirects(this.el))) {\r\n      this.writeNavStateRoot(path, ROUTER_INTENT_NONE);\r\n    }\r\n  }\r\n  onRoutesChanged() {\r\n    return this.writeNavStateRoot(this.getPath(), ROUTER_INTENT_NONE);\r\n  }\r\n  historyDirection() {\r\n    const win = window;\r\n    if (win.history.state === null) {\r\n      this.state++;\r\n      win.history.replaceState(this.state, win.document.title, win.document.location && win.document.location.href);\r\n    }\r\n    const state = win.history.state;\r\n    const lastState = this.lastState;\r\n    this.lastState = state;\r\n    if (state > lastState || (state >= lastState && lastState > 0)) {\r\n      return ROUTER_INTENT_FORWARD;\r\n    }\r\n    else if (state < lastState) {\r\n      return ROUTER_INTENT_BACK;\r\n    }\r\n    else {\r\n      return ROUTER_INTENT_NONE;\r\n    }\r\n  }\r\n  async writeNavStateRoot(path, direction, animation) {\r\n    if (!path) {\r\n      console.error('[ion-router] URL is not part of the routing set');\r\n      return false;\r\n    }\r\n    // lookup redirect rule\r\n    const redirects = readRedirects(this.el);\r\n    const redirect = routeRedirect(path, redirects);\r\n    let redirectFrom = null;\r\n    if (redirect) {\r\n      this.setPath(redirect.to, direction);\r\n      redirectFrom = redirect.from;\r\n      path = redirect.to;\r\n    }\r\n    // lookup route chain\r\n    const routes = readRoutes(this.el);\r\n    const chain = routerPathToChain(path, routes);\r\n    if (!chain) {\r\n      console.error('[ion-router] the path does not match any route');\r\n      return false;\r\n    }\r\n    // write DOM give\r\n    return this.safeWriteNavState(document.body, chain, direction, path, redirectFrom, 0, animation);\r\n  }\r\n  async safeWriteNavState(node, chain, direction, path, redirectFrom, index = 0, animation) {\r\n    const unlock = await this.lock();\r\n    let changed = false;\r\n    try {\r\n      changed = await this.writeNavState(node, chain, direction, path, redirectFrom, index, animation);\r\n    }\r\n    catch (e) {\r\n      console.error(e);\r\n    }\r\n    unlock();\r\n    return changed;\r\n  }\r\n  async lock() {\r\n    const p = this.waitPromise;\r\n    let resolve;\r\n    this.waitPromise = new Promise(r => resolve = r);\r\n    if (p !== undefined) {\r\n      await p;\r\n    }\r\n    return resolve;\r\n  }\r\n  async runGuards(to = this.getPath(), from = parsePath(this.previousPath)) {\r\n    if (!to || !from) {\r\n      return true;\r\n    }\r\n    const routes = readRoutes(this.el);\r\n    const toChain = routerPathToChain(to, routes);\r\n    const fromChain = routerPathToChain(from, routes);\r\n    const beforeEnterHook = toChain && toChain[toChain.length - 1].beforeEnter;\r\n    const beforeLeaveHook = fromChain && fromChain[fromChain.length - 1].beforeLeave;\r\n    const canLeave = beforeLeaveHook ? await beforeLeaveHook() : true;\r\n    if (canLeave === false || typeof canLeave === 'object') {\r\n      return canLeave;\r\n    }\r\n    const canEnter = beforeEnterHook ? await beforeEnterHook() : true;\r\n    if (canEnter === false || typeof canEnter === 'object') {\r\n      return canEnter;\r\n    }\r\n    return true;\r\n  }\r\n  async writeNavState(node, chain, direction, path, redirectFrom, index = 0, animation) {\r\n    if (this.busy) {\r\n      console.warn('[ion-router] router is busy, transition was cancelled');\r\n      return false;\r\n    }\r\n    this.busy = true;\r\n    // generate route event and emit will change\r\n    const routeEvent = this.routeChangeEvent(path, redirectFrom);\r\n    if (routeEvent) {\r\n      this.ionRouteWillChange.emit(routeEvent);\r\n    }\r\n    const changed = await writeNavState(node, chain, direction, index, false, animation);\r\n    this.busy = false;\r\n    if (changed) {\r\n      console.debug('[ion-router] route changed', path);\r\n    }\r\n    // emit did change\r\n    if (routeEvent) {\r\n      this.ionRouteDidChange.emit(routeEvent);\r\n    }\r\n    return changed;\r\n  }\r\n  setPath(path, direction, queryString) {\r\n    this.state++;\r\n    writePath(window.history, this.root, this.useHash, path, direction, this.state, queryString);\r\n  }\r\n  getPath() {\r\n    return readPath(window.location, this.root, this.useHash);\r\n  }\r\n  routeChangeEvent(path, redirectFromPath) {\r\n    const from = this.previousPath;\r\n    const to = generatePath(path);\r\n    this.previousPath = to;\r\n    if (to === from) {\r\n      return null;\r\n    }\r\n    const redirectedFrom = redirectFromPath ? generatePath(redirectFromPath) : null;\r\n    return {\r\n      from,\r\n      redirectedFrom,\r\n      to,\r\n    };\r\n  }\r\n  get el() { return getElement(this); }\r\n};\r\n\r\nconst routerLinkCss = \":host{--background:transparent;--color:var(--ion-color-primary, #3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\";\r\n\r\nconst RouterLink = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n    /**\r\n     * When using a router, it specifies the transition direction when navigating to\r\n     * another page using `href`.\r\n     */\r\n    this.routerDirection = 'forward';\r\n    this.onClick = (ev) => {\r\n      openURL(this.href, ev, this.routerDirection, this.routerAnimation);\r\n    };\r\n  }\r\n  render() {\r\n    const mode = getIonMode(this);\r\n    const attrs = {\r\n      href: this.href,\r\n      rel: this.rel,\r\n      target: this.target\r\n    };\r\n    return (h(Host, { onClick: this.onClick, class: createColorClasses(this.color, {\r\n        [mode]: true,\r\n        'ion-activatable': true\r\n      }) }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null))));\r\n  }\r\n};\r\nRouterLink.style = routerLinkCss;\r\n\r\nexport { Route as ion_route, RouteRedirect as ion_route_redirect, Router as ion_router, RouterLink as ion_router_link };\r\n"]}