{"version":3,"sources":["webpack:///src/app/payloads/aut/RegisterRequest.ts","webpack:///src/app/pages/auth/register/register.page.ts","webpack:///src/app/pages/auth/register/register.page.html","webpack:///src/app/pages/auth/register/register.page.scss","webpack:///src/app/pages/auth/register/register-routing.module.ts","webpack:///src/app/pages/auth/register/register.module.ts"],"names":["RegisterRequest","RegisterPage","store","navController","platform","storage","register","username","password","passwordConfirm","nume","prenume","telefon","email","sex","domzonatara","domjudet","domlocalitate","domcodpostal","domadresa","validators","this","passwordConfirmMatchValidator","zonetara$","domjudete$","domjudete","domlocalitati$","domlocalitati","rezjudete$","rezjudete","rezlocalitati$","rezlocalitati","self","dispatch","subscribe","data","get","of","error","console","log","storageResultKey","zonataraid","judetid","event","detail","value","selDomZonataraid","selDomJudetid","domJudeteSelect","selDomLocalitateid","loadJudete","reset","selRezZonataraid","selRezJudetid","loadLocalitati","selRezLocalitateid","valid","registerRequest","domZonataraid","domJudetid","domLocalitateid","domCodpostal","domAdresa","g","hasError","setErrors","mismatch","static","selector","template","routes","path","component","RegisterPageRoutingModule","imports","exports","RegisterPageModule","declarations"],"mappings":"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","file":"x","sourcesContent":["export class RegisterRequest\r\n{\r\n\r\n\tusername:string;\r\n\r\n\tpassword:string;\r\n\r\n\tuserinfoid:number;\r\n\r\n\tuserid:number;\r\n\r\n\tnume:string;\r\n\r\n\tprenume:string;\r\n\r\n\ttelefon:string;\r\n\r\n\tsex:string;\r\n\r\n\temail:string;\r\n\r\n\tdomZonataraid:string;\r\n\tdomZonataracod:string;\r\n\r\n\tdomJudetid:number;\r\n\tdomJudetcod:string;\r\n\r\n\tdomLocalitateid:number;\r\n\tdomLocalitatecod:string;\r\n\r\n\tdomCodpostal:string;\r\n\r\n\tdomAdresa:string;\r\n\r\n    rezdifdedom:string;\r\n\r\n\trezZonataraid:string;\r\n\r\n\trezZonataracod:string;\r\n\r\n\trezJudetid:string;\r\n\r\n\trezJudetcod:string;\r\n\r\n\trezLocalitateid:string;\r\n\r\n\trezLocalitatecod:string;\r\n\r\n\trezCodpostal:string;\r\n\r\n\trezAdresa:string;\r\n\r\n\r\n    constructor(){\r\n    \r\n    }\r\n}\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { AbstractControl, FormControl, FormGroup, ValidationErrors, Validators } from '@angular/forms';\nimport { AuthAction } from '../../../core/auth-guard/auth-guard.actions';\nimport { RegisterRequest } from '../../../payloads/aut/RegisterRequest';\nimport { IonSelect, NavController, Platform } from '@ionic/angular';\nimport { Store } from '@ngxs/store';\nimport { Observable, of } from 'rxjs';\nimport { Storage } from '@ionic/storage';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.page.html',\n  styleUrls: ['./register.page.scss'],\n})\n\n\nexport class RegisterPage implements OnInit {\n  // refer to the select via the template reference\n  @ViewChild('domZoneTaraSelect', { static: false }) domZoneTaraSelect: IonSelect;\n  @ViewChild('domJudeteSelect', { static: false }) domJudeteSelect: IonSelect;\n  @ViewChild('domLocalitatiSelect', { static: false }) domLocalitatiSelect: IonSelect;\n\n  register: FormGroup = new FormGroup(\n    {\n       username: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(150)]),\n       password: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(150)]),\n       passwordConfirm: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(150)]),\n       nume: new FormControl('', [Validators.required, Validators.maxLength(150)]),\n       prenume: new FormControl('', [Validators.required, Validators.maxLength(150)]),\n       telefon: new FormControl('', [Validators.required, Validators.maxLength(150)]),\n       email: new FormControl('', [Validators.required, Validators.maxLength(150)]),\n       sex: new FormControl('', [Validators.required, Validators.maxLength(150)]),\n       domzonatara: new FormControl('', [Validators.required, Validators.maxLength(150)]),\n       domjudet: new FormControl('', [Validators.required, Validators.maxLength(150)]),\n       domlocalitate: new FormControl('', [Validators.required, Validators.maxLength(150)]),\n       domcodpostal: new FormControl('', [Validators.required, Validators.maxLength(150)]),\n       domadresa: new FormControl('', [Validators.required, Validators.maxLength(150)]),\n    },\n    { validators: this.passwordConfirmMatchValidator },\n  );\n\n  //obsActionRegister: Observable<any>;\n  //obsActionJudete: Observable<any>;\n\n  zonetara$ : Observable<any> = null;\n  \n  //------------- pentru domiciliu\n  selDomZonataraid : number ;\n  \n  domjudete$ : Observable<any> = null;\n  domjudete : Array<any> = null;\n\n  selDomJudetid : number ;\n\n  domlocalitati$ : Observable<any> = null;\n  domlocalitati : Array<any> = null;\n\n  selDomLocalitateid : number ;\n\n  //------------- pentru rezidenta \n  selRezZonataraid : number ;\n\n  rezjudete$ : Observable<any> = null;\n  rezjudete : Array<any> = null;\n\n  selRezJudetid : number ;\n\n  rezlocalitati$ : Observable<any> = null;\n  rezlocalitati : Array<any> = null;\n\n  selRezLocalitateid : number ;\n\n\n   constructor(private store: Store, private navController: NavController, private platform: Platform, private storage: Storage) \n  {\n    //this.loadZonetara(\"zonetara\");\n    var self = this;\n    var storageResultKey = \"zonetara\";\n    this.store.dispatch(new AuthAction.GeoZonetara(storageResultKey)).subscribe(async () => {\n      //console.log('Call Action GeoZonetara: ');\n      \n      var data = await this.storage.get(storageResultKey);\n      while (data == null) \n        data = await this.storage.get(storageResultKey);\n      //---\n      self.zonetara$ = of(data);\n\n    },\n    error => {\n      console.log('Error Calling Action GeoZoneTara: ' + error);\n    }\n    );\n  }  \n\n\n  loadZonetara(storageResultKey: string) \n  {\n    var self = this;\n    this.store.dispatch(new AuthAction.GeoZonetara(storageResultKey)).subscribe(async () => {\n      //console.log('Call Action GeoZonetara: ');\n      \n      var data = await this.storage.get(storageResultKey);\n      while (data == null) \n        data = await this.storage.get(storageResultKey);\n      //---\n      self.zonetara$ = of(data);\n\n    },\n    error => {\n      console.log('Error Calling Action GeoZoneTara: ' + error);\n    }\n    );\n  }\n\n\n  loadJudete(zonataraid : number, storageResultKey: string) \n  {\n    var self = this;\n    this.store.dispatch(new AuthAction.GeoJudete(zonataraid, storageResultKey)).subscribe(async () => {\n      console.log('Call Action GeoJudete: ');\n      var data = await this.storage.get(storageResultKey);\n      while (data == null) \n      {\n        data = await this.storage.get(storageResultKey);\n      }\n      //---\n      if (storageResultKey == \"domjudete\")\n        self.domjudete$ = of(data);      \n      else if (storageResultKey == \"rezjudete\")\n        self.rezjudete$ = of(data);      \n\n    },\n    error => {\n      console.log('Error Calling Action GeoJudete: ' + error);\n    }\n    );\n  }\n\n\n  loadLocalitati(zonataraid : number, judetid : number, storageResultKey: string) \n  {\n    var self = this;\n    this.store.dispatch(new AuthAction.GeoLocalitati(zonataraid, judetid, storageResultKey)).subscribe(async () => {\n      console.log('Call Action GeoLocalitati: ');\n      var data = await this.storage.get(storageResultKey);\n      while (data == null) \n      {\n        data = await this.storage.get(storageResultKey);\n      }\n      //---\n      if (storageResultKey == \"domlocalitati\")\n        self.domlocalitati$ = of(data);      \n      else if (storageResultKey == \"rezlocalitati\")\n        self.rezlocalitati$ = of(data);      \n\n    },\n    error => {\n      console.log('Error Calling Action GeoLocalitati: ' + error);\n    }\n    );\n  }  \n\n\n  selectieDomZonatara(event : any) \n  {\n    console.log(\"selectie dom zona tara id:\" + event.detail.value);\n    this.selDomZonataraid  = event.detail.value; //this.register.get(\"domzonatara\").value;\n    console.log(this.selDomJudetid);\n    this.domjudete$ = null;\n    this.domlocalitati$ = null;\n    //this.register.get(\"domjudet\").setValue(null);\n    //this.register.get(\"domjudet\").reset();\n    if (this.domJudeteSelect === null)\n      this.domJudeteSelect.value = null;\n    //this.register.get(\"domlocalitate\").setValue(null);\n    //this.register.get(\"domlocalitate\").reset();\n    this.selDomJudetid = null;\n    this.selDomLocalitateid = null;\n    this.loadJudete(this.selDomZonataraid, \"domjudete\");\n  }\n\n\n  selectieDomJudet(event : any) \n  {\n    console.log(\"selectie dom judet id:\" + event.detail.value);\n    this.selDomJudetid  = event.detail.value; //this.register.get(\"domjudet\").value;\n    console.log(this.selDomJudetid);\n    this.domlocalitati$ = null;\n    //this.register.get(\"domlocalitate\").setValue(null);\n    this.register.get(\"domlocalitate\").reset();\n    if (this.selDomJudetid == null)\n      return;\n    //this.loadLocalitati(this.selDomZonataraid, this.selDomJudetid, \"domlocalitati\");\n  }\n\n\n  selectieDomLocalitate(event : any) \n  {\n    console.log(\"selectie dom localitate id:\" + event.detail.value);\n    this.selDomLocalitateid  = event.detail.value; //this.register.get(\"domjudet\").value;\n    console.log(this.selDomLocalitateid);\n  }\n\n\n  selectieRezZonatara(event : any) \n  {\n    console.log(\"selectie rez zona tara id:\" + event.detail.value);\n    this.selRezZonataraid  = event.detail.value; //this.register.get(\"domzonatara\").value;\n    console.log(this.selDomJudetid);\n    this.loadJudete(this.selRezZonataraid, \"rezjudete\");\n  }\n\n\n  selectieRezJudet(event : any) \n  {\n    console.log(\"selectie rez judet id:\" + event.detail.value);\n    this.selRezJudetid  = event.detail.value; //this.register.get(\"domjudet\").value;\n    console.log(this.selDomJudetid);\n    this.loadLocalitati(this.selRezZonataraid, this.selRezJudetid, \"rezlocalitati\");\n  }\n\n\n  selectieRezLocalitate(event : any) \n  {\n    console.log(\"selectie rez localitate id:\" + event.detail.value);\n    this.selRezLocalitateid  = event.detail.value; //this.register.get(\"domjudet\").value;\n    console.log(this.selRezLocalitateid);\n  }\n\n\n  onRegister() {\n    if (this.register.valid) {\n      console.log(this.register.value);\n      var registerRequest : RegisterRequest = new RegisterRequest();\n      registerRequest.username         = this.register.get(\"username\").value;\n      registerRequest.password         = this.register.get(\"password\").value;\n      registerRequest.nume             = this.register.get(\"nume\").value;\n      registerRequest.prenume          = this.register.get(\"prenume\").value;\n      registerRequest.telefon          = this.register.get(\"telefon\").value;\n      registerRequest.email            = this.register.get(\"email\").value;\n      registerRequest.sex              = this.register.get(\"sex\").value;\n      registerRequest.domZonataraid    = this.register.get(\"domzonatara\").value;\n      registerRequest.domJudetid       = this.register.get(\"domjudet\").value;\n      registerRequest.domLocalitateid  = this.register.get(\"domlocalitate\").value;\n      registerRequest.domCodpostal     = this.register.get(\"domcodpostal\").value;\n      registerRequest.domAdresa        = this.register.get(\"domadresa\").value;\n\n      this.store.dispatch(new AuthAction.Register(registerRequest));\n      //this.obsActionRegister = this.store.dispatch(new AuthAction.Register(registerRequest));\n      /** \n      this.obsActionRegister.subscribe(\n        info => {\n          console.log('REGISTER: ' + info);\n        },\n        error => {\n          console.log('REGISTER ERROR: ' + error);\n        }\n      );*/\n\n    }\n  }\n\n  ngOnInit(): void {}\n\n  passwordConfirmMatchValidator(g: AbstractControl): ValidationErrors | null {\n    const password = g.get('password');\n    const passwordConfirm = g.get('passwordConfirm');\n\n    if (passwordConfirm.hasError('required') || passwordConfirm.hasError('minlength')) {\n      return;\n    }\n\n    if (password.value !== passwordConfirm.value) {\n      passwordConfirm.setErrors({\n        mismatch: true,\n      });\n    } else {\n      passwordConfirm.setErrors(null);\n    }\n  }\n \n\n      /*\n    this.judete.subscribe(judetee => \n    {\n      var judet = judetee[selIdx];\n      console.log(judet);\n    });*/\n\n    /** \n    var zonataraid : number = 1;\n    var self = this;\n    this.store.dispatch(new AuthAction.GeoJudete(zonataraid,\"domjudete\")).subscribe(async () => {\n      console.log('GEO JUDETE: ');\n      var data = await this.storage.get('judete');\n      if (data == null) \n      {\n        data = await this.storage.get('judete');\n      }\n      //---\n      self.judete = of(data);\n       \n      //self.getLocalStorageData()\n      //.then(data =>{\n      //  self.judete = of(data);\n      //})\n      \n    },\n    error => {\n      console.log('GEO JUDETE ERROR: ' + error);\n    }\n    );\n  }*/\n   \n    /**   \n    this.store.dispatch(new AuthAction.GeoJudete(zonataraid)).subscribe(\n        info => {\n          console.log('GEO JUDETE: ' + info);\n          this.getLocalStorageData()\n          .then(data =>{\n                //ok\n          })\n        },\n        error => {\n          console.log('GEO JUDETE ERROR: ' + error);\n        }\n      );\n      */\n\n  /** \n  getLocalStorageData(){\n    var self =this;\n    return new Promise(resolve => {\n      self.storage.get(\"judete\")\n        .then( value => \n            { \n              //if (value == null)\n                //return this.store.dispatch(new AuthAction.GeoJudete(1));\n              //self.judete = of(value);\n              //console.log(value);\n              resolve(value);\n            });\n            \n         });\n    }*/\n\n\n  /**\n  authUrl = \"https://sampleapi.herokuapp.com\"\n  authHeaders;\n\n  getToken() {\n  this.storage.get('token').then((token) => {\n    console.log('Bearer ' + token);\n    this.authHeaders = {\n      headers: new HttpHeaders({\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      })\n  }\n  });\n  }\n\n  getInfo(): Observable<Info> {\n  return this.http.get<Info>(this.authUrl + '/api/users/info', this.authHeaders).pipe(\n    catchError(this.handleError)\n  );\n  }\n\n  ionViewDidLoad() {\n    this._dashboardService.getToken();\n    this._dashboardService.getInfo().subscribe(\n      info => {\n        console.log('USER INFO: ' + info);\n        this.info = info\n      },\n      error => {\n        console.log('INFO ERROR: ' + error);\n      }\n    );\n    }\n\n\n    public GetLocations(apiUrl, siteKey, pLocationKey){\n\n    return new Promise((resolve, reject) => {\n        this.http.get(apiUrl + \"site/\" + siteKey + \"/location/\" + pLocationKey)\n          .map(res => res.json())\n          .subscribe(data => {\n              resolve(data);     //Corrected\n          },\n          err =>{\n            reject(err);\n          });\n    });\n}\n    */\n}\n","export default \"<ion-header class=\\\"ion-no-border\\\">\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button [text]=\\\"'backButtonTitle' | translate\\\" defaultHref=\\\"/auth/login\\\"></ion-back-button>\\n    </ion-buttons>\\n    <ion-title>Înregistrare</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content [fullscreen]=\\\"true\\\" class=\\\"auth-page\\\">\\n  <ion-grid>\\n    <ion-row>\\n      <ion-col class=\\\"ion-text-center\\\" size-md=\\\"6\\\" size-lg=\\\"5\\\" size-xs=\\\"12\\\">\\n        <form [formGroup]=\\\"register\\\" (ngSubmit)=\\\"onRegister()\\\">\\n          <ion-card color=\\\"light\\\" class=\\\"auth-card ion-margin\\\">\\n            <ion-item color=\\\"light\\\" class=\\\"ion-no-inner-padding-end\\\">\\n              <ion-input type=\\\"text\\\" placeholder=\\\"Nume utilizator (minim 5)\\\" formControlName=\\\"username\\\"></ion-input>\\n            </ion-item>\\n            <ion-item color=\\\"light\\\" class=\\\"ion-no-inner-padding-end\\\">\\n              <ion-input type=\\\"password\\\" placeholder=\\\"Parola (minim 5)\\\" formControlName=\\\"password\\\"></ion-input>\\n            </ion-item>\\n            <ion-item color=\\\"light\\\" class=\\\"ion-no-inner-padding-end\\\">\\n              <ion-input type=\\\"password\\\" placeholder=\\\"Parola (confirmare)\\\" formControlName=\\\"passwordConfirm\\\">\\n              </ion-input>\\n            </ion-item>\\n            <ion-item color=\\\"light\\\">\\n              <ion-input type=\\\"text\\\" placeholder=\\\"Nume\\\" formControlName=\\\"nume\\\"></ion-input>\\n            </ion-item>\\n            <ion-item color=\\\"light\\\">\\n              <ion-input type=\\\"text\\\" placeholder=\\\"Prenume\\\" formControlName=\\\"prenume\\\"></ion-input>\\n            </ion-item>\\n            <ion-item color=\\\"light\\\">\\n              <ion-input type=\\\"text\\\" placeholder=\\\"Telefon\\\" formControlName=\\\"telefon\\\"></ion-input>\\n            </ion-item>\\n            <ion-item color=\\\"light\\\">\\n              <ion-input type=\\\"text\\\" placeholder=\\\"Email\\\" formControlName=\\\"email\\\"></ion-input>\\n            </ion-item>\\n            <ion-item color=\\\"light\\\">\\n              <ion-select placeholder=\\\"Sexul\\\" formControlName=\\\"sex\\\">\\n                <ion-select-option value=\\\"f\\\">Feminin</ion-select-option>\\n                <ion-select-option value=\\\"m\\\">Masculin</ion-select-option>\\n              </ion-select>\\n            </ion-item>\\n            <ion-item color=\\\"light\\\">\\n              <ng-container *ngIf=\\\"zonetara$\\\">\\n                <ion-select #domZoneTaraSelect placeholder=\\\"Domiciliu în Țară sau în Diaspora?\\\" formControlName=\\\"domzonatara\\\" (ionChange)=\\\"selectieDomZonatara($event)\\\">\\n                   <ion-select-option value=\\\"{{zonatara.geoZonaTaraId}}\\\" *ngFor='let zonatara of (zonetara$|async)'>{{zonatara.geoZonaTaraNume}}</ion-select-option>\\n              </ion-select>\\n              </ng-container>              \\n            </ion-item>\\n            <ion-item color=\\\"light\\\">\\n              <ng-container *ngIf=\\\"domjudete$\\\">\\n                <ion-select #domJudeteSelect placeholder=\\\"Județul de domiciliu\\\" formControlName=\\\"domjudet\\\" (ionChange)=\\\"selectieDomJudet($event)\\\">\\n                   <ion-select-option value=\\\"{{domjudet.geoJudetId}}\\\" *ngFor='let domjudet of (domjudete$|async)'>{{domjudet.geoJudetNume}}</ion-select-option>\\n              </ion-select>\\n              </ng-container>\\n            </ion-item>\\n            <ion-item color=\\\"light\\\">\\n              <ng-container *ngIf=\\\"domlocalitati$\\\">\\n                <ion-select #domLocalitatiSelect placeholder=\\\"Localitatea de domiciliu\\\" formControlName=\\\"domlocalitate\\\" (ionChange)=\\\"selectieDomLocalitate($event)\\\">\\n                   <ion-select-option value=\\\"{{domlocalitate.geoLocalitateId}}\\\" *ngFor='let domlocalitate of (domlocalitati$|async)'>{{domlocalitate.geoLocalitateNume}}</ion-select-option>\\n              </ion-select>\\n              </ng-container>\\n            </ion-item>\\n            <ion-item color=\\\"light\\\">\\n              <ion-input type=\\\"text\\\" placeholder=\\\"Codul Postal la Domiciliu\\\" formControlName=\\\"domcodpostal\\\"></ion-input>\\n            </ion-item>\\n            <ion-item color=\\\"light\\\">\\n              <ion-input type=\\\"text\\\" placeholder=\\\"Adresa de Domiciliu\\\" formControlName=\\\"domadresa\\\"></ion-input>\\n            </ion-item>\\n\\n          </ion-card>\\n\\n          <ion-button\\n            expand=\\\"block\\\"\\n            class=\\\"ion-margin-start ion-margin-end ion-margin-bottom\\\"\\n            type=\\\"submit\\\"\\n            [disabled]=\\\"!register.valid\\\"\\n          >\\n            Înregistrare\\n          </ion-button>\\n          <span class=\\\"ion-margin\\\"></span>\\n        </form>\\n\\n        <p class=\\\"ion-margin\\\">\\n          <ion-text>\\n            Apăsând butonul \\\"Înregistrare\\\", sunteți de acord cu:\\n            <a href=\\\"http://\\\">Terms of Service</a>\\n            și cu:\\n            <a href=\\\"http://\\\">Privacy Policy</a>\\n          </ion-text>\\n        </p>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n</ion-content>\\n\";","export default \"\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { RegisterPage } from './register.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RegisterPage,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class RegisterPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\nimport { SharedModule } from '../../../shared/shared.module';\nimport { RegisterPage } from './register.page';\nimport { RegisterPageRoutingModule } from './register-routing.module';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, IonicModule, RegisterPageRoutingModule, SharedModule],\n  declarations: [RegisterPage],\n})\nexport class RegisterPageModule {}\n"]}