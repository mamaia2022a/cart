{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-reorder_2.entry.js"],"names":["Reorder","hostRef","r","this","ev","reorderGroup","el","closest","preventDefault","disabled","stopImmediatePropagation","mode","reorderIcon","h","H","class","name","lazy","part","style","ios","md","ReorderGroup","ionItemReorder","lastToIndex","cachedHeights","scrollElTop","scrollElBottom","scrollElInitial","containerTop","containerBottom","state","gesture","enable","contentEl","scrollEl","getScrollElement","createGesture","gestureName","gesturePriority","threshold","direction","passive","canStart","detail","onStart","onMove","onEnd","disabledChanged","destroy","undefined","listOrReorder","Promise","resolve","completeSync","selectedItemEl","reorderEl","event","target","item","findReorderItem","data","heights","length","children","sum","i","child","offsetHeight","push","$ionIndex","box","getBoundingClientRect","top","bottom","scrollBox","scrollTop","AUTO_SCROLL_MARGIN","indexForItem","selectedItemHeight","classList","add","ITEM_REORDER_SELECTED","selectedItem","scroll","autoscroll","currentY","Math","max","min","deltaY","startY","normalizedY","toIndex","itemIndexForTop","fromIndex","reorderMove","transform","emit","from","to","complete","bind","len","ref","insertBefore","Array","isArray","reorderArray","transition","remove","itemHeight","value","posY","amount","SCROLL_JUMP","scrollBy","element","node","container","parent","parentElement","array","splice","slice"],"mappings":"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","file":"x","sourcesContent":["import { r as registerInstance, h, H as Host, i as getElement, e as createEvent } from './index-7a8b7a1c.js';\r\nimport { b as getIonMode } from './ionic-global-63a97a32.js';\r\nimport { a as hapticSelectionStart, b as hapticSelectionChanged, h as hapticSelectionEnd } from './haptic-27b3f981.js';\r\n\r\nconst reorderIosCss = \":host([slot]){display:none;line-height:0;z-index:100}.reorder-icon{display:block;font-size:22px}.reorder-icon{font-size:34px;opacity:0.4}\";\r\n\r\nconst reorderMdCss = \":host([slot]){display:none;line-height:0;z-index:100}.reorder-icon{display:block;font-size:22px}.reorder-icon{font-size:31px;opacity:0.3}\";\r\n\r\nconst Reorder = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n  }\r\n  onClick(ev) {\r\n    const reorderGroup = this.el.closest('ion-reorder-group');\r\n    ev.preventDefault();\r\n    // Only stop event propagation if the reorder is inside of an enabled\r\n    // reorder group. This allows interaction with clickable children components.\r\n    if (!reorderGroup || !reorderGroup.disabled) {\r\n      ev.stopImmediatePropagation();\r\n    }\r\n  }\r\n  render() {\r\n    const mode = getIonMode(this);\r\n    const reorderIcon = mode === 'ios' ? 'reorder-three-outline' : 'reorder-two-sharp';\r\n    return (h(Host, { class: mode }, h(\"slot\", null, h(\"ion-icon\", { name: reorderIcon, lazy: false, class: \"reorder-icon\", part: \"icon\" }))));\r\n  }\r\n  get el() { return getElement(this); }\r\n};\r\nReorder.style = {\r\n  ios: reorderIosCss,\r\n  md: reorderMdCss\r\n};\r\n\r\nconst reorderGroupCss = \".reorder-list-active>*{-webkit-transition:-webkit-transform 300ms;transition:-webkit-transform 300ms;transition:transform 300ms;transition:transform 300ms, -webkit-transform 300ms;will-change:transform}.reorder-enabled{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.reorder-enabled ion-reorder{display:block;cursor:-webkit-grab;cursor:grab;pointer-events:all;-ms-touch-action:none;touch-action:none}.reorder-selected,.reorder-selected ion-reorder{cursor:-webkit-grabbing;cursor:grabbing}.reorder-selected{position:relative;-webkit-transition:none !important;transition:none !important;-webkit-box-shadow:0 0 10px rgba(0, 0, 0, 0.4);box-shadow:0 0 10px rgba(0, 0, 0, 0.4);opacity:0.8;z-index:100}.reorder-visible ion-reorder .reorder-icon{-webkit-transform:translate3d(0,  0,  0);transform:translate3d(0,  0,  0)}\";\r\n\r\nconst ReorderGroup = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n    this.ionItemReorder = createEvent(this, \"ionItemReorder\", 7);\r\n    this.lastToIndex = -1;\r\n    this.cachedHeights = [];\r\n    this.scrollElTop = 0;\r\n    this.scrollElBottom = 0;\r\n    this.scrollElInitial = 0;\r\n    this.containerTop = 0;\r\n    this.containerBottom = 0;\r\n    this.state = 0 /* Idle */;\r\n    /**\r\n     * If `true`, the reorder will be hidden.\r\n     */\r\n    this.disabled = true;\r\n  }\r\n  disabledChanged() {\r\n    if (this.gesture) {\r\n      this.gesture.enable(!this.disabled);\r\n    }\r\n  }\r\n  async connectedCallback() {\r\n    const contentEl = this.el.closest('ion-content');\r\n    if (contentEl) {\r\n      this.scrollEl = await contentEl.getScrollElement();\r\n    }\r\n    this.gesture = (await import('./index-f49d994d.js')).createGesture({\r\n      el: this.el,\r\n      gestureName: 'reorder',\r\n      gesturePriority: 110,\r\n      threshold: 0,\r\n      direction: 'y',\r\n      passive: false,\r\n      canStart: detail => this.canStart(detail),\r\n      onStart: ev => this.onStart(ev),\r\n      onMove: ev => this.onMove(ev),\r\n      onEnd: () => this.onEnd(),\r\n    });\r\n    this.disabledChanged();\r\n  }\r\n  disconnectedCallback() {\r\n    this.onEnd();\r\n    if (this.gesture) {\r\n      this.gesture.destroy();\r\n      this.gesture = undefined;\r\n    }\r\n  }\r\n  /**\r\n   * Completes the reorder operation. Must be called by the `ionItemReorder` event.\r\n   *\r\n   * If a list of items is passed, the list will be reordered and returned in the\r\n   * proper order.\r\n   *\r\n   * If no parameters are passed or if `true` is passed in, the reorder will complete\r\n   * and the item will remain in the position it was dragged to. If `false` is passed,\r\n   * the reorder will complete and the item will bounce back to its original position.\r\n   *\r\n   * @param listOrReorder A list of items to be sorted and returned in the new order or a\r\n   * boolean of whether or not the reorder should reposition the item.\r\n   */\r\n  complete(listOrReorder) {\r\n    return Promise.resolve(this.completeSync(listOrReorder));\r\n  }\r\n  canStart(ev) {\r\n    if (this.selectedItemEl || this.state !== 0 /* Idle */) {\r\n      return false;\r\n    }\r\n    const target = ev.event.target;\r\n    const reorderEl = target.closest('ion-reorder');\r\n    if (!reorderEl) {\r\n      return false;\r\n    }\r\n    const item = findReorderItem(reorderEl, this.el);\r\n    if (!item) {\r\n      return false;\r\n    }\r\n    ev.data = item;\r\n    return true;\r\n  }\r\n  onStart(ev) {\r\n    ev.event.preventDefault();\r\n    const item = this.selectedItemEl = ev.data;\r\n    const heights = this.cachedHeights;\r\n    heights.length = 0;\r\n    const el = this.el;\r\n    const children = el.children;\r\n    if (!children || children.length === 0) {\r\n      return;\r\n    }\r\n    let sum = 0;\r\n    for (let i = 0; i < children.length; i++) {\r\n      const child = children[i];\r\n      sum += child.offsetHeight;\r\n      heights.push(sum);\r\n      child.$ionIndex = i;\r\n    }\r\n    const box = el.getBoundingClientRect();\r\n    this.containerTop = box.top;\r\n    this.containerBottom = box.bottom;\r\n    if (this.scrollEl) {\r\n      const scrollBox = this.scrollEl.getBoundingClientRect();\r\n      this.scrollElInitial = this.scrollEl.scrollTop;\r\n      this.scrollElTop = scrollBox.top + AUTO_SCROLL_MARGIN;\r\n      this.scrollElBottom = scrollBox.bottom - AUTO_SCROLL_MARGIN;\r\n    }\r\n    else {\r\n      this.scrollElInitial = 0;\r\n      this.scrollElTop = 0;\r\n      this.scrollElBottom = 0;\r\n    }\r\n    this.lastToIndex = indexForItem(item);\r\n    this.selectedItemHeight = item.offsetHeight;\r\n    this.state = 1 /* Active */;\r\n    item.classList.add(ITEM_REORDER_SELECTED);\r\n    hapticSelectionStart();\r\n  }\r\n  onMove(ev) {\r\n    const selectedItem = this.selectedItemEl;\r\n    if (!selectedItem) {\r\n      return;\r\n    }\r\n    // Scroll if we reach the scroll margins\r\n    const scroll = this.autoscroll(ev.currentY);\r\n    // // Get coordinate\r\n    const top = this.containerTop - scroll;\r\n    const bottom = this.containerBottom - scroll;\r\n    const currentY = Math.max(top, Math.min(ev.currentY, bottom));\r\n    const deltaY = scroll + currentY - ev.startY;\r\n    const normalizedY = currentY - top;\r\n    const toIndex = this.itemIndexForTop(normalizedY);\r\n    if (toIndex !== this.lastToIndex) {\r\n      const fromIndex = indexForItem(selectedItem);\r\n      this.lastToIndex = toIndex;\r\n      hapticSelectionChanged();\r\n      this.reorderMove(fromIndex, toIndex);\r\n    }\r\n    // Update selected item position\r\n    selectedItem.style.transform = `translateY(${deltaY}px)`;\r\n  }\r\n  onEnd() {\r\n    const selectedItemEl = this.selectedItemEl;\r\n    this.state = 2 /* Complete */;\r\n    if (!selectedItemEl) {\r\n      this.state = 0 /* Idle */;\r\n      return;\r\n    }\r\n    const toIndex = this.lastToIndex;\r\n    const fromIndex = indexForItem(selectedItemEl);\r\n    if (toIndex === fromIndex) {\r\n      this.completeSync();\r\n    }\r\n    else {\r\n      this.ionItemReorder.emit({\r\n        from: fromIndex,\r\n        to: toIndex,\r\n        complete: this.completeSync.bind(this)\r\n      });\r\n    }\r\n    hapticSelectionEnd();\r\n  }\r\n  completeSync(listOrReorder) {\r\n    const selectedItemEl = this.selectedItemEl;\r\n    if (selectedItemEl && this.state === 2 /* Complete */) {\r\n      const children = this.el.children;\r\n      const len = children.length;\r\n      const toIndex = this.lastToIndex;\r\n      const fromIndex = indexForItem(selectedItemEl);\r\n      if (toIndex !== fromIndex && (listOrReorder === undefined || listOrReorder === true)) {\r\n        const ref = (fromIndex < toIndex)\r\n          ? children[toIndex + 1]\r\n          : children[toIndex];\r\n        this.el.insertBefore(selectedItemEl, ref);\r\n      }\r\n      if (Array.isArray(listOrReorder)) {\r\n        listOrReorder = reorderArray(listOrReorder, fromIndex, toIndex);\r\n      }\r\n      for (let i = 0; i < len; i++) {\r\n        children[i].style['transform'] = '';\r\n      }\r\n      selectedItemEl.style.transition = '';\r\n      selectedItemEl.classList.remove(ITEM_REORDER_SELECTED);\r\n      this.selectedItemEl = undefined;\r\n      this.state = 0 /* Idle */;\r\n    }\r\n    return listOrReorder;\r\n  }\r\n  itemIndexForTop(deltaY) {\r\n    const heights = this.cachedHeights;\r\n    let i = 0;\r\n    // TODO: since heights is a sorted array of integers, we can do\r\n    // speed up the search using binary search. Remember that linear-search is still\r\n    // faster than binary-search for small arrays (<64) due CPU branch misprediction.\r\n    for (i = 0; i < heights.length; i++) {\r\n      if (heights[i] > deltaY) {\r\n        break;\r\n      }\r\n    }\r\n    return i;\r\n  }\r\n  /********* DOM WRITE ********* */\r\n  reorderMove(fromIndex, toIndex) {\r\n    const itemHeight = this.selectedItemHeight;\r\n    const children = this.el.children;\r\n    for (let i = 0; i < children.length; i++) {\r\n      const style = children[i].style;\r\n      let value = '';\r\n      if (i > fromIndex && i <= toIndex) {\r\n        value = `translateY(${-itemHeight}px)`;\r\n      }\r\n      else if (i < fromIndex && i >= toIndex) {\r\n        value = `translateY(${itemHeight}px)`;\r\n      }\r\n      style['transform'] = value;\r\n    }\r\n  }\r\n  autoscroll(posY) {\r\n    if (!this.scrollEl) {\r\n      return 0;\r\n    }\r\n    let amount = 0;\r\n    if (posY < this.scrollElTop) {\r\n      amount = -SCROLL_JUMP;\r\n    }\r\n    else if (posY > this.scrollElBottom) {\r\n      amount = SCROLL_JUMP;\r\n    }\r\n    if (amount !== 0) {\r\n      this.scrollEl.scrollBy(0, amount);\r\n    }\r\n    return this.scrollEl.scrollTop - this.scrollElInitial;\r\n  }\r\n  render() {\r\n    const mode = getIonMode(this);\r\n    return (h(Host, { class: {\r\n        [mode]: true,\r\n        'reorder-enabled': !this.disabled,\r\n        'reorder-list-active': this.state !== 0 /* Idle */,\r\n      } }));\r\n  }\r\n  get el() { return getElement(this); }\r\n  static get watchers() { return {\r\n    \"disabled\": [\"disabledChanged\"]\r\n  }; }\r\n};\r\nconst indexForItem = (element) => {\r\n  return element['$ionIndex'];\r\n};\r\nconst findReorderItem = (node, container) => {\r\n  let parent;\r\n  while (node) {\r\n    parent = node.parentElement;\r\n    if (parent === container) {\r\n      return node;\r\n    }\r\n    node = parent;\r\n  }\r\n  return undefined;\r\n};\r\nconst AUTO_SCROLL_MARGIN = 60;\r\nconst SCROLL_JUMP = 10;\r\nconst ITEM_REORDER_SELECTED = 'reorder-selected';\r\nconst reorderArray = (array, from, to) => {\r\n  const element = array[from];\r\n  array.splice(from, 1);\r\n  array.splice(to, 0, element);\r\n  return array.slice();\r\n};\r\nReorderGroup.style = reorderGroupCss;\r\n\r\nexport { Reorder as ion_reorder, ReorderGroup as ion_reorder_group };\r\n"]}