{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-radio_2.entry.js"],"names":["Radio","hostRef","r","this","ionStyle","ionFocus","ionBlur","inputId","radioButtonIds","radioGroup","checked","buttonTabindex","name","disabled","updateState","value","onFocus","emit","onBlur","ev","stopPropagation","preventDefault","el","focus","undefined","closest","a","emitStyle","color","mode","label","labelId","labelText","h","H","role","tabindex","class","c","part","htmlFor","type","id","style","ios","md","RadioGroup","ionChange","radioGroupIds","allowEmptySelection","setRadioTabindex","radios","getRadios","first","find","radio","focusable","setButtonTabindex","onClick","selectedRadio","target","currentValue","newValue","header","querySelector","Array","from","querySelectorAll","inSelectPopover","contains","filter","includes","index","findIndex","current","next","code","length","setFocus"],"mappings":"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","file":"x","sourcesContent":["import { r as registerInstance, e as createEvent, h, H as Host, i as getElement } from './index-7a8b7a1c.js';\r\nimport { b as getIonMode } from './ionic-global-63a97a32.js';\r\nimport { a as addEventListener, b as removeEventListener, d as getAriaLabel } from './helpers-dd7e4b7b.js';\r\nimport { c as createColorClasses, h as hostContext } from './theme-ff3fc52f.js';\r\n\r\nconst radioIosCss = \":host{--inner-border-radius:50%;display:inline-block;position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:2}:host(.radio-disabled){pointer-events:none}.radio-icon{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;contain:layout size style}.radio-icon,.radio-inner{-webkit-box-sizing:border-box;box-sizing:border-box}label{left:0;top:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;position:absolute;width:100%;height:100%;border:0;background:transparent;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:none;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;opacity:0}[dir=rtl] label,:host-context([dir=rtl]) label{left:unset;right:unset;right:0}label::-moz-focus-inner{border:0}input{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}:host(:focus){outline:none}:host{--color-checked:var(--ion-color-primary, #3880ff);width:15px;height:24px}:host(.ion-color.radio-checked) .radio-inner{border-color:var(--ion-color-base)}.item-radio.item-ios ion-label{margin-left:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.item-radio.item-ios ion-label{margin-left:unset;-webkit-margin-start:0;margin-inline-start:0}}.radio-inner{width:33%;height:50%}:host(.radio-checked) .radio-inner{-webkit-transform:rotate(45deg);transform:rotate(45deg);border-width:2px;border-top-width:0;border-left-width:0;border-style:solid;border-color:var(--color-checked)}:host(.radio-disabled){opacity:0.3}:host(.ion-focused) .radio-icon::after{border-radius:var(--inner-border-radius);left:-9px;top:-8px;display:block;position:absolute;width:36px;height:36px;background:var(--ion-color-primary-tint, #4c8dff);content:\\\"\\\";opacity:0.2}:host-context([dir=rtl]):host(.ion-focused) .radio-icon::after,:host-context([dir=rtl]).ion-focused .radio-icon::after{left:unset;right:unset;right:-9px}:host(.in-item){margin-left:10px;margin-right:11px;margin-top:8px;margin-bottom:8px;display:block;position:static}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.in-item){margin-left:unset;margin-right:unset;-webkit-margin-start:10px;margin-inline-start:10px;-webkit-margin-end:11px;margin-inline-end:11px}}:host(.in-item[slot=start]){margin-left:3px;margin-right:21px;margin-top:8px;margin-bottom:8px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.in-item[slot=start]){margin-left:unset;margin-right:unset;-webkit-margin-start:3px;margin-inline-start:3px;-webkit-margin-end:21px;margin-inline-end:21px}}\";\r\n\r\nconst radioMdCss = \":host{--inner-border-radius:50%;display:inline-block;position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:2}:host(.radio-disabled){pointer-events:none}.radio-icon{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;contain:layout size style}.radio-icon,.radio-inner{-webkit-box-sizing:border-box;box-sizing:border-box}label{left:0;top:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;position:absolute;width:100%;height:100%;border:0;background:transparent;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:none;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;opacity:0}[dir=rtl] label,:host-context([dir=rtl]) label{left:unset;right:unset;right:0}label::-moz-focus-inner{border:0}input{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}:host(:focus){outline:none}:host{--color:var(--ion-color-step-400, #999999);--color-checked:var(--ion-color-primary, #3880ff);--border-width:2px;--border-style:solid;--border-radius:50%;width:20px;height:20px}:host(.ion-color) .radio-inner{background:var(--ion-color-base)}:host(.ion-color.radio-checked) .radio-icon{border-color:var(--ion-color-base)}.radio-icon{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;border-radius:var(--border-radius);border-width:var(--border-width);border-style:var(--border-style);border-color:var(--color)}.radio-inner{border-radius:var(--inner-border-radius);width:calc(50% + var(--border-width));height:calc(50% + var(--border-width));-webkit-transform:scale3d(0, 0, 0);transform:scale3d(0, 0, 0);-webkit-transition:-webkit-transform 280ms cubic-bezier(0.4, 0, 0.2, 1);transition:-webkit-transform 280ms cubic-bezier(0.4, 0, 0.2, 1);transition:transform 280ms cubic-bezier(0.4, 0, 0.2, 1);transition:transform 280ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 280ms cubic-bezier(0.4, 0, 0.2, 1);background:var(--color-checked)}:host(.radio-checked) .radio-icon{border-color:var(--color-checked)}:host(.radio-checked) .radio-inner{-webkit-transform:scale3d(1, 1, 1);transform:scale3d(1, 1, 1)}:host(.radio-disabled){opacity:0.3}:host(.ion-focused) .radio-icon::after{border-radius:var(--inner-border-radius);left:-12px;top:-12px;display:block;position:absolute;width:36px;height:36px;background:var(--ion-color-primary-tint, #4c8dff);content:\\\"\\\";opacity:0.2}:host-context([dir=rtl]):host(.ion-focused) .radio-icon::after,:host-context([dir=rtl]).ion-focused .radio-icon::after{left:unset;right:unset;right:-12px}:host(.in-item){margin-left:0;margin-right:0;margin-top:9px;margin-bottom:9px;display:block;position:static}:host(.in-item[slot=start]){margin-left:4px;margin-right:36px;margin-top:11px;margin-bottom:10px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.in-item[slot=start]){margin-left:unset;margin-right:unset;-webkit-margin-start:4px;margin-inline-start:4px;-webkit-margin-end:36px;margin-inline-end:36px}}\";\r\n\r\nconst Radio = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n    this.ionStyle = createEvent(this, \"ionStyle\", 7);\r\n    this.ionFocus = createEvent(this, \"ionFocus\", 7);\r\n    this.ionBlur = createEvent(this, \"ionBlur\", 7);\r\n    this.inputId = `ion-rb-${radioButtonIds++}`;\r\n    this.radioGroup = null;\r\n    /**\r\n     * If `true`, the radio is selected.\r\n     */\r\n    this.checked = false;\r\n    /**\r\n     * The tabindex of the radio button.\r\n     * @internal\r\n     */\r\n    this.buttonTabindex = -1;\r\n    /**\r\n     * The name of the control, which is submitted with the form data.\r\n     */\r\n    this.name = this.inputId;\r\n    /**\r\n     * If `true`, the user cannot interact with the radio.\r\n     */\r\n    this.disabled = false;\r\n    this.updateState = () => {\r\n      if (this.radioGroup) {\r\n        this.checked = this.radioGroup.value === this.value;\r\n      }\r\n    };\r\n    this.onFocus = () => {\r\n      this.ionFocus.emit();\r\n    };\r\n    this.onBlur = () => {\r\n      this.ionBlur.emit();\r\n    };\r\n  }\r\n  /** @internal */\r\n  async setFocus(ev) {\r\n    ev.stopPropagation();\r\n    ev.preventDefault();\r\n    this.el.focus();\r\n  }\r\n  /** @internal */\r\n  async setButtonTabindex(value) {\r\n    this.buttonTabindex = value;\r\n  }\r\n  connectedCallback() {\r\n    if (this.value === undefined) {\r\n      this.value = this.inputId;\r\n    }\r\n    const radioGroup = this.radioGroup = this.el.closest('ion-radio-group');\r\n    if (radioGroup) {\r\n      this.updateState();\r\n      addEventListener(radioGroup, 'ionChange', this.updateState);\r\n    }\r\n  }\r\n  disconnectedCallback() {\r\n    const radioGroup = this.radioGroup;\r\n    if (radioGroup) {\r\n      removeEventListener(radioGroup, 'ionChange', this.updateState);\r\n      this.radioGroup = null;\r\n    }\r\n  }\r\n  componentWillLoad() {\r\n    this.emitStyle();\r\n  }\r\n  emitStyle() {\r\n    this.ionStyle.emit({\r\n      'radio-checked': this.checked,\r\n      'interactive-disabled': this.disabled,\r\n    });\r\n  }\r\n  render() {\r\n    const { inputId, disabled, checked, color, el, buttonTabindex } = this;\r\n    const mode = getIonMode(this);\r\n    const { label, labelId, labelText } = getAriaLabel(el, inputId);\r\n    return (h(Host, { \"aria-checked\": `${checked}`, \"aria-hidden\": disabled ? 'true' : null, \"aria-labelledby\": label ? labelId : null, role: \"radio\", tabindex: buttonTabindex, onFocus: this.onFocus, onBlur: this.onBlur, class: createColorClasses(color, {\r\n        [mode]: true,\r\n        'in-item': hostContext('ion-item', el),\r\n        'interactive': true,\r\n        'radio-checked': checked,\r\n        'radio-disabled': disabled,\r\n      }) }, h(\"div\", { class: \"radio-icon\", part: \"container\" }, h(\"div\", { class: \"radio-inner\", part: \"mark\" }), h(\"div\", { class: \"radio-ripple\" })), h(\"label\", { htmlFor: inputId }, labelText), h(\"input\", { type: \"radio\", checked: checked, disabled: disabled, tabindex: \"-1\", id: inputId })));\r\n  }\r\n  get el() { return getElement(this); }\r\n  static get watchers() { return {\r\n    \"color\": [\"emitStyle\"],\r\n    \"checked\": [\"emitStyle\"],\r\n    \"disabled\": [\"emitStyle\"]\r\n  }; }\r\n};\r\nlet radioButtonIds = 0;\r\nRadio.style = {\r\n  ios: radioIosCss,\r\n  md: radioMdCss\r\n};\r\n\r\nconst RadioGroup = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n    this.ionChange = createEvent(this, \"ionChange\", 7);\r\n    this.inputId = `ion-rg-${radioGroupIds++}`;\r\n    this.labelId = `${this.inputId}-lbl`;\r\n    /**\r\n     * If `true`, the radios can be deselected.\r\n     */\r\n    this.allowEmptySelection = false;\r\n    /**\r\n     * The name of the control, which is submitted with the form data.\r\n     */\r\n    this.name = this.inputId;\r\n    this.setRadioTabindex = (value) => {\r\n      const radios = this.getRadios();\r\n      // Get the first radio that is not disabled and the checked one\r\n      const first = radios.find(radio => !radio.disabled);\r\n      const checked = radios.find(radio => (radio.value === value && !radio.disabled));\r\n      if (!first && !checked) {\r\n        return;\r\n      }\r\n      // If an enabled checked radio exists, set it to be the focusable radio\r\n      // otherwise we default to focus the first radio\r\n      const focusable = checked || first;\r\n      for (const radio of radios) {\r\n        const tabindex = radio === focusable ? 0 : -1;\r\n        radio.setButtonTabindex(tabindex);\r\n      }\r\n    };\r\n    this.onClick = (ev) => {\r\n      ev.preventDefault();\r\n      const selectedRadio = ev.target && ev.target.closest('ion-radio');\r\n      if (selectedRadio) {\r\n        const currentValue = this.value;\r\n        const newValue = selectedRadio.value;\r\n        if (newValue !== currentValue) {\r\n          this.value = newValue;\r\n        }\r\n        else if (this.allowEmptySelection) {\r\n          this.value = undefined;\r\n        }\r\n      }\r\n    };\r\n  }\r\n  valueChanged(value) {\r\n    this.setRadioTabindex(value);\r\n    this.ionChange.emit({ value });\r\n  }\r\n  componentDidLoad() {\r\n    this.setRadioTabindex(this.value);\r\n  }\r\n  async connectedCallback() {\r\n    // Get the list header if it exists and set the id\r\n    // this is used to set aria-labelledby\r\n    const header = this.el.querySelector('ion-list-header') || this.el.querySelector('ion-item-divider');\r\n    if (header) {\r\n      const label = this.label = header.querySelector('ion-label');\r\n      if (label) {\r\n        this.labelId = label.id = this.name + '-lbl';\r\n      }\r\n    }\r\n  }\r\n  getRadios() {\r\n    return Array.from(this.el.querySelectorAll('ion-radio'));\r\n  }\r\n  onKeydown(ev) {\r\n    const inSelectPopover = !!this.el.closest('ion-select-popover');\r\n    if (ev.target && !this.el.contains(ev.target)) {\r\n      return;\r\n    }\r\n    // Get all radios inside of the radio group and then\r\n    // filter out disabled radios since we need to skip those\r\n    const radios = Array.from(this.el.querySelectorAll('ion-radio')).filter(radio => !radio.disabled);\r\n    // Only move the radio if the current focus is in the radio group\r\n    if (ev.target && radios.includes(ev.target)) {\r\n      const index = radios.findIndex(radio => radio === ev.target);\r\n      const current = radios[index];\r\n      let next;\r\n      // If hitting arrow down or arrow right, move to the next radio\r\n      // If we're on the last radio, move to the first radio\r\n      if (['ArrowDown', 'ArrowRight'].includes(ev.code)) {\r\n        next = (index === radios.length - 1)\r\n          ? radios[0]\r\n          : radios[index + 1];\r\n      }\r\n      // If hitting arrow up or arrow left, move to the previous radio\r\n      // If we're on the first radio, move to the last radio\r\n      if (['ArrowUp', 'ArrowLeft'].includes(ev.code)) {\r\n        next = (index === 0)\r\n          ? radios[radios.length - 1]\r\n          : radios[index - 1];\r\n      }\r\n      if (next && radios.includes(next)) {\r\n        next.setFocus(ev);\r\n        if (!inSelectPopover) {\r\n          this.value = next.value;\r\n        }\r\n      }\r\n      // Update the radio group value when a user presses the\r\n      // space bar on top of a selected radio\r\n      if (['Space'].includes(ev.code)) {\r\n        this.value = (this.allowEmptySelection && this.value !== undefined)\r\n          ? undefined\r\n          : current.value;\r\n        // Prevent browsers from jumping\r\n        // to the bottom of the screen\r\n        ev.preventDefault();\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    const { label, labelId } = this;\r\n    const mode = getIonMode(this);\r\n    return (h(Host, { role: \"radiogroup\", \"aria-labelledby\": label ? labelId : null, onClick: this.onClick, class: mode }));\r\n  }\r\n  get el() { return getElement(this); }\r\n  static get watchers() { return {\r\n    \"value\": [\"valueChanged\"]\r\n  }; }\r\n};\r\nlet radioGroupIds = 0;\r\n\r\nexport { Radio as ion_radio, RadioGroup as ion_radio_group };\r\n"]}