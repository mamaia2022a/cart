{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-infinite-scroll_2.entry.js"],"names":["InfiniteScroll","hostRef","r","this","ionInfinite","thrPx","thrPc","didFire","isBusy","isLoading","threshold","disabled","position","onScroll","scrollEl","canStart","infiniteHeight","el","offsetHeight","scrollTop","scrollHeight","height","emit","val","lastIndexOf","parseFloat","enableScrollEvents","contentEl","closest","getScrollElement","thresholdChanged","disabledChanged","clientHeight","console","error","undefined","prev","requestAnimationFrame","newScrollTop","shouldListen","addEventListener","removeEventListener","mode","h","H","class","style","InfiniteScrollContent","loadingSpinner","c","name","loadingText","innerHTML","s","ios","md"],"mappings":"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","file":"x","sourcesContent":["import { r as registerInstance, e as createEvent, c as writeTask, f as readTask, h, i as getElement, H as Host } from './index-7a8b7a1c.js';\r\nimport { b as getIonMode, c as config } from './ionic-global-63a97a32.js';\r\nimport { s as sanitizeDOMString } from './index-9e3fe806.js';\r\n\r\nconst infiniteScrollCss = \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\";\r\n\r\nconst InfiniteScroll = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n    this.ionInfinite = createEvent(this, \"ionInfinite\", 7);\r\n    this.thrPx = 0;\r\n    this.thrPc = 0;\r\n    this.didFire = false;\r\n    this.isBusy = false;\r\n    this.isLoading = false;\r\n    /**\r\n     * The threshold distance from the bottom\r\n     * of the content to call the `infinite` output event when scrolled.\r\n     * The threshold value can be either a percent, or\r\n     * in pixels. For example, use the value of `10%` for the `infinite`\r\n     * output event to get called when the user has scrolled 10%\r\n     * from the bottom of the page. Use the value `100px` when the\r\n     * scroll is within 100 pixels from the bottom of the page.\r\n     */\r\n    this.threshold = '15%';\r\n    /**\r\n     * If `true`, the infinite scroll will be hidden and scroll event listeners\r\n     * will be removed.\r\n     *\r\n     * Set this to true to disable the infinite scroll from actively\r\n     * trying to receive new data while scrolling. This is useful\r\n     * when it is known that there is no more data that can be added, and\r\n     * the infinite scroll is no longer needed.\r\n     */\r\n    this.disabled = false;\r\n    /**\r\n     * The position of the infinite scroll element.\r\n     * The value can be either `top` or `bottom`.\r\n     */\r\n    this.position = 'bottom';\r\n    this.onScroll = () => {\r\n      const scrollEl = this.scrollEl;\r\n      if (!scrollEl || !this.canStart()) {\r\n        return 1;\r\n      }\r\n      const infiniteHeight = this.el.offsetHeight;\r\n      if (infiniteHeight === 0) {\r\n        // if there is no height of this element then do nothing\r\n        return 2;\r\n      }\r\n      const scrollTop = scrollEl.scrollTop;\r\n      const scrollHeight = scrollEl.scrollHeight;\r\n      const height = scrollEl.offsetHeight;\r\n      const threshold = this.thrPc !== 0 ? (height * this.thrPc) : this.thrPx;\r\n      const distanceFromInfinite = (this.position === 'bottom')\r\n        ? scrollHeight - infiniteHeight - scrollTop - threshold - height\r\n        : scrollTop - infiniteHeight - threshold;\r\n      if (distanceFromInfinite < 0) {\r\n        if (!this.didFire) {\r\n          this.isLoading = true;\r\n          this.didFire = true;\r\n          this.ionInfinite.emit();\r\n          return 3;\r\n        }\r\n      }\r\n      else {\r\n        this.didFire = false;\r\n      }\r\n      return 4;\r\n    };\r\n  }\r\n  thresholdChanged() {\r\n    const val = this.threshold;\r\n    if (val.lastIndexOf('%') > -1) {\r\n      this.thrPx = 0;\r\n      this.thrPc = (parseFloat(val) / 100);\r\n    }\r\n    else {\r\n      this.thrPx = parseFloat(val);\r\n      this.thrPc = 0;\r\n    }\r\n  }\r\n  disabledChanged() {\r\n    const disabled = this.disabled;\r\n    if (disabled) {\r\n      this.isLoading = false;\r\n      this.isBusy = false;\r\n    }\r\n    this.enableScrollEvents(!disabled);\r\n  }\r\n  async connectedCallback() {\r\n    const contentEl = this.el.closest('ion-content');\r\n    if (!contentEl) {\r\n      console.error('<ion-infinite-scroll> must be used inside an <ion-content>');\r\n      return;\r\n    }\r\n    this.scrollEl = await contentEl.getScrollElement();\r\n    this.thresholdChanged();\r\n    this.disabledChanged();\r\n    if (this.position === 'top') {\r\n      writeTask(() => {\r\n        if (this.scrollEl) {\r\n          this.scrollEl.scrollTop = this.scrollEl.scrollHeight - this.scrollEl.clientHeight;\r\n        }\r\n      });\r\n    }\r\n  }\r\n  disconnectedCallback() {\r\n    this.enableScrollEvents(false);\r\n    this.scrollEl = undefined;\r\n  }\r\n  /**\r\n   * Call `complete()` within the `ionInfinite` output event handler when\r\n   * your async operation has completed. For example, the `loading`\r\n   * state is while the app is performing an asynchronous operation,\r\n   * such as receiving more data from an AJAX request to add more items\r\n   * to a data list. Once the data has been received and UI updated, you\r\n   * then call this method to signify that the loading has completed.\r\n   * This method will change the infinite scroll's state from `loading`\r\n   * to `enabled`.\r\n   */\r\n  async complete() {\r\n    const scrollEl = this.scrollEl;\r\n    if (!this.isLoading || !scrollEl) {\r\n      return;\r\n    }\r\n    this.isLoading = false;\r\n    if (this.position === 'top') {\r\n      /**\r\n       * New content is being added at the top, but the scrollTop position stays the same,\r\n       * which causes a scroll jump visually. This algorithm makes sure to prevent this.\r\n       * (Frame 1)\r\n       *    - complete() is called, but the UI hasn't had time to update yet.\r\n       *    - Save the current content dimensions.\r\n       *    - Wait for the next frame using _dom.read, so the UI will be updated.\r\n       * (Frame 2)\r\n       *    - Read the new content dimensions.\r\n       *    - Calculate the height difference and the new scroll position.\r\n       *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\r\n       * (Still frame 2, if I'm correct)\r\n       *    - Change the scroll position (= visually maintain the scroll position).\r\n       *    - Change the state to re-enable the InfiniteScroll.\r\n       *    - This should be after changing the scroll position, or it could\r\n       *    cause the InfiniteScroll to be triggered again immediately.\r\n       * (Frame 3)\r\n       *    Done.\r\n       */\r\n      this.isBusy = true;\r\n      // ******** DOM READ ****************\r\n      // Save the current content dimensions before the UI updates\r\n      const prev = scrollEl.scrollHeight - scrollEl.scrollTop;\r\n      // ******** DOM READ ****************\r\n      requestAnimationFrame(() => {\r\n        readTask(() => {\r\n          // UI has updated, save the new content dimensions\r\n          const scrollHeight = scrollEl.scrollHeight;\r\n          // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\r\n          const newScrollTop = scrollHeight - prev;\r\n          // ******** DOM WRITE ****************\r\n          requestAnimationFrame(() => {\r\n            writeTask(() => {\r\n              scrollEl.scrollTop = newScrollTop;\r\n              this.isBusy = false;\r\n            });\r\n          });\r\n        });\r\n      });\r\n    }\r\n  }\r\n  canStart() {\r\n    return (!this.disabled &&\r\n      !this.isBusy &&\r\n      !!this.scrollEl &&\r\n      !this.isLoading);\r\n  }\r\n  enableScrollEvents(shouldListen) {\r\n    if (this.scrollEl) {\r\n      if (shouldListen) {\r\n        this.scrollEl.addEventListener('scroll', this.onScroll);\r\n      }\r\n      else {\r\n        this.scrollEl.removeEventListener('scroll', this.onScroll);\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    const mode = getIonMode(this);\r\n    const disabled = this.disabled;\r\n    return (h(Host, { class: {\r\n        [mode]: true,\r\n        'infinite-scroll-loading': this.isLoading,\r\n        'infinite-scroll-enabled': !disabled\r\n      } }));\r\n  }\r\n  get el() { return getElement(this); }\r\n  static get watchers() { return {\r\n    \"threshold\": [\"thresholdChanged\"],\r\n    \"disabled\": [\"disabledChanged\"]\r\n  }; }\r\n};\r\nInfiniteScroll.style = infiniteScrollCss;\r\n\r\nconst infiniteScrollContentIosCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-ios .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-small-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\r\n\r\nconst infiniteScrollContentMdCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-md .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-small-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\r\n\r\nconst InfiniteScrollContent = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n  }\r\n  componentDidLoad() {\r\n    if (this.loadingSpinner === undefined) {\r\n      const mode = getIonMode(this);\r\n      this.loadingSpinner = config.get('infiniteLoadingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\r\n    }\r\n  }\r\n  render() {\r\n    const mode = getIonMode(this);\r\n    return (h(Host, { class: {\r\n        [mode]: true,\r\n        // Used internally for styling\r\n        [`infinite-scroll-content-${mode}`]: true\r\n      } }, h(\"div\", { class: \"infinite-loading\" }, this.loadingSpinner && (h(\"div\", { class: \"infinite-loading-spinner\" }, h(\"ion-spinner\", { name: this.loadingSpinner }))), this.loadingText && (h(\"div\", { class: \"infinite-loading-text\", innerHTML: sanitizeDOMString(this.loadingText) })))));\r\n  }\r\n};\r\nInfiniteScrollContent.style = {\r\n  ios: infiniteScrollContentIosCss,\r\n  md: infiniteScrollContentMdCss\r\n};\r\n\r\nexport { InfiniteScroll as ion_infinite_scroll, InfiniteScrollContent as ion_infinite_scroll_content };\r\n"]}