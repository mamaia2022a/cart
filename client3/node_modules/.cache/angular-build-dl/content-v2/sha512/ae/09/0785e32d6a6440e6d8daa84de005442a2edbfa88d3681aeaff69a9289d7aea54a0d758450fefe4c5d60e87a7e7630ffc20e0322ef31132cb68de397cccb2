{"version":3,"sources":["webpack:///src/app/payloads/aut/RegisterRequest.ts","webpack:///src/app/pages/auth/register/register.page.ts","webpack:///src/app/pages/auth/register/register.page.html","webpack:///src/app/pages/auth/register/register.page.scss","webpack:///src/app/pages/auth/register/register-routing.module.ts","webpack:///src/app/pages/auth/register/register.module.ts"],"names":["RegisterRequest","RegisterPage","store","navController","platform","storage","register","username","password","passwordConfirm","nume","prenume","telefon","email","sex","domzonatara","domjudet","domlocalitate","domcodpostal","domadresa","validators","this","passwordConfirmMatchValidator","judete","self","dispatch","subscribe","console","log","data","get","of","error","Promise","resolve","then","value","valid","registerRequest","domZonataraid","domJudetid","domLocalitateid","domCodpostal","domAdresa","obsActionRegister","g","hasError","setErrors","mismatch","selector","template","routes","path","component","RegisterPageRoutingModule","imports","exports","RegisterPageModule","declarations"],"mappings":"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","file":"x","sourcesContent":["export class RegisterRequest\r\n{\r\n\r\n\tusername:string;\r\n\r\n\tpassword:string;\r\n\r\n\tuserinfoid:number;\r\n\r\n\tuserid:number;\r\n\r\n\tnume:string;\r\n\r\n\tprenume:string;\r\n\r\n\ttelefon:string;\r\n\r\n\tsex:string;\r\n\r\n\temail:string;\r\n\r\n\tdomZonataraid:string;\r\n\tdomZonataracod:string;\r\n\r\n\tdomJudetid:number;\r\n\tdomJudetcod:string;\r\n\r\n\tdomLocalitateid:number;\r\n\tdomLocalitatecod:string;\r\n\r\n\tdomCodpostal:string;\r\n\r\n\tdomAdresa:string;\r\n\r\n    rezdifdedom:string;\r\n\r\n\trezZonataraid:string;\r\n\r\n\trezZonataracod:string;\r\n\r\n\trezJudetid:string;\r\n\r\n\trezJudetcod:string;\r\n\r\n\trezLocalitateid:string;\r\n\r\n\trezLocalitatecod:string;\r\n\r\n\trezCodpostal:string;\r\n\r\n\trezAdresa:string;\r\n\r\n\r\n    constructor(){\r\n    \r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport { AbstractControl, FormControl, FormGroup, ValidationErrors, Validators } from '@angular/forms';\nimport { AuthAction } from '../../../core/auth-guard/auth-guard.actions';\nimport { RegisterRequest } from '../../../payloads/aut/RegisterRequest';\nimport { NavController, Platform } from '@ionic/angular';\nimport { Store } from '@ngxs/store';\nimport { Observable, of } from 'rxjs';\nimport { Storage } from '@ionic/storage';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.page.html',\n  styleUrls: ['./register.page.scss'],\n})\nexport class RegisterPage implements OnInit {\n  register: FormGroup = new FormGroup(\n    {\n       username: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(150)]),\n       password: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(150)]),\n       passwordConfirm: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(150)]),\n       nume: new FormControl('', [Validators.required, Validators.maxLength(150)]),\n       prenume: new FormControl('', [Validators.required, Validators.maxLength(150)]),\n       telefon: new FormControl('', [Validators.required, Validators.maxLength(150)]),\n       email: new FormControl('', [Validators.required, Validators.maxLength(150)]),\n       sex: new FormControl('', [Validators.required, Validators.maxLength(150)]),\n       domzonatara: new FormControl('', [Validators.required, Validators.maxLength(150)]),\n       domjudet: new FormControl('', [Validators.required, Validators.maxLength(150)]),\n       domlocalitate: new FormControl('', [Validators.required, Validators.maxLength(150)]),\n       domcodpostal: new FormControl('', [Validators.required, Validators.maxLength(150)]),\n       domadresa: new FormControl('', [Validators.required, Validators.maxLength(150)]),\n    },\n    { validators: this.passwordConfirmMatchValidator },\n  );\n\n  obsActionRegister: Observable<any>;\n  obsActionJudete: Observable<any>;\n\n  judete : Observable<any> = null;\n  \n  constructor(private store: Store, private navController: NavController, private platform: Platform, private storage: Storage) \n  {\n    var zonataraid : number = 1;\n    var self = this;\n    this.store.dispatch(new AuthAction.GeoJudete(zonataraid)).subscribe(async () => {\n      console.log('GEO JUDETE: ');\n      var data = await this.storage.get('judete');\n      //--- Marius A.: what a fuck the storage is doing first time, even having await, when the set is well down before?\n      if (data == null) \n      {\n        data = await this.storage.get('judete');\n      }\n      //---\n      self.judete = of(data);\n      /** \n      self.getLocalStorageData()\n      .then(data =>{\n        self.judete = of(data);\n      })\n      */\n    },\n    error => {\n      console.log('GEO JUDETE ERROR: ' + error);\n    }\n    );\n    /** \n  \n    this.store.dispatch(new AuthAction.GeoJudete(zonataraid)).subscribe(\n        info => {\n          console.log('GEO JUDETE: ' + info);\n          this.getLocalStorageData()\n          .then(data =>{\n                //ok\n          })\n        },\n        error => {\n          console.log('GEO JUDETE ERROR: ' + error);\n        }\n      );\n      */\n  }\n\n  getLocalStorageData(){\n    var self =this;\n    return new Promise(resolve => {\n      self.storage.get(\"judete\")\n        .then( value => \n            { \n              //if (value == null)\n                //return this.store.dispatch(new AuthAction.GeoJudete(1));\n              //self.judete = of(value);\n              //console.log(value);\n              resolve(value);\n            });\n            \n         });\n    }\n\n  selectieDomJudet() \n  {\n    var a = 1;\n  }\n\n  onRegister() {\n    if (this.register.valid) {\n      console.log(this.register.value);\n      var registerRequest : RegisterRequest = new RegisterRequest();\n      registerRequest.username         = this.register.get(\"username\").value;\n      registerRequest.password         = this.register.get(\"password\").value;\n      registerRequest.nume             = this.register.get(\"nume\").value;\n      registerRequest.prenume          = this.register.get(\"prenume\").value;\n      registerRequest.telefon          = this.register.get(\"telefon\").value;\n      registerRequest.email            = this.register.get(\"email\").value;\n      registerRequest.sex              = this.register.get(\"sex\").value;\n      registerRequest.domZonataraid    = this.register.get(\"domzonatara\").value;\n      registerRequest.domJudetid       = this.register.get(\"domjudet\").value;\n      registerRequest.domLocalitateid  = this.register.get(\"domlocalitate\").value;\n      registerRequest.domCodpostal     = this.register.get(\"domcodpostal\").value;\n      registerRequest.domAdresa        = this.register.get(\"domadresa\").value;\n\n      this.obsActionRegister = this.store.dispatch(new AuthAction.Register(registerRequest));\n      /** \n      this.obsActionRegister.subscribe(\n        info => {\n          console.log('REGISTER: ' + info);\n        },\n        error => {\n          console.log('REGISTER ERROR: ' + error);\n        }\n      );*/\n\n    }\n  }\n\n  ngOnInit(): void {}\n\n  passwordConfirmMatchValidator(g: AbstractControl): ValidationErrors | null {\n    const password = g.get('password');\n    const passwordConfirm = g.get('passwordConfirm');\n\n    if (passwordConfirm.hasError('required') || passwordConfirm.hasError('minlength')) {\n      return;\n    }\n\n    if (password.value !== passwordConfirm.value) {\n      passwordConfirm.setErrors({\n        mismatch: true,\n      });\n    } else {\n      passwordConfirm.setErrors(null);\n    }\n  }\n \n\n  /**\n  authUrl = \"https://sampleapi.herokuapp.com\"\n  authHeaders;\n\n  getToken() {\n  this.storage.get('token').then((token) => {\n    console.log('Bearer ' + token);\n    this.authHeaders = {\n      headers: new HttpHeaders({\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      })\n  }\n  });\n  }\n\n  getInfo(): Observable<Info> {\n  return this.http.get<Info>(this.authUrl + '/api/users/info', this.authHeaders).pipe(\n    catchError(this.handleError)\n  );\n  }\n\n  ionViewDidLoad() {\n    this._dashboardService.getToken();\n    this._dashboardService.getInfo().subscribe(\n      info => {\n        console.log('USER INFO: ' + info);\n        this.info = info\n      },\n      error => {\n        console.log('INFO ERROR: ' + error);\n      }\n    );\n    }\n    */\n}\n","export default \"<ion-header class=\\\"ion-no-border\\\">\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button [text]=\\\"'backButtonTitle' | translate\\\" defaultHref=\\\"/auth/login\\\"></ion-back-button>\\n    </ion-buttons>\\n    <ion-title>Înregistrare</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content [fullscreen]=\\\"true\\\" class=\\\"auth-page\\\">\\n  <ion-grid>\\n    <ion-row>\\n      <ion-col class=\\\"ion-text-center\\\" size-md=\\\"6\\\" size-lg=\\\"5\\\" size-xs=\\\"12\\\">\\n        <form [formGroup]=\\\"register\\\" (ngSubmit)=\\\"onRegister()\\\">\\n          <ion-card color=\\\"light\\\" class=\\\"auth-card ion-margin\\\">\\n            <ion-item color=\\\"light\\\" class=\\\"ion-no-inner-padding-end\\\">\\n              <ion-input type=\\\"text\\\" placeholder=\\\"Nume utilizator (minim 5)\\\" formControlName=\\\"username\\\"></ion-input>\\n            </ion-item>\\n            <ion-item color=\\\"light\\\" class=\\\"ion-no-inner-padding-end\\\">\\n              <ion-input type=\\\"password\\\" placeholder=\\\"Parola (minim 5)\\\" formControlName=\\\"password\\\"></ion-input>\\n            </ion-item>\\n            <ion-item color=\\\"light\\\" class=\\\"ion-no-inner-padding-end\\\">\\n              <ion-input type=\\\"password\\\" placeholder=\\\"Parola (confirmare)\\\" formControlName=\\\"passwordConfirm\\\">\\n              </ion-input>\\n            </ion-item>\\n            <ion-item color=\\\"light\\\">\\n              <ion-input type=\\\"text\\\" placeholder=\\\"Nume\\\" formControlName=\\\"nume\\\"></ion-input>\\n            </ion-item>\\n            <ion-item color=\\\"light\\\">\\n              <ion-input type=\\\"text\\\" placeholder=\\\"Prenume\\\" formControlName=\\\"prenume\\\"></ion-input>\\n            </ion-item>\\n            <ion-item color=\\\"light\\\">\\n              <ion-input type=\\\"text\\\" placeholder=\\\"Telefon\\\" formControlName=\\\"telefon\\\"></ion-input>\\n            </ion-item>\\n            <ion-item color=\\\"light\\\">\\n              <ion-input type=\\\"text\\\" placeholder=\\\"Email\\\" formControlName=\\\"email\\\"></ion-input>\\n            </ion-item>\\n            <ion-item color=\\\"light\\\">\\n              <ion-select placeholder=\\\"Sexul\\\" formControlName=\\\"sex\\\">\\n                <ion-select-option value=\\\"f\\\">Feminin</ion-select-option>\\n                <ion-select-option value=\\\"m\\\">Masculin</ion-select-option>\\n              </ion-select>\\n            </ion-item>\\n            <ion-item color=\\\"light\\\">\\n              <ion-select placeholder=\\\"Domiciliu în Țară sau în Diaspora?\\\" formControlName=\\\"domzonatara\\\">\\n                <ion-select-option value=\\\"TR\\\">Țară</ion-select-option>\\n                <ion-select-option value=\\\"DS\\\">Diaspora</ion-select-option>\\n              </ion-select>\\n            </ion-item>\\n            <ion-item color=\\\"light\\\">\\n              <ng-container *ngIf=\\\"judete\\\">\\n                <ion-select placeholder=\\\"Județul de domiciliu\\\" formControlName=\\\"domjudet\\\" (ionChange)=\\\"selectieDomJudet()\\\">\\n                   <ion-select-option value=\\\"{{judet.geoJudetId}}\\\" *ngFor='let judet of (judete|async)'>{{judet.geoJudetNume}}</ion-select-option>\\n              </ion-select>\\n              </ng-container>\\n            </ion-item>\\n            <ion-item color=\\\"light\\\">\\n              <ion-select placeholder=\\\"Localitatea de domiciliu\\\" formControlName=\\\"domlocalitate\\\">\\n                <ion-select-option value=\\\"122\\\">Turda</ion-select-option>\\n                <ion-select-option value=\\\"222\\\">Sector 3</ion-select-option>\\n              </ion-select>\\n            </ion-item>\\n            <ion-item color=\\\"light\\\">\\n              <ion-input type=\\\"text\\\" placeholder=\\\"Codul Postal la Domiciliu\\\" formControlName=\\\"domcodpostal\\\"></ion-input>\\n            </ion-item>\\n            <ion-item color=\\\"light\\\">\\n              <ion-input type=\\\"text\\\" placeholder=\\\"Adresa de Domiciliu\\\" formControlName=\\\"domadresa\\\"></ion-input>\\n            </ion-item>\\n\\n          </ion-card>\\n\\n          <ion-button\\n            expand=\\\"block\\\"\\n            class=\\\"ion-margin-start ion-margin-end ion-margin-bottom\\\"\\n            type=\\\"submit\\\"\\n            [disabled]=\\\"!register.valid\\\"\\n          >\\n            Înregistrare\\n          </ion-button>\\n          <span class=\\\"ion-margin\\\"></span>\\n        </form>\\n\\n        <p class=\\\"ion-margin\\\">\\n          <ion-text>\\n            Apăsând butonul \\\"Înregistrare\\\", sunteți de acord cu:\\n            <a href=\\\"http://\\\">Terms of Service</a>\\n            și cu:\\n            <a href=\\\"http://\\\">Privacy Policy</a>\\n          </ion-text>\\n        </p>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n</ion-content>\\n\";","export default \"\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { RegisterPage } from './register.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RegisterPage,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class RegisterPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\nimport { SharedModule } from '../../../shared/shared.module';\nimport { RegisterPage } from './register.page';\nimport { RegisterPageRoutingModule } from './register-routing.module';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, IonicModule, RegisterPageRoutingModule, SharedModule],\n  declarations: [RegisterPage],\n})\nexport class RegisterPageModule {}\n"]}