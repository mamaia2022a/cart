{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/shadow-css-a3f00b33.js"],"names":["_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_polyfillHostRe","_colonHostRe","_colonSlottedRe","_colonHostContextRe","_commentRe","_commentWithHashRe","_ruleRe","_curlyRe","processRules","input","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedString","replace","selector","content","suffix","contentPrefix","startsWith","blocks","substring","length","rule","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","part","push","join","convertColonRule","cssText","regExp","partReplacer","m","parts","r","i","p","trim","_polyfillHost","colonHostPartReplacer","host","colonHostContextPartReplacer","indexOf","scopeSelectors","scopeSelectorText","hostSelector","slotSelector","commentOriginalSelector","map","shallowPart","scopeSelector","test","selectorNeedsScoping","res","className","_","_scopeSelectorPart","scopedP","lastIndex","replaceBy","before","colon","after","t","matches","match","safeContent","placeholders","index","keep","pseudo","exp","scopedSelector","startIndex","sep","shouldScope","exec","separator","slice","applyStrictSelectorScope","scopeCss","scopeId","hostScopeId","slotScopeId","commentsWithHash","orgSelectors","processCommentedSelector","placeholder","comment","scoped","slotted","slotClass","selectors","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","trimRight","updatedSelector","reduce","result","pattern","slottedSelectors","scopeCssText","forEach"],"mappings":"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","file":"x","sourcesContent":["/*\r\n Stencil Client Platform v2.5.0 | MIT Licensed | https://stenciljs.com\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n *\r\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\r\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\r\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\r\n */\r\nconst safeSelector = (selector) => {\r\n    const placeholders = [];\r\n    let index = 0;\r\n    let content;\r\n    // Replaces attribute selectors with placeholders.\r\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\r\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\r\n        const replaceBy = `__ph-${index}__`;\r\n        placeholders.push(keep);\r\n        index++;\r\n        return replaceBy;\r\n    });\r\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\r\n    // WS and \"+\" would otherwise be interpreted as selector separators.\r\n    content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\r\n        const replaceBy = `__ph-${index}__`;\r\n        placeholders.push(exp);\r\n        index++;\r\n        return pseudo + replaceBy;\r\n    });\r\n    const ss = {\r\n        content,\r\n        placeholders,\r\n    };\r\n    return ss;\r\n};\r\nconst restoreSafeSelector = (placeholders, content) => {\r\n    return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\r\n};\r\nconst _polyfillHost = '-shadowcsshost';\r\nconst _polyfillSlotted = '-shadowcssslotted';\r\n// note: :host-context pre-processed to -shadowcsshostcontext.\r\nconst _polyfillHostContext = '-shadowcsscontext';\r\nconst _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\r\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\r\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\r\nconst _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\r\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\r\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\r\nconst _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\r\nconst _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\r\nconst _polyfillHostRe = /-shadowcsshost/gim;\r\nconst _colonHostRe = /:host/gim;\r\nconst _colonSlottedRe = /::slotted/gim;\r\nconst _colonHostContextRe = /:host-context/gim;\r\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\r\nconst stripComments = (input) => {\r\n    return input.replace(_commentRe, '');\r\n};\r\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\r\nconst extractCommentsWithHash = (input) => {\r\n    return input.match(_commentWithHashRe) || [];\r\n};\r\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\r\nconst _curlyRe = /([{}])/g;\r\nconst OPEN_CURLY = '{';\r\nconst CLOSE_CURLY = '}';\r\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\r\nconst processRules = (input, ruleCallback) => {\r\n    const inputWithEscapedBlocks = escapeBlocks(input);\r\n    let nextBlockIndex = 0;\r\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\r\n        const selector = m[2];\r\n        let content = '';\r\n        let suffix = m[4];\r\n        let contentPrefix = '';\r\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\r\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\r\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\r\n            contentPrefix = '{';\r\n        }\r\n        const cssRule = {\r\n            selector,\r\n            content,\r\n        };\r\n        const rule = ruleCallback(cssRule);\r\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\r\n    });\r\n};\r\nconst escapeBlocks = (input) => {\r\n    const inputParts = input.split(_curlyRe);\r\n    const resultParts = [];\r\n    const escapedBlocks = [];\r\n    let bracketCount = 0;\r\n    let currentBlockParts = [];\r\n    for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\r\n        const part = inputParts[partIndex];\r\n        if (part === CLOSE_CURLY) {\r\n            bracketCount--;\r\n        }\r\n        if (bracketCount > 0) {\r\n            currentBlockParts.push(part);\r\n        }\r\n        else {\r\n            if (currentBlockParts.length > 0) {\r\n                escapedBlocks.push(currentBlockParts.join(''));\r\n                resultParts.push(BLOCK_PLACEHOLDER);\r\n                currentBlockParts = [];\r\n            }\r\n            resultParts.push(part);\r\n        }\r\n        if (part === OPEN_CURLY) {\r\n            bracketCount++;\r\n        }\r\n    }\r\n    if (currentBlockParts.length > 0) {\r\n        escapedBlocks.push(currentBlockParts.join(''));\r\n        resultParts.push(BLOCK_PLACEHOLDER);\r\n    }\r\n    const strEscapedBlocks = {\r\n        escapedString: resultParts.join(''),\r\n        blocks: escapedBlocks,\r\n    };\r\n    return strEscapedBlocks;\r\n};\r\nconst insertPolyfillHostInCssText = (selector) => {\r\n    selector = selector\r\n        .replace(_colonHostContextRe, _polyfillHostContext)\r\n        .replace(_colonHostRe, _polyfillHost)\r\n        .replace(_colonSlottedRe, _polyfillSlotted);\r\n    return selector;\r\n};\r\nconst convertColonRule = (cssText, regExp, partReplacer) => {\r\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\r\n    return cssText.replace(regExp, (...m) => {\r\n        if (m[2]) {\r\n            const parts = m[2].split(',');\r\n            const r = [];\r\n            for (let i = 0; i < parts.length; i++) {\r\n                const p = parts[i].trim();\r\n                if (!p)\r\n                    break;\r\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\r\n            }\r\n            return r.join(',');\r\n        }\r\n        else {\r\n            return _polyfillHostNoCombinator + m[3];\r\n        }\r\n    });\r\n};\r\nconst colonHostPartReplacer = (host, part, suffix) => {\r\n    return host + part.replace(_polyfillHost, '') + suffix;\r\n};\r\nconst convertColonHost = (cssText) => {\r\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\r\n};\r\nconst colonHostContextPartReplacer = (host, part, suffix) => {\r\n    if (part.indexOf(_polyfillHost) > -1) {\r\n        return colonHostPartReplacer(host, part, suffix);\r\n    }\r\n    else {\r\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\r\n    }\r\n};\r\nconst convertColonSlotted = (cssText, slotScopeId) => {\r\n    const slotClass = '.' + slotScopeId + ' > ';\r\n    const selectors = [];\r\n    cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\r\n        if (m[2]) {\r\n            const compound = m[2].trim();\r\n            const suffix = m[3];\r\n            const slottedSelector = slotClass + compound + suffix;\r\n            let prefixSelector = '';\r\n            for (let i = m[4] - 1; i >= 0; i--) {\r\n                const char = m[5][i];\r\n                if (char === '}' || char === ',') {\r\n                    break;\r\n                }\r\n                prefixSelector = char + prefixSelector;\r\n            }\r\n            const orgSelector = prefixSelector + slottedSelector;\r\n            const addedSelector = `${prefixSelector.trimRight()}${slottedSelector.trim()}`;\r\n            if (orgSelector.trim() !== addedSelector.trim()) {\r\n                const updatedSelector = `${addedSelector}, ${orgSelector}`;\r\n                selectors.push({\r\n                    orgSelector,\r\n                    updatedSelector,\r\n                });\r\n            }\r\n            return slottedSelector;\r\n        }\r\n        else {\r\n            return _polyfillHostNoCombinator + m[3];\r\n        }\r\n    });\r\n    return {\r\n        selectors,\r\n        cssText,\r\n    };\r\n};\r\nconst convertColonHostContext = (cssText) => {\r\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\r\n};\r\nconst convertShadowDOMSelectors = (cssText) => {\r\n    return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\r\n};\r\nconst makeScopeMatcher = (scopeSelector) => {\r\n    const lre = /\\[/g;\r\n    const rre = /\\]/g;\r\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\r\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\r\n};\r\nconst selectorNeedsScoping = (selector, scopeSelector) => {\r\n    const re = makeScopeMatcher(scopeSelector);\r\n    return !re.test(selector);\r\n};\r\nconst applySimpleSelectorScope = (selector, scopeSelector, hostSelector) => {\r\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\r\n    _polyfillHostRe.lastIndex = 0;\r\n    if (_polyfillHostRe.test(selector)) {\r\n        const replaceBy = `.${hostSelector}`;\r\n        return selector\r\n            .replace(_polyfillHostNoCombinatorRe, (_, selector) => {\r\n            return selector.replace(/([^:]*)(:*)(.*)/, (_, before, colon, after) => {\r\n                return before + replaceBy + colon + after;\r\n            });\r\n        })\r\n            .replace(_polyfillHostRe, replaceBy + ' ');\r\n    }\r\n    return scopeSelector + ' ' + selector;\r\n};\r\nconst applyStrictSelectorScope = (selector, scopeSelector, hostSelector) => {\r\n    const isRe = /\\[is=([^\\]]*)\\]/g;\r\n    scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\r\n    const className = '.' + scopeSelector;\r\n    const _scopeSelectorPart = (p) => {\r\n        let scopedP = p.trim();\r\n        if (!scopedP) {\r\n            return '';\r\n        }\r\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\r\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\r\n        }\r\n        else {\r\n            // remove :host since it should be unnecessary\r\n            const t = p.replace(_polyfillHostRe, '');\r\n            if (t.length > 0) {\r\n                const matches = t.match(/([^:]*)(:*)(.*)/);\r\n                if (matches) {\r\n                    scopedP = matches[1] + className + matches[2] + matches[3];\r\n                }\r\n            }\r\n        }\r\n        return scopedP;\r\n    };\r\n    const safeContent = safeSelector(selector);\r\n    selector = safeContent.content;\r\n    let scopedSelector = '';\r\n    let startIndex = 0;\r\n    let res;\r\n    const sep = /( |>|\\+|~(?!=))\\s*/g;\r\n    // If a selector appears before :host it should not be shimmed as it\r\n    // matches on ancestor elements and not on elements in the host's shadow\r\n    // `:host-context(div)` is transformed to\r\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\r\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\r\n    // Historically `component-tag:host` was matching the component so we also want to preserve\r\n    // this behavior to avoid breaking legacy apps (it should not match).\r\n    // The behavior should be:\r\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\r\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\r\n    //   `:host-context(tag)`)\r\n    const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\r\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\r\n    let shouldScope = !hasHost;\r\n    while ((res = sep.exec(selector)) !== null) {\r\n        const separator = res[1];\r\n        const part = selector.slice(startIndex, res.index).trim();\r\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\r\n        const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\r\n        scopedSelector += `${scopedPart} ${separator} `;\r\n        startIndex = sep.lastIndex;\r\n    }\r\n    const part = selector.substring(startIndex);\r\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\r\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\r\n    // replace the placeholders with their original values\r\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\r\n};\r\nconst scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\r\n    return selector\r\n        .split(',')\r\n        .map(shallowPart => {\r\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\r\n            return shallowPart.trim();\r\n        }\r\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\r\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\r\n        }\r\n        else {\r\n            return shallowPart.trim();\r\n        }\r\n    })\r\n        .join(', ');\r\n};\r\nconst scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\r\n    return processRules(cssText, (rule) => {\r\n        let selector = rule.selector;\r\n        let content = rule.content;\r\n        if (rule.selector[0] !== '@') {\r\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\r\n        }\r\n        else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\r\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\r\n        }\r\n        const cssRule = {\r\n            selector: selector.replace(/\\s{2,}/g, ' ').trim(),\r\n            content,\r\n        };\r\n        return cssRule;\r\n    });\r\n};\r\nconst scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\r\n    cssText = insertPolyfillHostInCssText(cssText);\r\n    cssText = convertColonHost(cssText);\r\n    cssText = convertColonHostContext(cssText);\r\n    const slotted = convertColonSlotted(cssText, slotScopeId);\r\n    cssText = slotted.cssText;\r\n    cssText = convertShadowDOMSelectors(cssText);\r\n    if (scopeId) {\r\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\r\n    }\r\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\r\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\r\n    return {\r\n        cssText: cssText.trim(),\r\n        slottedSelectors: slotted.selectors,\r\n    };\r\n};\r\nconst scopeCss = (cssText, scopeId, commentOriginalSelector) => {\r\n    const hostScopeId = scopeId + '-h';\r\n    const slotScopeId = scopeId + '-s';\r\n    const commentsWithHash = extractCommentsWithHash(cssText);\r\n    cssText = stripComments(cssText);\r\n    const orgSelectors = [];\r\n    if (commentOriginalSelector) {\r\n        const processCommentedSelector = (rule) => {\r\n            const placeholder = `/*!@___${orgSelectors.length}___*/`;\r\n            const comment = `/*!@${rule.selector}*/`;\r\n            orgSelectors.push({ placeholder, comment });\r\n            rule.selector = placeholder + rule.selector;\r\n            return rule;\r\n        };\r\n        cssText = processRules(cssText, rule => {\r\n            if (rule.selector[0] !== '@') {\r\n                return processCommentedSelector(rule);\r\n            }\r\n            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\r\n                rule.content = processRules(rule.content, processCommentedSelector);\r\n                return rule;\r\n            }\r\n            return rule;\r\n        });\r\n    }\r\n    const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\r\n    cssText = [scoped.cssText, ...commentsWithHash].join('\\n');\r\n    if (commentOriginalSelector) {\r\n        orgSelectors.forEach(({ placeholder, comment }) => {\r\n            cssText = cssText.replace(placeholder, comment);\r\n        });\r\n    }\r\n    scoped.slottedSelectors.forEach(slottedSelector => {\r\n        cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\r\n    });\r\n    return cssText;\r\n};\r\n\r\nexport { scopeCss };\r\n"]}