{"version":3,"sources":["webpack:///src/app/pages/auth/auth-pin/auth-pin.page.ts","webpack:///src/app/pages/auth/auth-pin/auth-pin.animation.ts","webpack:///src/app/pages/auth/auth-pin/auth-pin.page.html","webpack:///src/app/pages/auth/auth-pin/auth-pin.page.scss","webpack:///src/app/pages/auth/auth-pin/auth-pin-routing.module.ts","webpack:///src/app/pages/auth/auth-pin/auth-pin.module.ts"],"names":["AuthPinPage","pinLength","pinRange","Array","this","fill","undefined","pin","fingerPrintAvailable","digits","area","dig","baseEl","length","push","document","getElementById","addElement","easing","duration","keyframes","offset","transform","play","pop","console","log","selector","template","routes","path","component","AuthPinPageRoutingModule","imports","exports","AuthPinPageModule","declarations"],"mappings":"sOAQaA,EAAW,MAwBtB,cAvBA,KAAAC,UAAY,EACZ,KAAAC,SAAWC,MAAMC,KAAKH,WAAWI,UAAKC,GACtC,KAAAC,IAAgB,GAChB,KAAAC,sBAAuB,EAEvB,KAAAC,OAAgB,CACd,CAAEC,KAAM,SAAUH,IAAK,GACvB,CAAEG,KAAM,SAAUH,IAAK,GACvB,CAAEG,KAAM,SAAUH,IAAK,GACvB,CAAEG,KAAM,SAAUH,IAAK,GACvB,CAAEG,KAAM,SAAUH,IAAK,GACvB,CAAEG,KAAM,SAAUH,IAAK,GACvB,CAAEG,KAAM,SAAUH,IAAK,GACvB,CAAEG,KAAM,SAAUH,IAAK,GACvB,CAAEG,KAAM,SAAUH,IAAK,GACvB,CAAEG,MAAM,GACR,CAAEA,KAAM,SAAUH,IAAK,GACvB,CAAEG,KAAM,aACR,CAAEA,MAAM,GACR,CAAEA,KAAM,UACR,CAAEA,MAAM,IAKJ,cAAcC,G,8CC7BQ,IAACC,ED8BvBR,KAAKG,IAAIM,OAAST,KAAKH,YAI3BG,KAAKG,IAAIO,KAAKH,EAAIJ,KAEdH,KAAKG,IAAIM,SAAWT,KAAKH,kBCpCFW,EDqCJG,SAASC,eAAe,oBCpCjC,UACbC,WAAWL,GACXM,OAAO,YACPC,SAAS,KACTC,UAAU,CACT,CAAEC,OAAQ,EAAGC,UAAW,mBACxB,CAAED,OAAQ,GAAKC,UAAW,uBAC1B,CAAED,OAAQ,GAAKC,UAAW,sBAC1B,CAAED,OAAQ,GAAKC,UAAW,uBAC1B,CAAED,OAAQ,GAAKC,UAAW,sBAC1B,CAAED,OAAQ,GAAKC,UAAW,uBAC1B,CAAED,OAAQ,GAAKC,UAAW,sBAC1B,CAAED,OAAQ,GAAKC,UAAW,sBAC1B,CAAED,OAAQ,GAAKC,UAAW,qBAC1B,CAAED,OAAQ,EAAGC,UAAW,sBDsByCC,OACjEnB,KAAKG,IAAM,OAIf,gBACEH,KAAKG,IAAIiB,MAGX,sBACEC,QAAQC,IAAI,uBAGd,c,wBA/CW1B,GAAW,UALvB,SAAU,CACT2B,SAAU,eACVC,SELF,8qF,QCAA,w3BHQa5B,GIHb,MAAM6B,EAAiB,CACrB,CACEC,KAAM,GACNC,UAAW/B,I,IAQFgC,EAAwB,QAAxBA,GAAwB,UAJpC,SAAS,CACRC,QAAS,CAAC,cAAsBJ,IAChCK,QAAS,CAAC,SAECF,G,ICJAG,EAAiB,QAAjBA,GAAiB,UAJ7B,SAAS,CACRF,QAAS,CAAC,KAAcD,EAA0B,KAClDI,aAAc,CAACpC,MAEJmC","file":"x","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { shakeAnimation } from './auth-pin.animation';\n\n@Component({\n  selector: 'app-auth-pin',\n  templateUrl: './auth-pin.page.html',\n  styleUrls: ['./auth-pin.page.scss'],\n})\nexport class AuthPinPage implements OnInit {\n  pinLength = 6;\n  pinRange = Array(this.pinLength).fill(undefined);\n  pin: number[] = [];\n  fingerPrintAvailable = true;\n\n  digits: any[] = [\n    { area: 'number', pin: 1 },\n    { area: 'number', pin: 2 },\n    { area: 'number', pin: 3 },\n    { area: 'number', pin: 4 },\n    { area: 'number', pin: 5 },\n    { area: 'number', pin: 6 },\n    { area: 'number', pin: 7 },\n    { area: 'number', pin: 8 },\n    { area: 'number', pin: 9 },\n    { area: false },\n    { area: 'number', pin: 0 },\n    { area: 'backspace' },\n    { area: false },\n    { area: 'finger' },\n    { area: false },\n  ];\n\n  constructor() {}\n\n  async passwordClick(dig) {\n    if (this.pin.length > this.pinLength) {\n      return;\n    }\n\n    this.pin.push(dig.pin);\n\n    if (this.pin.length === this.pinLength) {\n      await shakeAnimation(document.getElementById('shake-animation')).play();\n      this.pin = [];\n    }\n  }\n\n  passwordClear() {\n    this.pin.pop();\n  }\n\n  fingerPrintActivate() {\n    console.log('fingerPrintActivate');\n  }\n\n  ngOnInit(): void {}\n}\n","import { createAnimation } from '@ionic/angular';\n\n/**\n * Shake anumation\n */\nexport const shakeAnimation = (baseEl: any) => {\n  const squareA = createAnimation()\n    .addElement(baseEl)\n    .easing('ease-out')\n    .duration(800)\n    .keyframes([\n      { offset: 0, transform: 'translate(0, 0)' },\n      { offset: 0.1, transform: 'translate(-25px, 0)' },\n      { offset: 0.2, transform: 'translate(25px, 0)' },\n      { offset: 0.3, transform: 'translate(-20px, 0)' },\n      { offset: 0.4, transform: 'translate(20px, 0)' },\n      { offset: 0.5, transform: 'translate(-10px, 0)' },\n      { offset: 0.6, transform: 'translate(10px, 0)' },\n      { offset: 0.7, transform: 'translate(-5px, 0)' },\n      { offset: 0.8, transform: 'translate(5px, 0)' },\n      { offset: 1, transform: 'translate(0, 0)' },\n    ]);\n\n  return squareA;\n};\n","export default \"<ion-content>\\n  <ion-grid class=\\\"ion-no-padding\\\">\\n    <ion-row class=\\\"ion-justify-content-center\\\">\\n      <ion-col size=\\\"12\\\" size-sm=\\\"6\\\" size-lg=\\\"12\\\" class=\\\"ion-align-self-center ion-text-center\\\">\\n        <p>\\n          <ion-icon name=\\\"lock-closed\\\" color=\\\"dark\\\" size=\\\"large\\\"></ion-icon>\\n        </p>\\n        <p>\\n          <ion-text color=\\\"dark\\\"> {{'authPin' | translate: { app_name: 'Tk' } }} </ion-text>\\n        </p>\\n        <div id=\\\"shake-animation\\\">\\n          <ion-icon\\n            class=\\\"ion-margin-end\\\"\\n            *ngFor=\\\"let _ of pinRange; let i = index\\\"\\n            [name]=\\\"pin[i] !== undefined ? 'ellipse' : 'ellipse-outline'\\\"\\n            [color]=\\\"pin[i] !== undefined ? 'primary' : 'dark'\\\"\\n          >\\n          </ion-icon>\\n        </div>\\n        <ion-button color=\\\"medium\\\" fill=\\\"clear\\\" class=\\\"finger-print-button showsm-hidelg\\\" *ngIf=\\\"fingerPrintAvailable\\\">\\n          <ion-icon slot=\\\"icon-only\\\" name=\\\"finger-print-outline\\\"></ion-icon>\\n        </ion-button>\\n      </ion-col>\\n      <ion-col size=\\\"12\\\" size-sm=\\\"6\\\" size-lg=\\\"12\\\" class=\\\"ion-no-margin ion-no-padding digit-coll-position\\\">\\n        <ion-row class=\\\"digit-max-width\\\">\\n          <ion-col size=\\\"4\\\" class=\\\"ion-align-self-center ion-text-center\\\" *ngFor=\\\"let dig of digits\\\">\\n            <ng-container [ngSwitch]=\\\"dig.area\\\">\\n              <!-- Clear area -->\\n              <ng-container *ngSwitchCase=\\\"false\\\"></ng-container>\\n\\n              <!-- Finger print activate button -->\\n              <ng-container *ngSwitchCase=\\\"'finger'\\\">\\n                <ion-button\\n                  color=\\\"medium\\\"\\n                  fill=\\\"clear\\\"\\n                  class=\\\"finger-print-button hidesm-showlg\\\"\\n                  *ngIf=\\\"fingerPrintAvailable\\\"\\n                >\\n                  <ion-icon slot=\\\"icon-only\\\" name=\\\"finger-print-outline\\\"></ion-icon>\\n                </ion-button>\\n              </ng-container>\\n\\n              <!-- Clear button -->\\n              <ng-container *ngSwitchCase=\\\"'backspace'\\\">\\n                <ion-button color=\\\"medium\\\" fill=\\\"clear\\\" class=\\\"clear-button\\\" (click)=\\\"passwordClear()\\\">\\n                  <ion-icon slot=\\\"icon-only\\\" name=\\\"backspace-outline\\\"></ion-icon>\\n                </ion-button>\\n              </ng-container>\\n\\n              <!-- Digits -->\\n              <ng-container *ngSwitchDefault>\\n                <ion-button color=\\\"light\\\" class=\\\"digit-button\\\" (click)=\\\"passwordClick(dig)\\\">\\n                  <ion-text style=\\\"font-size: 22px\\\"> {{dig.pin}} </ion-text>\\n                </ion-button>\\n              </ng-container>\\n            </ng-container>\\n          </ion-col>\\n        </ion-row>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n</ion-content>\\n\";","export default \"ion-grid {\\n  width: 100%;\\n  height: 100%;\\n}\\n\\nion-row {\\n  height: 100%;\\n}\\n\\n.digit-max-width {\\n  max-width: 320px;\\n  margin: auto;\\n}\\n\\n@media (min-width: 992px) {\\n  .digit-max-width {\\n    max-width: 576px !important;\\n  }\\n}\\n\\n.digit-button {\\n  --box-shadow: none;\\n}\\n\\n.digit-button,\\n.clear-button,\\n.finger-print-button {\\n  width: 70px;\\n  height: 70px;\\n  --border-radius: 64px;\\n}\\n\\n.digit-coll-position {\\n  align-self: flex-end;\\n}\\n\\n@media (min-width: 576px) {\\n  .digit-coll-position {\\n    align-self: center !important;\\n  }\\n}\\n\\n.hidesm-showlg {\\n  display: inline-block;\\n}\\n\\n@media (min-width: 576px) and (max-width: 992px) {\\n  .hidesm-showlg {\\n    display: none !important;\\n  }\\n}\\n\\n.showsm-hidelg {\\n  display: none;\\n}\\n\\n@media (min-width: 576px) and (max-width: 992px) {\\n  .showsm-hidelg {\\n    display: inline-block !important;\\n  }\\n}\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { AuthPinPage } from './auth-pin.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AuthPinPage,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AuthPinPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SharedModule } from '../../../shared/shared.module';\nimport { AuthPinPageRoutingModule } from './auth-pin-routing.module';\n\nimport { AuthPinPage } from './auth-pin.page';\n\n@NgModule({\n  imports: [CommonModule, AuthPinPageRoutingModule, SharedModule],\n  declarations: [AuthPinPage],\n})\nexport class AuthPinPageModule {}\n"]}