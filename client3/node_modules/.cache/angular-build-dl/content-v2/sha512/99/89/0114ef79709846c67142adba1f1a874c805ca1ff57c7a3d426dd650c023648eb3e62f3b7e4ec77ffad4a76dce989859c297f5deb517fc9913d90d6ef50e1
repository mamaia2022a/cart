{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/keyboard-5742b5da.js"],"names":["KEYBOARD_DID_OPEN","KEYBOARD_DID_CLOSE","previousVisualViewport","currentVisualViewport","keyboardOpen","resetKeyboardAssist","startKeyboardAssist","win","startNativeListeners","visualViewport","copyVisualViewport","onresize","trackViewportChanges","keyboardDidOpen","keyboardDidResize","setKeyboardOpen","keyboardDidClose","setKeyboardClose","addEventListener","ev","fireKeyboardOpenEvent","fireKeyboardCloseEvent","scaledHeightDifference","height","scale","width","innerHeight","nativeEv","keyboardHeight","CustomEvent","detail","dispatchEvent","Object","assign","Math","round","offsetTop","offsetLeft","pageTop","pageLeft"],"mappings":"qiBAAA,MAAMA,EAAoB,qBACpBC,EAAqB,qBAE3B,IAAIC,EAAyB,GACzBC,EAAwB,GACxBC,GAAe,EAInB,MAAMC,EAAsB,KAC1BH,EAAyB,GACzBC,EAAwB,GACxBC,GAAe,GAEXE,EAAuBC,IAC3BC,EAAqBD,GAChBA,EAAIE,iBAGTN,EAAwBO,EAAmBH,EAAIE,gBAC/CF,EAAIE,eAAeE,SAAW,KAC5BC,EAAqBL,GACjBM,KAAqBC,EAAkBP,GACzCQ,EAAgBR,GAETS,EAAiBT,IACxBU,EAAiBV,MASjBC,EAAwBD,IAC5BA,EAAIW,iBAAiB,kBAAmBC,GAAMJ,EAAgBR,EAAKY,IACnEZ,EAAIW,iBAAiB,kBAAmB,IAAMD,EAAiBV,KAE3DQ,EAAkB,CAACR,EAAKY,KAC5BC,EAAsBb,EAAKY,GAC3Bf,GAAe,GAEXa,EAAoBV,IACxBc,EAAuBd,GACvBH,GAAe,GAcXS,EAAkB,KACtB,MAAMS,GAA0BpB,EAAuBqB,OAASpB,EAAsBoB,QAAUpB,EAAsBqB,MACtH,OAASpB,GACPF,EAAuBuB,QAAUtB,EAAsBsB,OACvDH,EA7DuB,KAmErBR,EAAqBP,GAClBH,IAAiBY,EAAiBT,GAQrCS,EAAoBT,GACjBH,GAAgBD,EAAsBoB,SAAWhB,EAAImB,YAKxDN,EAAwB,CAACb,EAAKoB,KAClC,MAAMC,EAAiBD,EAAWA,EAASC,eAAiBrB,EAAImB,YAAcvB,EAAsBoB,OAC9FJ,EAAK,IAAIU,YAAY7B,EAAmB,CAC5C8B,OAAQ,CAAEF,oBAEZrB,EAAIwB,cAAcZ,IAKdE,EAA0Bd,IAC9B,MAAMY,EAAK,IAAIU,YAAY5B,GAC3BM,EAAIwB,cAAcZ,IAQdP,EAAwBL,IAC5BL,EAAyB8B,OAAOC,OAAO,GAAI9B,GAC3CA,EAAwBO,EAAmBH,EAAIE,iBAM3CC,EAAsBD,KAExBgB,MAAOS,KAAKC,MAAM1B,EAAegB,OACjCF,OAAQW,KAAKC,MAAM1B,EAAec,QAClCa,UAAW3B,EAAe2B,UAC1BC,WAAY5B,EAAe4B,WAC3BC,QAAS7B,EAAe6B,QACxBC,SAAU9B,EAAe8B,SACzBf,MAAOf,EAAee","file":"x","sourcesContent":["const KEYBOARD_DID_OPEN = 'ionKeyboardDidShow';\r\nconst KEYBOARD_DID_CLOSE = 'ionKeyboardDidHide';\r\nconst KEYBOARD_THRESHOLD = 150;\r\nlet previousVisualViewport = {};\r\nlet currentVisualViewport = {};\r\nlet keyboardOpen = false;\r\n/**\r\n * This is only used for tests\r\n */\r\nconst resetKeyboardAssist = () => {\r\n  previousVisualViewport = {};\r\n  currentVisualViewport = {};\r\n  keyboardOpen = false;\r\n};\r\nconst startKeyboardAssist = (win) => {\r\n  startNativeListeners(win);\r\n  if (!win.visualViewport) {\r\n    return;\r\n  }\r\n  currentVisualViewport = copyVisualViewport(win.visualViewport);\r\n  win.visualViewport.onresize = () => {\r\n    trackViewportChanges(win);\r\n    if (keyboardDidOpen() || keyboardDidResize(win)) {\r\n      setKeyboardOpen(win);\r\n    }\r\n    else if (keyboardDidClose(win)) {\r\n      setKeyboardClose(win);\r\n    }\r\n  };\r\n};\r\n/**\r\n * Listen for events fired by native keyboard plugin\r\n * in Capacitor/Cordova so devs only need to listen\r\n * in one place.\r\n */\r\nconst startNativeListeners = (win) => {\r\n  win.addEventListener('keyboardDidShow', ev => setKeyboardOpen(win, ev));\r\n  win.addEventListener('keyboardDidHide', () => setKeyboardClose(win));\r\n};\r\nconst setKeyboardOpen = (win, ev) => {\r\n  fireKeyboardOpenEvent(win, ev);\r\n  keyboardOpen = true;\r\n};\r\nconst setKeyboardClose = (win) => {\r\n  fireKeyboardCloseEvent(win);\r\n  keyboardOpen = false;\r\n};\r\n/**\r\n * Returns `true` if the `keyboardOpen` flag is not\r\n * set, the previous visual viewport width equal the current\r\n * visual viewport width, and if the scaled difference\r\n * of the previous visual viewport height minus the current\r\n * visual viewport height is greater than KEYBOARD_THRESHOLD\r\n *\r\n * We need to be able to accommodate users who have zooming\r\n * enabled in their browser (or have zoomed in manually) which\r\n * is why we take into account the current visual viewport's\r\n * scale value.\r\n */\r\nconst keyboardDidOpen = () => {\r\n  const scaledHeightDifference = (previousVisualViewport.height - currentVisualViewport.height) * currentVisualViewport.scale;\r\n  return (!keyboardOpen &&\r\n    previousVisualViewport.width === currentVisualViewport.width &&\r\n    scaledHeightDifference > KEYBOARD_THRESHOLD);\r\n};\r\n/**\r\n * Returns `true` if the keyboard is open,\r\n * but the keyboard did not close\r\n */\r\nconst keyboardDidResize = (win) => {\r\n  return keyboardOpen && !keyboardDidClose(win);\r\n};\r\n/**\r\n * Determine if the keyboard was closed\r\n * Returns `true` if the `keyboardOpen` flag is set and\r\n * the current visual viewport height equals the\r\n * layout viewport height.\r\n */\r\nconst keyboardDidClose = (win) => {\r\n  return keyboardOpen && currentVisualViewport.height === win.innerHeight;\r\n};\r\n/**\r\n * Dispatch a keyboard open event\r\n */\r\nconst fireKeyboardOpenEvent = (win, nativeEv) => {\r\n  const keyboardHeight = nativeEv ? nativeEv.keyboardHeight : win.innerHeight - currentVisualViewport.height;\r\n  const ev = new CustomEvent(KEYBOARD_DID_OPEN, {\r\n    detail: { keyboardHeight }\r\n  });\r\n  win.dispatchEvent(ev);\r\n};\r\n/**\r\n * Dispatch a keyboard close event\r\n */\r\nconst fireKeyboardCloseEvent = (win) => {\r\n  const ev = new CustomEvent(KEYBOARD_DID_CLOSE);\r\n  win.dispatchEvent(ev);\r\n};\r\n/**\r\n * Given a window object, create a copy of\r\n * the current visual and layout viewport states\r\n * while also preserving the previous visual and\r\n * layout viewport states\r\n */\r\nconst trackViewportChanges = (win) => {\r\n  previousVisualViewport = Object.assign({}, currentVisualViewport);\r\n  currentVisualViewport = copyVisualViewport(win.visualViewport);\r\n};\r\n/**\r\n * Creates a deep copy of the visual viewport\r\n * at a given state\r\n */\r\nconst copyVisualViewport = (visualViewport) => {\r\n  return {\r\n    width: Math.round(visualViewport.width),\r\n    height: Math.round(visualViewport.height),\r\n    offsetTop: visualViewport.offsetTop,\r\n    offsetLeft: visualViewport.offsetLeft,\r\n    pageTop: visualViewport.pageTop,\r\n    pageLeft: visualViewport.pageLeft,\r\n    scale: visualViewport.scale\r\n  };\r\n};\r\n\r\nexport { KEYBOARD_DID_CLOSE, KEYBOARD_DID_OPEN, copyVisualViewport, keyboardDidClose, keyboardDidOpen, keyboardDidResize, resetKeyboardAssist, setKeyboardClose, setKeyboardOpen, startKeyboardAssist, trackViewportChanges };\r\n"]}